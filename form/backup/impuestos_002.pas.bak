unit impuestos_002;

{$mode objfpc}{$H+}

interface

uses
    Classes, SysUtils, sqldb, db, FileUtil, Forms, Controls, Graphics, Dialogs,
    DBGrids, DbCtrls, utilidades_rgtro, utilidades_general, utilidades_bd,
    Buttons, StdCtrls, ExtCtrls, Grids, ComCtrls, utilidades_datos_tablas ;

type

    { Tform_impuestos_002 }

    Tform_impuestos_002 = class(TForm)
      BitBtn_Filtrar: TBitBtn;
      BitBtn_SALIR: TBitBtn;
      BitBtn_Seleccionar: TBitBtn;
        DataSource_Impuestos_para_composicion: TDataSource;
        DBGrid_Principal: TDBGrid;
        DBNavigator1: TDBNavigator;
        Edit_Descripcion: TEdit;
        Image_Confirmado: TImage;
        Label10: TLabel;
        Label6: TLabel;
        Label9: TLabel;
        Label_Cambiable_1: TLabel;
        Label_Cambiable_2: TLabel;
        Memo_Filtros: TMemo;
        Memo_OrderBy: TMemo;
        PageControl_Filtros: TPageControl;
        RadioGroup_Bajas: TRadioGroup;
        SQLQuery_Impuestos_para_composicion: TSQLQuery;
        SQLQuery_Impuestos_para_composicionChange_Id_User: TLargeintField;
        SQLQuery_Impuestos_para_composicionChange_WHEN: TDateTimeField;
        SQLQuery_Impuestos_para_composicionCuenta_Contable: TStringField;
        SQLQuery_Impuestos_para_composicionDel_Id_User: TLargeintField;
        SQLQuery_Impuestos_para_composicionDel_WHEN: TDateTimeField;
        SQLQuery_Impuestos_para_composicionDel_WHY: TStringField;
        SQLQuery_Impuestos_para_composiciondescripcion: TStringField;

        SQLQuery_Impuestos_para_composicionid: TLargeintField;
        SQLQuery_Impuestos_para_composicionInsert_Id_User: TLargeintField;
        SQLQuery_Impuestos_para_composicionInsert_WHEN: TDateTimeField;
        SQLQuery_Impuestos_para_composicionSumado_A_Ftra_SN: TStringField;
        SQLQuery_Impuestos_para_composicionTanto_Por_Ciento: TBCDField;
        TabSheet_Busqueda_Concreta: TTabSheet;
        TabSheet_Filtros_Generales: TTabSheet;

        procedure Filtrar_Principal_Sin_Preguntar;
        procedure Obligar_como_Filtrado_Principal;
        procedure Presentar_Datos;
        procedure BitBtn_FiltrarClick(Sender: TObject);
        procedure no_Tocar;
        procedure BitBtn_SeleccionarClick(Sender: TObject);
        procedure DBNavigator1BeforeAction(Sender: TObject; Button: TDBNavButtonType);
        procedure Seleccionado_Rgtro;
        procedure BitBtn_SALIRClick(Sender: TObject);
        procedure DBGrid_PrincipalCellClick(Column: TColumn);
        procedure DBGrid_PrincipalDblClick(Sender: TObject);
        procedure DBGrid_PrincipalDrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
        procedure DBGrid_PrincipalKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
        procedure DBGrid_PrincipalKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
        procedure Filtrar_tablas_ligadas;
        function  Filtrar_Principal( param_Cambiamos_Filtro : Boolean ) : ShortInt;
        procedure Refrescar_Registros;
        procedure Cerramos_Tablas;
        procedure Cerramos_Tablas_Ligadas;
        procedure FormDestroy(Sender: TObject);
        procedure para_Empezar;
        procedure FormActivate(Sender: TObject);
        procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
        procedure FormCreate(Sender: TObject);
        procedure SQLQuery_Impuestos_para_composicionAfterPost(DataSet: TDataSet);
        procedure SQLQuery_Impuestos_para_composicionAfterScroll(DataSet: TDataSet);
        procedure SQLQuery_Impuestos_para_composicionBeforePost(DataSet: TDataSet);
        procedure SQLQuery_Impuestos_para_composicionCalcFields(DataSet: TDataSet);
    private
        { private declarations }
        private_Salir_OK             : Boolean;
        private_Last_Column          : TColumn;
        private_Order_By             : array of TOrder_By;
    public
        { public declarations }
        public_Solo_Ver                              : Boolean;
        public_Elegimos                              : Boolean;
        public_Menu_Worked                           : Integer;
        public_Rgtro_Seleccionado                    : Boolean;
        public_id_impuesto_que_no_tiene_que_aparecer : ShortString;
    end;

var
    form_impuestos_002: Tform_impuestos_002;

implementation

{$R *.lfm}

uses menu, dm_impuestos_para_composicion;

{ Tform_impuestos_002 }

procedure Tform_impuestos_002.FormActivate(Sender: TObject);
begin
    If public_Elegimos = true then
    begin
        BitBtn_Seleccionar.Visible := True;

        with Self do
        begin
            Color := $00B9959C;
        end;
    end;

    if public_Solo_Ver = true then no_Tocar;
end;

procedure Tform_impuestos_002.FormClose(Sender: TObject; var CloseAction: TCloseAction);
begin
    if private_Salir_OK = False then
        begin
          { ********************************************************************
            Intento BitBtn_SALIR de la aplicación de un modo no permitido.
            ********************************************************************
            Pero si desde el menu principal está a true la variable
            public_Salir_Ok, significa que hay que salir si o si pues se pulsó
            cancelar al preguntar otra vez por la contraseña
            ******************************************************************** }
            if form_Menu.public_Salir_OK = False then CloseAction := CloseAction.caNone;
        end
    else
        begin
          { ********************************************************************
            Fue correcto el modo como quiere BitBtn_SALIR de la aplicación
            ******************************************************************** }
        end;
end;

procedure Tform_impuestos_002.FormCreate(Sender: TObject);
begin
    { ****************************************************************************
      Obligado en cada formulario para no olvidarlo
      **************************************************************************** }
      with Self do
      begin
          Color       := $00C2C29E;
          Position    := poScreenCenter;
          BorderIcons := [];
          BorderStyle := bsSingle;
      end;

      private_Salir_OK := false;

    { ****************************************************************************
      Solo para formularios que traten con datos
      **************************************************************************** }
      public_Solo_Ver                 := false;
      public_Elegimos                 := false;

      public_Rgtro_Seleccionado       := false;
end;

procedure Tform_impuestos_002.para_Empezar;
begin
  { ****************************************************************************
    Solo para formularios que traten con datos
    **************************************************************************** }
    if UTI_GEN_Form_Abierto_Ya('DataModule_impuestos_para_composicion') = False then
    begin
        DataModule_impuestos_para_composicion := TDataModule_impuestos_para_composicion.Create(Application);
    end;

  { ****************************************************************************
    Preparamos los diferentes tipos de orden preconfigurados
    **************************************************************************** }
    // IMPUESTOS
    SetLength(private_Order_By, 1);

    private_Order_By[0].Titulo       := 'Por la descripción'; // El índice 0 siempre será por el que empezará la aplicación y los filtros
    private_Order_By[0].Memo_OrderBy := 'i.descripcion ASC';

    Memo_OrderBy.Lines.Text := private_Order_By[0].Memo_OrderBy;

    Obligar_como_Filtrado_Principal;

    { ****************************************************************************
    Filtramos los datos
    **************************************************************************** }
    Filtrar_Principal_Sin_Preguntar;

    Presentar_Datos;

    // ********************************************************************************************* //
    // ** SOLO PARA ESTE FORM                                                                     ** //
    // ********************************************************************************************* //
    PageControl_Filtros.ActivePage := TabSheet_Busqueda_Concreta;
end;

procedure Tform_impuestos_002.FormDestroy(Sender: TObject);
begin
    Cerramos_Tablas;
end;

procedure Tform_impuestos_002.SQLQuery_Impuestos_para_composicionAfterPost(DataSet: TDataSet);
begin
    UTI_RGTRO_Grabar( 'impuestos',
                      DataModule_impuestos_para_composicion.SQLTransaction_ImptosC,
                      SQLQuery_Impuestos_para_composicion );
    Refrescar_Registros;
end;

procedure Tform_impuestos_002.SQLQuery_Impuestos_para_composicionAfterScroll(DataSet: TDataSet);
begin
    Filtrar_tablas_ligadas;
end;

procedure Tform_impuestos_002.SQLQuery_Impuestos_para_composicionBeforePost(DataSet: TDataSet);
begin
    UTI_RGTRO_param_assign_value( SQLQuery_Impuestos_para_composicion );
end;

procedure Tform_impuestos_002.SQLQuery_Impuestos_para_composicionCalcFields(DataSet: TDataSet);
begin
    // ********************************************************************************************* //
    // ** PARA DAR VALOR A CAMPOS CALCULADOS                                                      ** //
    // ********************************************************************************************* //
end;

procedure Tform_impuestos_002.Cerramos_Tablas;
begin
    Cerramos_Tablas_Ligadas;

    if UTI_TB_Cerrar( DataModule_impuestos_para_composicion.SQLConnector_ImptosC,
                      DataModule_impuestos_para_composicion.SQLTransaction_ImptosC,
                      SQLQuery_Impuestos_para_composicion ) = false then UTI_GEN_Salir;

    DataModule_impuestos_para_composicion.Free;
end;

procedure Tform_impuestos_002.Cerramos_Tablas_Ligadas;
begin
{ ESTE form NO TIENE TABLAS LIGADAS

    if UTI_TB_Cerrar( DataModule_del_form_000.SQLConnector_de_la_tabla,
                      DataModule_Users.SQLTransaction_de_la_tabla,
                      SQLQuery_la_tabla ) = false then UTI_GEN_Salir;
}
end;

procedure Tform_impuestos_002.Refrescar_Registros;
var var_descripcion : String;
begin
    // ********************************************************************************************* //
    // ** OJITO ... NO USAR CAMPOS AUTOINCREMENTABLES                                             ** //
    // ********************************************************************************************* //
    var_descripcion := '';

    if SQLQuery_Impuestos_para_composicion.RecordCount > 0 then
    begin
        var_descripcion := SQLQuery_Impuestos_para_composicion.FieldByName('descripcion').asString;
    end;

    Filtrar_Principal_Sin_Preguntar;

    if Trim(var_descripcion) <> '' then
    begin
         SQLQuery_Impuestos_para_composicion.Locate('descripcion', var_descripcion, []);
    end;
end;

procedure Tform_impuestos_002.Filtrar_tablas_ligadas;
var var_Lineas_Filtro  : TStrings;
    var_Lineas_OrderBy : TStrings;
begin
    if SQLQuery_Impuestos_para_composicion.RecordCount = 0 then Exit;

    if SQLQuery_Impuestos_para_composicion.State = dsInsert then
    begin
        Cerramos_Tablas_Ligadas;
        Exit;
    end;

    var_Lineas_Filtro  := TStringList.Create;
    var_Lineas_OrderBy := TStringList.Create;

    var_Lineas_Filtro.Free;
    var_Lineas_OrderBy.Free;
end;

procedure Tform_impuestos_002.DBGrid_PrincipalDblClick(Sender: TObject);
begin
    If public_Elegimos then Seleccionado_Rgtro;
end;

procedure Tform_impuestos_002.DBGrid_PrincipalCellClick(Column: TColumn);
begin
    //Filtrar_tablas_ligadas;
end;

procedure Tform_impuestos_002.BitBtn_SALIRClick(Sender: TObject);
begin
    private_Salir_OK := true;  { La pongo a true para controlar el modo de BitBtn_SALIR del programa}

    Close;
end;

procedure Tform_impuestos_002.DBGrid_PrincipalDrawColumnCell(Sender: TObject;
    const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var var_Color_Normal : TColor;
begin
    with Sender as TDBGrid do
    begin
        if SQLQuery_Impuestos_para_composicion.RecordCount = 0 then Exit;

        var_Color_Normal := Canvas.Brush.Color;

        // ***************************************************************************************** //
        // ** Primero comprobamos si es un registro dado de baja o no                             ** //
        // ***************************************************************************************** //
        if not SQLQuery_Impuestos_para_composicion.FieldByName('Del_WHEN').IsNull then
        begin
            // ************************************************************************************* //
            // ** Registro DADO de BAJA                                                           ** //
            // ************************************************************************************* //
            Canvas.Font.Color := clSilver;
        end else begin
            // ************************************************************************************* //
            // ** Registro DADO de ALTA, NO BAJA                                                  ** //
            // ************************************************************************************* //
            // ** Así que las pinto, pero sólo si no son las columnas que van a ser dibujadas     ** //
            // ************************************************************************************* //
            if State <> [gdSelected] then
            begin
                if (Column.FieldName <> 'COLUMNA_CON_IMAGEN') then
                begin
                    Canvas.font.Color := clBlack;
                end;
            end;
        end;

        // ***************************************************************************************** //
        // ** Ahora paso a dibujar una celda normal con los colores elegidos o una dibujada       ** //
        // ***************************************************************************************** //
        if (Column.FieldName <> 'COLUMNA_CON_IMAGEN') then
        begin
            // ************************************************************************************* //
            // ** No es una de las columnas a dibujar por lo que la pinto con los colores elegidos** //
            // ************************************************************************************* //
            DefaultDrawColumnCell(Rect, DataCol, Column, State)
        end else begin
            // ************************************************************************************* //
            // ** Es una de las columnas a dibujar                                                ** //
            // ************************************************************************************* //
            if Column.FieldName = 'COLUMNA_CON_IMAGEN'  then
            begin
                if SQLQuery_Impuestos_para_composicion.FieldByName('Tanto_Por_Ciento').AsString = '' then
                begin
                    Canvas.StretchDraw(Rect, Image_Confirmado.Picture.Graphic);
                end;
            end;
        end;

        Canvas.Font.Color := var_Color_Normal;
    end;
end;

procedure Tform_impuestos_002.DBGrid_PrincipalKeyDown(Sender: TObject; var Key: Word;
    Shift: TShiftState);
begin
    if Key = 13 then
    begin
        If public_Elegimos then Seleccionado_Rgtro;
    end;
end;

procedure Tform_impuestos_002.DBGrid_PrincipalKeyUp(Sender: TObject; var Key: Word;
    Shift: TShiftState);
begin
    if (key = 40) or (key = 38) then
    begin
         //Filtrar_tablas_ligadas;
    end;
end;

procedure Tform_impuestos_002.Seleccionado_Rgtro;
begin
    private_Salir_OK          := true;  { La pongo a true para controlar el modo de BitBtn_SALIR del programa}
    public_Rgtro_Seleccionado := true;
    Close;
end;

procedure Tform_impuestos_002.BitBtn_SeleccionarClick(Sender: TObject);
begin
    Seleccionado_Rgtro;
end;

procedure Tform_impuestos_002.DBNavigator1BeforeAction(Sender: TObject; Button: TDBNavButtonType);
begin
    //Filtrar_tablas_ligadas;

    case Button of
        nbRefresh : begin
            Refrescar_Registros;
            Abort;
        end;
    end;
end;

procedure Tform_impuestos_002.no_Tocar;
begin
    // No hay nada para no tocar
end;

procedure Tform_impuestos_002.BitBtn_FiltrarClick(Sender: TObject);
begin
    if PageControl_Filtros.ActivePage = TabSheet_Busqueda_Concreta then
    begin
        Filtrar_Principal_Sin_Preguntar;
    end else begin
        RadioGroup_Bajas.ItemIndex := Filtrar_Principal( true );
    end;
end;

procedure Tform_impuestos_002.Presentar_Datos;
begin
    // No hay nada para presentar
end;

procedure Tform_impuestos_002.Obligar_como_Filtrado_Principal;
begin
    if Trim(public_id_impuesto_que_no_tiene_que_aparecer) <> '' then
    begin
        UTI_RGTRO_Add_to_Where( true,
                                Memo_Filtros.Lines,
                                'i.id <> ' + Trim(public_id_impuesto_que_no_tiene_que_aparecer) );
    end;
end;

procedure Tform_impuestos_002.Filtrar_Principal_Sin_Preguntar;
begin
    RadioGroup_Bajas.ItemIndex := Filtrar_Principal( false );
end;

function Tform_impuestos_002.Filtrar_Principal( param_Cambiamos_Filtro : Boolean ) : ShortInt;
var var_Registro_CRUD : TRegistro_CRUD;
    var_ctdad_Rgtros  : Integer;
    var_a_Filtrar     : TStrings;
begin
    var_a_Filtrar := TStringList.Create;
    var_a_Filtrar.Clear;

    var_Registro_CRUD := UTI_DATOS_TABLA_Elija_impuesto_CRUD;
    var_ctdad_Rgtros  := -1;

    Obligar_como_Filtrado_Principal;

    // ********************************************************************************************* //
    // ** AHORA PONDREMOS EL RESTO DE LOS FILTROS QUE NO SON GENERALES                            ** //
    // ********************************************************************************************* //
    // ** Primero buscaremos en el nombre y apellido el texto a buscar                              ** //
    // ********************************************************************************************* //
    if Trim(Edit_Descripcion.Text) <> '' then
    begin
        UTI_RGTRO_Add_to_Where( false,
                                var_a_Filtrar,
                                'i.descripcion LIKE ' +
                                UTI_GEN_Comillas('%' + Trim(Edit_Descripcion.Text) + '%') );
    end;

    // ********************************************************************************************* //
    // ** Pasamos a filtrar los registros                                                         ** //
    // ********************************************************************************************* //
    Result := UTI_TB_Filtrar( private_Order_By,

                              var_Registro_CRUD.Delete_SQL,
                              var_Registro_CRUD.Update_SQL,
                              var_Registro_CRUD.Insert_SQL,

                              var_ctdad_Rgtros,
                              DataModule_impuestos_para_composicion.SQLTransaction_ImptosC,
                              DataModule_impuestos_para_composicion.SQLConnector_ImptosC,
                              SQLQuery_Impuestos_para_composicion,

                              var_Registro_CRUD.name_tabla,
                              RadioGroup_Bajas.ItemIndex,

                              var_Registro_CRUD.SELECT_SQL,

                              Memo_Filtros.Lines,
                              Memo_OrderBy.Lines,
                              var_a_Filtrar.Text,

                              param_Cambiamos_Filtro );

    var_a_Filtrar.Free;

    //Filtrar_tablas_ligadas;
end;

end.


