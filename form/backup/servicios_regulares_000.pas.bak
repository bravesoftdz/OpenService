unit servicios_regulares_000;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, db, FileUtil, DateTimePicker, DBDateTimePicker, Forms, Controls, Graphics,
  Dialogs, ExtCtrls, StdCtrls, Buttons, ComCtrls, ButtonPanel, DbCtrls, DBGrids, MaskEdit, Spin, EditBtn,
  DBExtCtrls, plantilla_000, utilidades_datos_tablas, types, Grids, utilidades_usuarios, utilidades_general,
  variants, utilidades_forms_Filtrar, utilidades_rgtro, utilidades_bd, utilidades_servicios;

resourcestring
  rs_serv_regulares_001 = ', con concepto = ';
  rs_serv_regulares_002 = ', con cliente = ';
  rs_serv_regulares_003 = ', con empresa = ';
  rs_serv_regulares_004 = ', con día semana sólo (';
  rs_serv_regulares_005 = ' lunes';
  rs_serv_regulares_006 = ' martes';
  rs_serv_regulares_007 = ' miércoles';
  rs_serv_regulares_008 = ' jueves';
  rs_serv_regulares_009 = ' viernes';
  rs_serv_regulares_010 = ' sabado';
  rs_serv_regulares_011 = ' domingo';
  rs_serv_regulares_012 = ', activos al = ';
  rs_serv_regulares_013 = ', con tipo de vehículo = ';
  rs_serv_regulares_014 = 'Temporada repetida para este servicio regular.';
  rs_serv_regulares_015 = 'Error al comprobar si la temporada ya fué puesta para este servicio regular. La tabla ha sido ';
  rs_serv_regulares_016 = ' desde el módulo ';
  rs_serv_regulares_017 = 'Por fechas';
  rs_serv_regulares_018 = '* La empresa puesta para el servicio no es la misma que la empresa de la serie elegida para el servicio.';
  rs_serv_regulares_019 = '* La SERIE para el servicio.';
  rs_serv_regulares_020 = '* La DESCRIPCIÓN.';
  rs_serv_regulares_021 = '* El TIPO DE VEHICULO.';
  rs_serv_regulares_022 = '* La EMPRESA que realizará el servicio.';
  rs_serv_regulares_023 = '* El cliente.';

type

  { Tform_servicios_regulares_000 }

  Tform_servicios_regulares_000 = class(Tform_plantilla_000)
    Bitbtn_Borrar_Fecha_Recogida_Monitor: TBitBtn;
    BitBtn_duplicar: TBitBtn;
    BitBtn_Elegir_Cliente: TBitBtn;
    BitBtn_Elegir_Servicio_Serie: TBitBtn;
    BitBtn_Elegir_TipoServicio: TBitBtn;
    BitBtn_filtro_cliente: TBitBtn;
    BitBtn_filtro_empresa: TBitBtn;
    BitBtn_filtro_TipoVehiculo: TBitBtn;
    BitBtn_Ver_Situacion_Registro_Temporadas: TBitBtn;
    Boton_Elegir_Acompanante: TBitBtn;
    Boton_Elegir_Contratante: TBitBtn;
    BitBtn_Elegir_Tipo_Vehiculo: TBitBtn;
    BitBtn_Elegir_Empresa: TBitBtn;
    CheckBox_domingo: TCheckBox;
    CheckBox_jueves: TCheckBox;
    CheckBox_lunes: TCheckBox;
    CheckBox_martes: TCheckBox;
    CheckBox_miercoles: TCheckBox;
    CheckBox_sabado: TCheckBox;
    CheckBox_viernes: TCheckBox;
    DataSource_Temporadas: TDataSource;
    DateTimePicker_activo_todavia_al: TDateTimePicker;
    DBCheckBox_InicioEnCocheras: TPanel;
    DBDateTimePicker_DesdeFecha: TDBDateTimePicker;
    DBDateTimePicker_DesdeHora: TDBDateTimePicker;
    DBDateTimePicker_HastaFecha: TDBDateTimePicker;
    DBDateTimePicker_HastaHora: TDBDateTimePicker;
    DBDateTimePicker_Hora2: TDBDateTimePicker;
    DBEdit_Descripcion: TDBEdit;
    DBEdit_Descripcion1: TDBEdit;
    DBEdit_Descripcion10: TDBEdit;
    DBEdit_Descripcion2: TDBEdit;
    DBEdit_Descripcion3: TDBEdit;
    DBEdit_Descripcion4: TDBEdit;
    DBEdit_Descripcion5: TDBEdit;
    DBEdit_Descripcion6: TDBEdit;
    DBEdit_Descripcion7: TDBEdit;
    DBEdit_Descripcion8: TDBEdit;
    DBEdit_Descripcion9: TDBEdit;
    DBGrid_Temporadas: TDBGrid;
    DBMemo_conductores_condiciones: TDBMemo;
    DBMemo_Conductores_Instrucciones: TDBMemo;
    DBMemo_facturacion_instrucciones: TDBMemo;
    DBMemo_Itinerarios: TDBMemo;
    DBMemo_liquidaciones_instrucciones: TDBMemo;
    DBMemo_montaje_instrucciones: TDBMemo;
    DBMemo_observaciones_generales: TDBMemo;
    DBMemo_Observaciones_Vehiculo: TDBMemo;
    DBNavigator_Temporadas: TDBNavigator;
    Domingo: TDBCheckBox;
    Domingo1: TDBCheckBox;
    Edit_Acompanante_CodigoPostal: TEdit;
    Edit_Acompanante_Direccion: TEdit;
    Edit_Acompanante_eMail: TEdit;
    Edit_Acompanante_Empleado_de: TEdit;
    Edit_Acompanante_FAX: TEdit;
    Edit_Acompanante_Movil: TEdit;
    Edit_Acompanante_NIF: TEdit;
    Edit_Acompanante_NIF_Caducidad: TEdit;
    Edit_Acompanante_Nombre: TEdit;
    Edit_Acompanante_Pais: TEdit;
    Edit_Acompanante_Poblacion: TEdit;
    Edit_Acompanante_Provincia: TEdit;
    Edit_Acompanante_SeguridadSocial: TEdit;
    Edit_Acompanante_Telefono_1: TEdit;
    Edit_Acompanante_Telefono_2: TEdit;
    Edit_descripcion: TEdit;
    Edit_Descripcion_Cliente: TEdit;
    Edit_Descripcion_Contratante: TEdit;
    Edit_serie_codigo: TEdit;
    Edit_Descripcion_TipoServicio: TEdit;
    Edit_Descripcion_Tipo_Vehiculo: TEdit;
    Edit_Descripcion_Empresa: TEdit;
    Edit_filtro_descripcion_cliente: TEdit;
    Edit_filtro_descripcion_empresa: TEdit;
    Edit_filtro_descripcion_TipoVehiculo: TEdit;
    Edit_filtro_id_clientes: TEdit;
    Edit_filtro_id_empresas: TEdit;
    Edit_filtro_id_vehiculos_tipos: TEdit;
    Edit_NIF_Contratante: TEdit;
    Edit_Subcuenta_Cliente: TEdit;
    Edit_Subcuenta_Ventas_de_la_Serie_Servicio: TEdit;
    FueraDelMunicipio: TDBCheckBox;
    FueraDelMunicipio1: TDBCheckBox;
    FueraDelMunicipio2: TDBCheckBox;
    GroupBox10: TGroupBox;
    GroupBox2: TGroupBox;
    GroupBox7: TGroupBox;
    GroupBox8: TGroupBox;
    GroupBox9: TGroupBox;
    GroupBox_Dias_Servicio: TGroupBox;
    GroupBox_Dias_Servicio1: TGroupBox;
    GroupBox_NIF: TGroupBox;
    Image_Punto_Rojo: TImage;
    Jueves: TDBCheckBox;
    Label1: TLabel;
    Label10: TLabel;
    Label105: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label138: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    Label2: TLabel;
    Label20: TLabel;
    Label21: TLabel;
    Label22: TLabel;
    Label23: TLabel;
    Label24: TLabel;
    Label25: TLabel;
    Label26: TLabel;
    Label27: TLabel;
    Label28: TLabel;
    Label29: TLabel;
    Label3: TLabel;
    Label30: TLabel;
    Label41: TLabel;
    Label44: TLabel;
    Label48: TLabel;
    Label64: TLabel;
    Label_Duplicandose: TLabel;
    Label31: TLabel;
    Label32: TLabel;
    Label33: TLabel;
    Label34: TLabel;
    Label35: TLabel;
    Label36: TLabel;
    Label37: TLabel;
    Label38: TLabel;
    Label39: TLabel;
    Label4: TLabel;
    Label40: TLabel;
    Label42: TLabel;
    Label43: TLabel;
    Label45: TLabel;
    Label46: TLabel;
    Label47: TLabel;
    Label5: TLabel;
    Label50: TLabel;
    Label51: TLabel;
    Label52: TLabel;
    Label54: TLabel;
    Label55: TLabel;
    Label56: TLabel;
    Label57: TLabel;
    Label58: TLabel;
    Label59: TLabel;
    Label6: TLabel;
    Label60: TLabel;
    Label61: TLabel;
    Label63: TLabel;
    Label66: TLabel;
    Label67: TLabel;
    Label68: TLabel;
    Label69: TLabel;
    Label7: TLabel;
    Label70: TLabel;
    Label71: TLabel;
    Label75: TLabel;
    Label76: TLabel;
    Label78: TLabel;
    Label79: TLabel;
    Label8: TLabel;
    Label80: TLabel;
    Label81: TLabel;
    Label9: TLabel;
    Lunes: TDBCheckBox;
    Martes: TDBCheckBox;
    MaskEdit_Horas_Anticipacion: TMaskEdit;
    MaskEdit_Minutos_Anticipacion: TMaskEdit;
    Miercoles: TDBCheckBox;
    PageControl_Montaje: TPageControl;
    PageControl_Otros_Datos: TPageControl;
    Panel_1: TPanel;
    Panel_2: TPanel;
    Panel_3: TPanel;
    Panel_Ultimo_Periodo: TPanel;
    Panel17: TPanel;
    Panel18: TPanel;
    Panel19: TPanel;
    Panel24: TPanel;
    Panel25: TPanel;
    Panel26: TPanel;
    Panel27: TPanel;
    Panel28: TPanel;
    Panel29: TPanel;
    Panel30: TPanel;
    Panel31: TPanel;
    Panel32: TPanel;
    Panel33: TPanel;
    Panel34: TPanel;
    Panel35: TPanel;
    Panel36: TPanel;
    Panel37: TPanel;
    Panel38: TPanel;
    Panel39: TPanel;
    Panel40: TPanel;
    Panel41: TPanel;
    Panel42: TPanel;
    Panel43: TPanel;
    Panel44: TPanel;
    Panel45: TPanel;
    Panel46: TPanel;
    Panel47: TPanel;
    Panel48: TPanel;
    Panel49: TPanel;
    Panel_10: TPanel;
    Panel_7: TPanel;
    Panel_8: TPanel;
    Panel_9: TPanel;
    Sabado: TDBCheckBox;
    Shape5: TShape;
    Shape6: TShape;
    Shape7: TShape;
    SpinEdit_Ctdad_Conductores: TSpinEdit;
    SQLConnector_Temporadas: TSQLConnector;
    SQLQuery_Principalacompanante_recogida_hora: TDateTimeField;
    SQLQuery_Principalacompanante_recogida_lugar: TStringField;
    SQLQuery_PrincipalChange_Id_User: TLargeintField;
    SQLQuery_PrincipalChange_WHEN: TDateTimeField;
    SQLQuery_Principalclientes_recogida_lugar: TStringField;
    SQLQuery_Principalconductores_cantidad: TLongintField;
    SQLQuery_Principalconductores_condiciones: TStringField;
    SQLQuery_Principalconductores_instrucciones: TStringField;
    SQLQuery_PrincipalDel_Id_User: TLargeintField;
    SQLQuery_PrincipalDel_WHEN: TDateTimeField;
    SQLQuery_PrincipalDel_WHY: TStringField;
    SQLQuery_Principaldescripcion: TStringField;
    SQLQuery_Principaldomingo_SN: TStringField;
    SQLQuery_Principalfacturar_por_periodo_SN: TStringField;
    SQLQuery_Principalfuera_del_municipio_SN: TStringField;
    SQLQuery_Principalid_clientes: TLargeintField;
    SQLQuery_Principalid_clientes_contratante: TLargeintField;
    SQLQuery_Principalid_empresas: TLargeintField;
    SQLQuery_Principalid_personal_acompanante: TLargeintField;
    SQLQuery_Principalid_series_servicios: TLargeintField;
    SQLQuery_Principalid_servicios_tipos: TLargeintField;
    SQLQuery_Principalid_vehiculos_tipos: TLargeintField;
    SQLQuery_PrincipalInsert_Id_User: TLargeintField;
    SQLQuery_PrincipalInsert_WHEN: TDateTimeField;
    SQLQuery_Principalitinerarios: TStringField;
    SQLQuery_PrincipalItinerarios_imprimir_en_partes_SN: TStringField;
    SQLQuery_Principaljueves_SN: TStringField;
    SQLQuery_Principallibro_ruta_contratante: TStringField;
    SQLQuery_Principallibro_ruta_destino: TStringField;
    SQLQuery_Principallibro_ruta_expediciones: TStringField;
    SQLQuery_Principallibro_ruta_nif: TStringField;
    SQLQuery_Principallibro_ruta_origen: TStringField;
    SQLQuery_Principallunes_SN: TStringField;
    SQLQuery_Principalmartes_SN: TStringField;
    SQLQuery_Principalmiercoles_SN: TStringField;
    SQLQuery_Principalobservaciones_comentarios: TStringField;
    SQLQuery_Principalobservaciones_facturacion: TStringField;
    SQLQuery_Principalobservaciones_montaje: TStringField;
    SQLQuery_Principalobservaciones_para_liquidacion: TStringField;
    SQLQuery_Principalobservaciones_vehiculo: TStringField;
    SQLQuery_PrincipalOT_cliente_BIC_SWIFT: TStringField;
    SQLQuery_PrincipalOT_cliente_codigo_postal: TStringField;
    SQLQuery_PrincipalOT_cliente_cuenta_bancaria: TLongintField;
    SQLQuery_PrincipalOT_cliente_cuenta_contable: TStringField;
    SQLQuery_PrincipalOT_cliente_descripcion: TStringField;
    SQLQuery_PrincipalOT_cliente_direccion: TLongintField;
    SQLQuery_PrincipalOT_cliente_FAX: TStringField;
    SQLQuery_PrincipalOT_cliente_forma_pago_descripcion: TStringField;
    SQLQuery_PrincipalOT_cliente_IBAN: TStringField;
    SQLQuery_PrincipalOT_cliente_Movil: TStringField;
    SQLQuery_PrincipalOT_cliente_NIF: TStringField;
    SQLQuery_PrincipalOT_cliente_poblacion_descripcion: TStringField;
    SQLQuery_PrincipalOT_cliente_provincia_descripcion: TStringField;
    SQLQuery_PrincipalOT_cliente_Tfno_Fijo_1: TStringField;
    SQLQuery_PrincipalOT_cliente_Tfno_Fijo_2: TStringField;
    SQLQuery_PrincipalOT_contratante_descripcion: TStringField;
    SQLQuery_PrincipalOT_contratante_NIF: TStringField;
    SQLQuery_PrincipalOT_empresa_descripcion: TStringField;
    SQLQuery_PrincipalOT_id_empresas_series_servicios: TLargeintField;
    SQLQuery_PrincipalOT_monitor_Codigo_Postal: TStringField;
    SQLQuery_PrincipalOT_monitor_direccion: TLongintField;
    SQLQuery_PrincipalOT_monitor_eMail: TStringField;
    SQLQuery_PrincipalOT_monitor_Empleado_De: TStringField;
    SQLQuery_PrincipalOT_monitor_FAX: TStringField;
    SQLQuery_PrincipalOT_monitor_Movil: TStringField;
    SQLQuery_PrincipalOT_monitor_NIF: TStringField;
    SQLQuery_PrincipalOT_monitor_NIF_caducidad: TDateTimeField;
    SQLQuery_PrincipalOT_monitor_nombre: TStringField;
    SQLQuery_PrincipalOT_monitor_pais_descripcion: TStringField;
    SQLQuery_PrincipalOT_monitor_poblacion_descripcion: TStringField;
    SQLQuery_PrincipalOT_monitor_provincia_descripcion: TStringField;
    SQLQuery_PrincipalOT_monitor_Seguridad_Social: TStringField;
    SQLQuery_PrincipalOT_monitor_Tfno_Fijo_1: TStringField;
    SQLQuery_PrincipalOT_monitor_Tfno_Fijo_2: TStringField;
    SQLQuery_PrincipalOT_periodo_clientes_fin_servicio: TDateTimeField;
    SQLQuery_PrincipalOT_periodo_clientes_recogida_inicio: TDateTimeField;
    SQLQuery_PrincipalOT_periodo_desde_fecha: TDateTimeField;
    SQLQuery_PrincipalOT_periodo_hasta_fecha: TDateTimeField;
    SQLQuery_PrincipalOT_periodo_inicio_en_cocheras_SN: TStringField;
    SQLQuery_PrincipalOT_periodo_inicio_servicio_anticipacion: TDateTimeField;
    SQLQuery_PrincipalOT_series_servicios_descripcion: TStringField;
    SQLQuery_PrincipalOT_series_servicios_subcuenta_ventas: TStringField;
    SQLQuery_PrincipalOT_servicios_tipos_descripcion: TStringField;
    SQLQuery_PrincipalOT_vehiculos_tipos_descripcion: TStringField;
    SQLQuery_Principalplazas: TStringField;
    SQLQuery_Principalpvp: TBCDField;
    SQLQuery_Principalsabado_SN: TStringField;
    SQLQuery_Principalsubcuenta_ventas: TStringField;
    SQLQuery_Principalviernes_SN: TStringField;
    SQLQuery_Temporadas: TSQLQuery;
    SQLQuery_Impuestosid1: TLargeintField;
    SQLQuery_TemporadasChange_Id_User: TLargeintField;
    SQLQuery_TemporadasChange_WHEN: TDateTimeField;
    SQLQuery_Temporadasclientes_fin_servicio: TDateTimeField;
    SQLQuery_Temporadasclientes_recogida_inicio: TDateTimeField;
    SQLQuery_TemporadasDel_Id_User: TLargeintField;
    SQLQuery_TemporadasDel_WHEN: TDateTimeField;
    SQLQuery_TemporadasDel_WHY: TStringField;
    SQLQuery_Temporadasdesde_fecha: TDateTimeField;
    SQLQuery_Temporadashasta_fecha: TDateTimeField;
    SQLQuery_Temporadasid_servicios_regulares: TLargeintField;
    SQLQuery_Temporadasinicio_en_cocheras_SN: TStringField;
    SQLQuery_Temporadasinicio_servicio_anticipacion: TDateTimeField;
    SQLQuery_TemporadasInsert_Id_User: TLargeintField;
    SQLQuery_TemporadasInsert_WHEN: TDateTimeField;
    SQLTransaction_Temporadas: TSQLTransaction;
    TabSheet1: TTabSheet;
    TabSheet_Contabilidad: TTabSheet;
    TabSheet_conductores_instrucciones: TTabSheet;
    TabSheet_facturacion_instrucciones: TTabSheet;
    TabSheet_Itinerario: TTabSheet;
    TabSheet_Libro_Ruta: TTabSheet;
    TabSheet_liquidaciones_instrucciones: TTabSheet;
    TabSheet_Monitor: TTabSheet;
    TabSheet_montaje_instrucciones: TTabSheet;
    TabSheet_Montaje_Observaciones: TTabSheet;
    TabSheet_observaciones_generales: TTabSheet;
    TabSheet_Temporadas: TTabSheet;
    TabSheet_vehiculo_instrucciones: TTabSheet;
    Viernes: TDBCheckBox;

    procedure BitBtn_Ver_Situacion_Registro_TemporadasClick(Sender: TObject);
    procedure BitBtn_Elegir_EmpresaClick(Sender: TObject);
    procedure BitBtn_Elegir_Servicio_SerieClick(Sender: TObject);
    procedure BitBtn_Elegir_TipoServicioClick(Sender: TObject);
    procedure Boton_Elegir_AcompananteClick(Sender: TObject);
    procedure DBGrid_TemporadasDblClick(Sender: TObject);
    procedure DBGrid_TemporadasDrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid_TemporadasKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBNavigator_TemporadasBeforeAction(Sender: TObject; Button: TDBNavButtonType);
    procedure Edit_Acompanante_CodigoPostalClick(Sender: TObject);
    procedure Edit_Acompanante_Empleado_deClick(Sender: TObject);
    procedure Edit_Acompanante_NIFClick(Sender: TObject);
    procedure Edit_Acompanante_PaisClick(Sender: TObject);
    procedure Edit_Acompanante_PoblacionClick(Sender: TObject);
    procedure Edit_Acompanante_ProvinciaClick(Sender: TObject);
    procedure Edit_Acompanante_SeguridadSocialClick(Sender: TObject);
    procedure BitBtn_filtro_TipoVehiculoClick(Sender: TObject);
    procedure Edit_Acompanante_DireccionClick(Sender: TObject);
    procedure Edit_Acompanante_eMailClick(Sender: TObject);
    procedure Edit_Acompanante_FAXClick(Sender: TObject);
    procedure Edit_Acompanante_MovilClick(Sender: TObject);
    procedure Edit_Acompanante_NombreClick(Sender: TObject);
    procedure Edit_Acompanante_Telefono_2Click(Sender: TObject);
    procedure Edit_Descripcion_EmpresaClick(Sender: TObject);
    procedure Edit_serie_codigoClick(Sender: TObject);
    procedure Edit_Descripcion_TipoServicioClick(Sender: TObject);
    procedure Edit_NIF_ContratanteClick(Sender: TObject);
    procedure Edit_Descripcion_ContratanteClick(Sender: TObject);
    procedure Edit_filtro_descripcion_TipoVehiculoClick(Sender: TObject);
    procedure Edit_Acompanante_Telefono_1Click(Sender: TObject);
    procedure BitBtn_Elegir_ClienteClick(Sender: TObject);
    procedure Edit_Descripcion_ClienteClick(Sender: TObject);
    procedure BitBtn_Elegir_Tipo_VehiculoClick(Sender: TObject);
    procedure Edit_Descripcion_Tipo_VehiculoClick(Sender: TObject);
    procedure BitBtn_duplicarClick(Sender: TObject);
    procedure BitBtn_filtro_clienteClick(Sender: TObject);
    procedure BitBtn_filtro_empresaClick(Sender: TObject);
    procedure Edit_filtro_descripcion_clienteClick(Sender: TObject);
    procedure Edit_filtro_descripcion_empresaClick(Sender: TObject);
    procedure Bitbtn_Borrar_Fecha_Recogida_MonitorClick(Sender: TObject);
    procedure SQLQuery_TemporadasAfterPost(DataSet: TDataSet);
    procedure SQLQuery_TemporadasBeforeEdit(DataSet: TDataSet);
    procedure SQLQuery_TemporadasBeforePost(DataSet: TDataSet);

    procedure que_Hacer_para_un_Insert; override;
    procedure Dibujar_Grid_Principal( p_Sender: TObject; const p_Rect: TRect; p_DataCol: Integer; p_Column: TColumn; p_State: TGridDrawState ); override;
    procedure falta_algo_por_completar_II(p_msg : TStrings); override;
    procedure Borrar_Registro; override;
    procedure Cerramos_Tablas_Ligadas; override;
    procedure Abrir_Conexiones_con_BD_II; override;
    procedure Cambiar_WindowState; override;
    function  SeCambioAlgoEnRgtro : Boolean; override;
    procedure para_Empezar_GroupBox_Registro; override;
    procedure Presentar_Datos; override;
    procedure Presentar_Datos_GroupBox_Registro; override;
    procedure Refrescar_Registros; override;
    procedure Refrescar_Registros_TablasLigadas; override;
    procedure Crear_tipos_orden_TablasLigadas; override;
    procedure Crear_tipos_orden_Principal; override;
    procedure Rellenar_Filtros_Impresion(var p_Ordenado_por : String); override;
    procedure Cambiar_Titulo_Form; override;
    procedure Cambiar_Nombre_Tabla_Principal; override;
    procedure Filtrar_tablas_ligadas_II( var p_Lineas_Filtro : TStrings; var p_Lineas_OrderBy : TStrings ); override;
    function  Antes_de_hacer_Post_tabla_Principal : Boolean; override;
    procedure Tabla_Principal_que_Filtrar( var p_Registro_CRUD : TRegistro_CRUD; var p_ctdad_Rgtros : Integer; var p_a_Filtrar : TStrings ); override;

  private
    { private declarations }
    private_Order_By_temporadas : array of TOrder_By;

    function  Se_duplico_SN(p_id : String) : Boolean;
    procedure Borramos_Cliente_Contratante;
    procedure Borrar_Acompanante;
    procedure Rellenar_Datos_Monitor_Elegido(param_id : String);
    function  Filtrar_Temporadas( p_ver_bajas : ShortInt; p_Cambiamos_Filtro : Boolean; p_Lineas_Filtro, p_Lineas_OrderBy : TStrings ) : ShortInt;
    procedure Refrescar_Registros_Temporadas;
    procedure Borrar_Registro_Temporadas;
    procedure Insertar_Registro_Temporadas;
    procedure Editar_Registro_Temporadas;
    function  Existe_Temporada_Ya( p_id, p_id_servicios_regulares, p_desde_fecha, p_hasta_fecha : String ) : Trecord_Existe;

  public
    { public declarations }

  end;

var
  form_servicios_regulares_000: Tform_servicios_regulares_000;

implementation

{$R *.lfm}

uses menu, servicios_regulares_001;

procedure Tform_servicios_regulares_000.BitBtn_filtro_clienteClick(Sender: TObject);
var v_registro : TRecord_Rgtro_Comun;
begin
  v_registro := UTI_Abrir_Form( true, false, '', 50 );
  if v_registro.id_1 <> '' then
  begin
    Edit_filtro_id_clientes.Text         := Trim(v_registro.id_1);
    Edit_filtro_descripcion_cliente.Text := v_registro.descripcion_1;
  end;
end;

procedure Tform_servicios_regulares_000.BitBtn_filtro_empresaClick(Sender: TObject);
var v_Registro : TRecord_Rgtro_Comun;
begin
  v_Registro := UTI_Abrir_Form( true, false, '', 250 );
  if v_Registro.id_1 <> '' then
  begin
    Edit_filtro_id_empresas.Text         := Trim(v_Registro.id_1);
    Edit_filtro_descripcion_empresa.Text := v_Registro.descripcion_1;
  end;
end;

procedure Tform_servicios_regulares_000.Edit_filtro_descripcion_clienteClick(Sender: TObject);
begin
  Edit_filtro_id_clientes.Text         := '';
  Edit_filtro_descripcion_cliente.Text := '';
end;

procedure Tform_servicios_regulares_000.Edit_filtro_descripcion_empresaClick(Sender: TObject);
begin
  Edit_filtro_id_empresas.Text         := '';
  Edit_filtro_descripcion_empresa.Text := '';
end;

procedure Tform_servicios_regulares_000.Tabla_Principal_que_Filtrar( var p_Registro_CRUD : TRegistro_CRUD;
                                                                     var p_ctdad_Rgtros  : Integer;
                                                                     var p_a_Filtrar     : TStrings );
var v_desde_fecha : String;
    v_hasta_fecha : String;
begin
  // *********************************************************************************************** //
  // ** Ahora buscaremos por todavia activo al ... pero sólo si no está Null                      ** //
  // *********************************************************************************************** //
  // ** Se lo pasamos a la function _CRUD para que lo filtre como un RIGHT JOIN                   ** //
  // *********************************************************************************************** //
  v_desde_fecha := '';
  v_hasta_fecha := '';

  if not DateTimePicker_activo_todavia_al.DateIsNull then
  begin
    v_desde_fecha := UTI_GEN_Format_Fecha_Hora(DateTimePicker_activo_todavia_al.Date, false) +
                     ' 00:00:00';
    v_hasta_fecha := UTI_GEN_Format_Fecha_Hora(DateTimePicker_activo_todavia_al.Date, false) +
                     ' 23:59:59';
  end;

  p_Registro_CRUD := UTI_DATOS_TABLA_servicios_regulares_CRUD( SQLQuery_Principal,
                                                               v_desde_fecha,
                                                               v_hasta_fecha );

  p_ctdad_Rgtros  := -1;

  // *********************************************************************************************** //
  // ** AHORA PONDREMOS EL RESTO DE LOS FILTROS QUE NO SON GENERALES                              ** //
  // *********************************************************************************************** //
  // ** Filtraremos por la descripción                                                            ** //
  // *********************************************************************************************** //
  if Trim(Edit_descripcion.Text) <> '' then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'sr.descripcion LIKE ' +
                              UTI_GEN_Comillas('%' + Trim(Edit_descripcion.Text) + '%') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por la id del cliente                                                    ** //
  // *********************************************************************************************** //
  if Trim(Edit_filtro_id_clientes.Text) <> '' then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'sr.id_clientes = ' + Trim(Edit_filtro_id_clientes.Text) );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por la empresa                                                           ** //
  // *********************************************************************************************** //
  if Trim(Edit_filtro_id_empresas.Text) <> '' then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'sr.id_empresas = ' + Trim(Edit_filtro_id_empresas.Text) );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = lunes                                             ** //
  // *********************************************************************************************** //
  if CheckBox_lunes.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.lunes_SN) = ' + UTI_GEN_Comillas('S') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = martes                                            ** //
  // *********************************************************************************************** //
  if CheckBox_martes.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.martes_SN) = ' + UTI_GEN_Comillas('S') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = miércoles                                         ** //
  // *********************************************************************************************** //
  if CheckBox_miercoles.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.miercoles_SN) = ' + UTI_GEN_Comillas('S') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = jueves                                            ** //
  // *********************************************************************************************** //
  if CheckBox_jueves.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.jueves_SN) = ' + UTI_GEN_Comillas('S') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = viernes                                           ** //
  // *********************************************************************************************** //
  if CheckBox_viernes.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.viernes_SN) = ' + UTI_GEN_Comillas('S') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = sábado                                            ** //
  // *********************************************************************************************** //
  if CheckBox_sabado.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.sabado_SN) = ' + UTI_GEN_Comillas('S') );
  end;

  // *********************************************************************************************** //
  // ** Ahora buscaremos por día de la semana = domingo                                           ** //
  // *********************************************************************************************** //
  if CheckBox_domingo.Checked = true then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'upper(sr.domingo_SN) = ' + UTI_GEN_Comillas('S') );
  end;

end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_DireccionClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_eMailClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_FAXClick(Sender: TObject);
begin
  Borrar_Acompanante
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_MovilClick(Sender: TObject);
begin
  Borrar_Acompanante
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_NombreClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_Telefono_2Click(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Descripcion_EmpresaClick(
  Sender: TObject);
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS la EMPRESA?');

  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_empresas').Clear;
    Edit_Descripcion_Empresa.Text := '';
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Edit_serie_codigoClick(Sender: TObject);
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS la SERIE DEL SERVICIO?');

  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_series_servicios').Clear;
    Edit_serie_codigo.Text            := '';
    Edit_Subcuenta_Ventas_de_la_Serie_Servicio.Text := '';
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Edit_Descripcion_TipoServicioClick(
  Sender: TObject);
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS el TIPO DE SERVICIO?');

  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_servicios_tipos').Clear;
    Edit_Descripcion_TipoServicio.Text := '';
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Edit_NIF_ContratanteClick(
  Sender: TObject);
begin
  Borramos_Cliente_Contratante;
end;

procedure Tform_servicios_regulares_000.Edit_Descripcion_ContratanteClick(Sender: TObject);
begin
  Borramos_Cliente_Contratante;
end;

procedure Tform_servicios_regulares_000.Borramos_Cliente_Contratante;
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS el CONTRATANTE/CLIENTE?');
  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_clientes_contratante').Clear;
    Edit_Descripcion_Contratante.Text := '';
    Edit_NIF_Contratante.Text         := '';
  end;
  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_Telefono_1Click(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Descripcion_ClienteClick(Sender: TObject);
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS el CLIENTE?');
  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_clientes').Clear;
    Edit_Descripcion_Cliente.Text := '';
    Edit_Subcuenta_Cliente.Text   := '';
  end;
  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.BitBtn_Elegir_ClienteClick(Sender: TObject);
var var_Registro : TRecord_Rgtro_Comun;
begin
  with SQLQuery_Principal do
  begin
      var_Registro := UTI_Abrir_Form( true, false, '', 50 );
      if var_Registro.id_1 <> '' then
      begin
           FieldByName('id_clientes').AsString := Trim(var_Registro.id_1);
           Edit_Descripcion_Cliente.Text       := var_Registro.descripcion_1;
           Edit_Subcuenta_Cliente.Text         := var_Registro.descripcion_3;
      end;
  end;
end;

procedure Tform_servicios_regulares_000.BitBtn_Elegir_Tipo_VehiculoClick(Sender: TObject);
var var_Registro : TRecord_Rgtro_Comun;
begin
  with SQLQuery_Principal do
  begin
    var_Registro := UTI_Abrir_Form( true, false, '', 360 );
    if var_Registro.id_1 <> '' then
    begin
      FieldByName('id_vehiculos_tipos').AsString := Trim(var_Registro.id_1);
      Edit_Descripcion_Tipo_Vehiculo.Text        := var_Registro.descripcion_1;
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Edit_Descripcion_Tipo_VehiculoClick(Sender: TObject);
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS el TIPO DE VEHICULO?');

  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_vehiculos_tipos').Clear;
    Edit_Descripcion_Tipo_Vehiculo.Text := '';
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Borrar_Acompanante;
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS el ACOMPAÑANTE?');

  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('id_personal_acompanante').Clear;

    Edit_Acompanante_Nombre.Text          := '';
    Edit_Acompanante_NIF.Text             := '';
    Edit_Acompanante_NIF_Caducidad.Text   := '';
    Edit_Acompanante_Telefono_1.Text      := '';
    Edit_Acompanante_Telefono_2.Text      := '';
    Edit_Acompanante_FAX.Text             := '';
    Edit_Acompanante_Movil.Text           := '';
    Edit_Acompanante_Direccion.Text       := '';
    Edit_Acompanante_CodigoPostal.Text    := '';
    Edit_Acompanante_Poblacion.Text       := '';
    Edit_Acompanante_Provincia.Text       := '';
    Edit_Acompanante_Pais.Text            := '';
    Edit_Acompanante_Empleado_de.Text     := '';
    Edit_Acompanante_SeguridadSocial.Text := '';
    Edit_Acompanante_eMail.Text           := '';
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.SQLQuery_TemporadasAfterPost(DataSet: TDataSet);
begin
  UTI_RGTRO_Grabar( 'servicios_regulares_periodos', SQLTransaction_Temporadas, SQLQuery_Temporadas );
  Refrescar_Registros_Temporadas;
end;

procedure Tform_servicios_regulares_000.SQLQuery_TemporadasBeforeEdit(DataSet: TDataSet);
begin
  UTI_RGTRO_param_assign_value_Edit( SQLQuery_Temporadas );
end;

procedure Tform_servicios_regulares_000.SQLQuery_TemporadasBeforePost(DataSet: TDataSet);
begin
  UTI_RGTRO_param_assign_value( SQLQuery_Temporadas );
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_NIFClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_PaisClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_PoblacionClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_ProvinciaClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_SeguridadSocialClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_CodigoPostalClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.BitBtn_Elegir_TipoServicioClick(Sender: TObject);
var var_Registro : TRecord_Rgtro_Comun;
begin
  with SQLQuery_Principal do
  begin
    var_Registro := UTI_Abrir_Form( true, false, '', 710 );
    if var_Registro.id_1 <> '' then
    begin
      FieldByName('id_servicios_tipos').AsString := Trim(var_Registro.id_1);
      Edit_Descripcion_TipoServicio.Text         := var_Registro.descripcion_1;
    end;
  end;
end;

procedure Tform_servicios_regulares_000.BitBtn_Elegir_Servicio_SerieClick(Sender: TObject);
var var_Registro : TRecord_Rgtro_Comun;
begin
  with SQLQuery_Principal do
  begin
    var_Registro := UTI_Abrir_Form( true, false, '', 730 );
    if var_Registro.id_1 <> '' then
    begin
      FieldByName('id_series_servicios').AsString             := Trim(var_Registro.id_1);
      FieldByName('OT_id_empresas_series_servicios').AsString := Trim(var_Registro.id_2);
      Edit_serie_codigo.Text                                  := var_Registro.descripcion_2;
      Edit_Subcuenta_Ventas_de_la_Serie_Servicio.Text         := Trim(var_Registro.id_3);
    end;
  end;

end;

procedure Tform_servicios_regulares_000.BitBtn_Elegir_EmpresaClick(Sender: TObject);
var var_Registro : TRecord_Rgtro_Comun;
begin
  with SQLQuery_Principal do
  begin
    var_Registro := UTI_Abrir_Form( true, false, '', 250 );
    if var_Registro.id_1 <> '' then
    begin
      FieldByName('id_empresas').AsString := Trim(var_Registro.id_1);
      Edit_Descripcion_Empresa.Text       := var_Registro.descripcion_1;
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Boton_Elegir_AcompananteClick(Sender: TObject);
var var_Registro : TRecord_Rgtro_Comun;
begin
  with SQLQuery_Principal do
  begin
    var_Registro := UTI_Abrir_Form( true, false, '', 50 );
    if var_Registro.id_1 <> '' then
    begin
      FieldByName('id_personal_acompanante').AsString := Trim(var_Registro.id_1);
      Rellenar_Datos_Monitor_Elegido(FieldByName('id_personal_acompanante').AsString);
    end;
  end;
end;

procedure Tform_servicios_regulares_000.DBGrid_TemporadasDblClick(Sender: TObject);
begin
  Editar_Registro_Temporadas;
end;

procedure Tform_servicios_regulares_000.DBGrid_TemporadasDrawColumnCell( Sender: TObject;
                                                                         const Rect: TRect;
                                                                         DataCol: Integer;
                                                                         Column: TColumn;
                                                                         State: TGridDrawState );
begin
  UTI_GEN_Dibujar_Grid( Sender, SQLQuery_Temporadas, Rect, DataCol, Column, State );
end;

procedure Tform_servicios_regulares_000.DBGrid_TemporadasKeyDown( Sender: TObject;
                                                                  var Key: Word;
                                                                  Shift: TShiftState );
begin
  if Key = 13 then
  begin
    Editar_Registro_Temporadas;
  end;
end;

procedure Tform_servicios_regulares_000.DBNavigator_TemporadasBeforeAction( Sender: TObject;
                                                                            Button: TDBNavButtonType );
begin
  case Button of
    nbInsert : begin
      Insertar_Registro_Temporadas;
      Abort;
    end;

    nbEdit : begin
      Editar_Registro_Temporadas;
      Abort;
    end;

    nbDelete : begin
      Borrar_Registro_Temporadas;
      Abort;
    end;

    nbRefresh : begin
      Refrescar_Registros_Temporadas;
      Abort;
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Bitbtn_Borrar_Fecha_Recogida_MonitorClick(Sender: TObject);
var var_msg : TStrings;
begin
  var_msg := TStringList.Create;
  var_msg.Add('¿QUITAMOS la HORA de RECOGIDA del ACOMPAÑANTE?');
  if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = true then
  begin
    SQLQuery_Principal.FieldByName('acompanante_recogida_hora').Clear;
  end;
  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Edit_Acompanante_Empleado_deClick(Sender: TObject);
begin
  Borrar_Acompanante;
end;

procedure Tform_servicios_regulares_000.Filtrar_tablas_ligadas_II( var p_Lineas_Filtro : TStrings;
                                                                   var p_Lineas_OrderBy : TStrings );
begin
  // *********************************************************************************************** //
  // ** TEMPORADAS                                                                                ** //
  // *********************************************************************************************** //
  UTI_RGTRO_Add_to_Where( true,
                          p_Lineas_Filtro,
                          'srp.id_servicios_regulares = ' + SQLQuery_Principal.FieldByName('id').AsString );

  p_Lineas_OrderBy.Clear;
  Filtrar_Temporadas( RadioGroup_Bajas.ItemIndex,
                      false,
                      p_Lineas_Filtro,
                      p_Lineas_OrderBy );
end;

function Tform_servicios_regulares_000.Filtrar_Temporadas( p_ver_bajas : ShortInt;
                                                           p_Cambiamos_Filtro : Boolean;
                                                           p_Lineas_Filtro,
                                                           p_Lineas_OrderBy : TStrings ) : ShortInt;
var var_Registro_CRUD : TRegistro_CRUD;
    var_ctdad_Rgtros  : Integer;
begin
  var_Registro_CRUD := UTI_DATOS_TABLA_servicios_regulares_periodos_CRUD(SQLQuery_Temporadas);
  var_ctdad_Rgtros  := -1;

  if Trim(p_Lineas_OrderBy.Text) = '' then
  begin
    p_Lineas_OrderBy.Text := private_Order_By_temporadas[0].Memo_OrderBy;
  end;

  Result := UTI_TB_Filtrar( private_Order_By_temporadas,

                            var_Registro_CRUD.Delete_SQL,
                            var_Registro_CRUD.Update_SQL,
                            var_Registro_CRUD.Insert_SQL,

                            var_ctdad_Rgtros,
                            SQLTransaction_Temporadas,
                            SQLConnector_Temporadas,
                            SQLQuery_Temporadas,

                            var_Registro_CRUD.name_tabla,
                            p_ver_bajas,

                            var_Registro_CRUD.SELECT_SQL,

                            p_Lineas_Filtro,
                            p_Lineas_OrderBy,
                            '',

                            p_Cambiamos_Filtro );
end;

procedure Tform_servicios_regulares_000.BitBtn_Ver_Situacion_Registro_TemporadasClick(Sender: TObject);
begin
  if UTI_USR_Permiso_SN(public_Menu_Worked, '', True) = True then
  begin
    if SQLQuery_Temporadas.RecordCount > 0 then
    begin
      UTI_RGTRO_Ver_Estado_Registro( 'servicios_regulares_periodos',
                                     SQLQuery_Temporadas,
                                     DataSource_Temporadas,
                                     DBGrid_Temporadas );
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Borrar_Registro_Temporadas;
begin
  if public_Solo_Ver = true then
  begin
    Exit;
  end;

  if UTI_USR_Permiso_SN(public_Menu_Worked, 'B', True) = True then
  begin
    UTI_RGTRO_Borrar( 'servicios_regulares_periodos',
                      SQLQuery_Temporadas,
                      public_Solo_Ver,
                      public_Menu_Worked );
  end;
end;

function Tform_servicios_regulares_000.Existe_Temporada_Ya( p_id,
                                                            p_id_servicios_regulares,
                                                            p_desde_fecha,
                                                            p_hasta_fecha : String ) : Trecord_Existe;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
  try
    // ********************************************************************************************* //
    // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                      ** //
    // ********************************************************************************************* //
    var_SQLTransaction := TSQLTransaction.Create(nil);
    var_SQLConnector   := TSQLConnector.Create(nil);

    if UTI_CN_Abrir( var_SQLTransaction,
                     var_SQLConnector ) = False then UTI_GEN_Salir;

    // ********************************************************************************************* //
    // ** Creamos la SQL Según el motor de BD                                                     ** //
    // ********************************************************************************************* //
    var_SQL := TStringList.Create;

    var_SQL.Add('SELECT srt.*' );
    var_SQL.Add(  'FROM servicios_regulares_periodos AS srt' );

    var_SQL.Add(' WHERE srt.id_servicios_regulares = ' +  Trim(p_id_servicios_regulares) );
    var_SQL.Add(  ' AND DATE(srt.desde_fecha) = ' +
                  UTI_GEN_Comillas(UTI_GEN_Format_Fecha_Hora(StrToDate(p_desde_fecha), false)) );

    var_SQL.Add(  ' AND DATE(srt.hasta_fecha) = ' +
                  UTI_GEN_Comillas(UTI_GEN_Format_Fecha_Hora(StrToDate(p_hasta_fecha), false)) );

    if Trim(p_id) <> '' then
    begin
      var_SQL.Add(  ' AND NOT srt.id = ' + Trim(p_id) );
    end;

    var_SQL.Add(' ORDER BY srt.id_servicios_regulares ASC, srt.desde_fecha ASC, srt.hasta_fecha ASC' );

    // ********************************************************************************************* //
    // ** Abrimos la tabla                                                                        ** //
    // ********************************************************************************************* //
    var_SQLQuery      := TSQLQuery.Create(nil);
    var_SQLQuery.Name := 'SQLQuery_Existe_Temporada_Ya';

    if UTI_TB_Abrir( '', '', '',
                     var_SQLConnector,
                     var_SQLTransaction,
                     var_SQLQuery,
                     -1, // asi me trae todos los registros de golpe
                     var_SQL.Text ) = False then UTI_GEN_Salir;

    // ********************************************************************************************* //
    // ** TRABAJAMOS CON LOS REGISTROS DEVUELTOS                                                  ** //
    // ********************************************************************************************* //
    // ** Si el módulo no se creó, no se permite entrar en él ... Result := False                 ** //
    // ********************************************************************************************* //
    Result.Fallo_en_Conexion_BD := false;
    Result.Existe               := false;
    Result.deBaja               := 'N';

    if var_SQLQuery.RecordCount > 0 then
    begin
      Result.Existe := true;
      if not var_SQLQuery.FieldByName('Del_WHEN').IsNull then Result.deBaja := 'S';
    end;

    // ********************************************************************************************* //
    // ** Cerramos la tabla                                                                       ** //
    // ********************************************************************************************* //
    if UTI_TB_Cerrar( var_SQLConnector,
                      var_SQLTransaction,
                      var_SQLQuery ) = false then UTI_GEN_Salir;

    var_SQLQuery.Free;

    var_SQL.Free;

    var_SQLTransaction.Free;
    var_SQLConnector.Free;
  except
    on error : Exception do
    begin
      UTI_GEN_Error_Log( rs_serv_regulares_015 + var_SQLQuery.Name +
                         rs_serv_regulares_016 + Screen.ActiveForm.Name,
                         error );
      try
        var_SQL.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
        var_SQLQuery.Free;
      except
      end;

      Result.Fallo_en_Conexion_BD := true;
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Cambiar_Nombre_Tabla_Principal;
begin
  pubic_nombre_tabla_Principal := 'servicios_regulares_periodos';
end;

procedure Tform_servicios_regulares_000.Cambiar_Titulo_Form;
begin
  Self.Caption := 'Mantenimiento de servicios regulares';
end;

procedure Tform_servicios_regulares_000.Rellenar_Filtros_Impresion(var p_Ordenado_por : String);
begin
  // ********************************************************************************************* //
  // ** Configuramos el título del listado                                                      ** //
  // ********************************************************************************************* //
  p_Ordenado_por := rs_Filtros_Otros_1 +
                    Trim(ComboBox_Filtros.Text);

  if Trim(Memo_Filtros.Lines.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_Filtros_Otros_2 +
                      Trim(Memo_Filtros.Lines.Text);
  end;

  if Trim(Edit_descripcion.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_serv_regulares_001 +
                      Trim(Edit_descripcion.Text);
  end;

  if Trim(Edit_filtro_descripcion_cliente.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_serv_regulares_002 +
                      Trim(Edit_filtro_descripcion_cliente.Text);
  end;

  if Trim(Edit_filtro_descripcion_empresa.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_serv_regulares_003 +
                      Trim(Edit_filtro_descripcion_empresa.Text);
  end;

  if (CheckBox_lunes.Checked = true)     or
     (CheckBox_martes.Checked = true)    or
     (CheckBox_miercoles.Checked = true) or
     (CheckBox_jueves.Checked = true)    or
     (CheckBox_viernes.Checked = true)   or
     (CheckBox_sabado.Checked = true)    or
     (CheckBox_domingo.Checked = true)   then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_serv_regulares_004;

    if CheckBox_lunes.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_005;
    end;

    if CheckBox_martes.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_006;
    end;

    if CheckBox_miercoles.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_007;
    end;

    if CheckBox_jueves.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_008;
    end;

    if CheckBox_viernes.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_009;
    end;

    if CheckBox_sabado.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_010;
    end;

    if CheckBox_domingo.Checked = true then
    begin
      p_Ordenado_por := p_Ordenado_por +
                        rs_serv_regulares_011;
    end;

    p_Ordenado_por := p_Ordenado_por + ' )';
  end;

  if not DateTimePicker_activo_todavia_al.DateIsNull then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_serv_regulares_012 +
                      Trim(Edit_filtro_descripcion_TipoVehiculo.Text);
  end;

  if Trim(Edit_filtro_descripcion_TipoVehiculo.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_serv_regulares_013 +
                      Trim(Edit_filtro_descripcion_TipoVehiculo.Text);
  end;

end;

procedure Tform_servicios_regulares_000.Crear_tipos_orden_Principal;
begin
  SetLength(public_Order_By, 3);

  public_Order_By[0].Titulo       := 'Por cliente'; // El índice 0 siempre será por el que empezará la aplicación y los filtros
  public_Order_By[0].Memo_OrderBy := 'sr.id_clientes ASC, ' +
                                     'per.inicio_servicio_anticipacion ASC, per.clientes_recogida_inicio ASC, per.clientes_fin_servicio ASC';

  public_Order_By[1].Titulo       := 'Por descripción';
  public_Order_By[1].Memo_OrderBy := 'sr.descripcion ASC, ' +
                                     'per.inicio_servicio_anticipacion ASC, per.clientes_recogida_inicio ASC, per.clientes_fin_servicio ASC';

  public_Order_By[2].Titulo       := 'Por horario';
  public_Order_By[2].Memo_OrderBy := 'per.inicio_servicio_anticipacion ASC, per.clientes_recogida_inicio ASC, per.clientes_fin_servicio ASC';

  Memo_OrderBy.Lines.Text         := public_Order_By[0].Memo_OrderBy;

  UTI_TB_Rellenar_ComboBox_Orden( true,
                                  ComboBox_Filtros,
                                  public_Order_By,
                                  0 );
end;

procedure Tform_servicios_regulares_000.Crear_tipos_orden_TablasLigadas;
begin
  // Tabla ligada Detalle movimientos entre almacenes
  SetLength(private_Order_By_temporadas, 1);

  private_Order_By_temporadas[0].Titulo       := rs_serv_regulares_017; // El índice 0 siempre será por el que empezará la aplicación y los filtros
  private_Order_By_temporadas[0].Memo_OrderBy := 'srp.id_servicios_regulares ASC, srp.desde_fecha ASC, srp.hasta_fecha ASC, srp.inicio_servicio_anticipacion ASC, srp.clientes_recogida_inicio ASC, srp.clientes_fin_servicio ASC';
end;

procedure Tform_servicios_regulares_000.Refrescar_Registros;
var v_id_series_servicios : Largeint;
    v_id_clientes         : Largeint;
    v_descripcion         : String;

    v_Insert_WHEN         : TDateTime;
    v_Insert_Id_User      : Largeint;
begin
    // ********************************************************************************************* //
    // ** OJITO ... NO USAR CAMPOS AUTOINCREMENTABLES                                             ** //
    // ********************************************************************************************* //
    v_id_series_servicios := 0;

    with SQLQuery_Principal do
    begin
      if RecordCount > 0 then
      begin
        v_id_series_servicios := FieldByName('id_series_servicios').Value;
        v_id_clientes         := FieldByName('id_clientes').Value;
        v_descripcion         := FieldByName('descripcion').Value;

        v_Insert_WHEN         := FieldByName('Insert_WHEN').Value;
        v_Insert_Id_User      := FieldByName('Insert_Id_User').Value;
      end;
    end;

    Filtrar_Principal_Sin_Preguntar;

    if v_id_series_servicios <> 0 then
    begin
      SQLQuery_Principal.Locate( 'id_series_servicios;id_clientes;descripcion;Insert_WHEN;Insert_Id_User',
                                 VarArrayOf( [ v_id_series_servicios, v_id_clientes, v_descripcion, v_Insert_WHEN, v_Insert_Id_User ] ),
                                 [] );
    end;
end;

procedure Tform_servicios_regulares_000.Refrescar_Registros_TablasLigadas;
begin
  Refrescar_Registros_Temporadas;
end;

procedure Tform_servicios_regulares_000.Refrescar_Registros_Temporadas;
var var_Lineas_Filtro                : TStrings;
    var_Lineas_OrderBy               : TStrings;

    var_id_servicios_regulares       : Largeint;
    var_desde_fecha                  : TDateTime;
    var_hasta_fecha                  : TDateTime;
    var_inicio_en_cocheras_SN        : ShortString;
    var_inicio_servicio_anticipacion : TDateTime;
    var_clientes_recogida_inicio     : TDateTime;
    var_clientes_fin_servicio        : TDateTime;

    var_Hay_Datos                    : Boolean;
    var_ver_Bajas                    : ShortInt;
begin
    // ********************************************************************************************* //
    // ** Solo si la cabecera está en modo EDIT se abren las tablas hijas                         ** //
    // ********************************************************************************************* //
    if SQLQuery_Principal.State <> dsEdit then Exit;

    // ********************************************************************************************* //
    // ** OJITO ... NO USAR CAMPOS AUTOINCREMENTABLES                                             ** //
    // ********************************************************************************************* //
    var_Hay_Datos := false;

    if SQLQuery_Temporadas.RecordCount > 0 then
    begin
        var_Hay_Datos                    := true;

        var_id_servicios_regulares       := SQLQuery_Temporadas.FieldByName('id_servicios_regulares').Value;
        var_desde_fecha                  := SQLQuery_Temporadas.FieldByName('desde_fecha').Value;
        var_hasta_fecha                  := SQLQuery_Temporadas.FieldByName('hasta_fecha').Value;
        var_inicio_en_cocheras_SN        := SQLQuery_Temporadas.FieldByName('inicio_en_cocheras_SN').Value;
        var_inicio_servicio_anticipacion := SQLQuery_Temporadas.FieldByName('inicio_servicio_anticipacion').Value;
        var_clientes_recogida_inicio     := SQLQuery_Temporadas.FieldByName('clientes_recogida_inicio').Value;
        var_clientes_fin_servicio        := SQLQuery_Temporadas.FieldByName('clientes_fin_servicio').Value;
    end;

    var_Lineas_Filtro  := TStringList.Create;
    var_Lineas_OrderBy := TStringList.Create;

    var_Lineas_Filtro.Clear;
    var_Lineas_OrderBy.Clear;

    if Trim(SQLQuery_Principal.FieldByName('id').AsString) <> '' then
         var_Lineas_Filtro.Add('id_servicios_regulares = ' + Trim(SQLQuery_Principal.FieldByName('id').AsString))
    else var_Lineas_Filtro.Add('id_servicios_regulares = Null');

    var_ver_Bajas := RadioGroup_Bajas.ItemIndex;
    Filtrar_Temporadas( var_ver_Bajas,
                        false,
                        var_Lineas_Filtro,
                        var_Lineas_OrderBy );

    var_Lineas_Filtro.Free;
    var_Lineas_OrderBy.Free;

    if var_Hay_Datos = true then
    begin
      SQLQuery_Temporadas.Locate( 'id_servicios_regulares;desde_fecha;hasta_fecha;inicio_en_cocheras_SN;inicio_servicio_anticipacion;clientes_recogida_inicio;clientes_fin_servicio',
                                  VarArrayOf( [ var_id_servicios_regulares, var_desde_fecha, var_hasta_fecha, var_inicio_en_cocheras_SN, var_inicio_servicio_anticipacion, var_clientes_recogida_inicio, var_clientes_fin_servicio ] ),
                                  [] );
    end;
end;

procedure Tform_servicios_regulares_000.para_Empezar_GroupBox_Registro;
begin
  with SQLQuery_Principal do
  begin
    public_Record_Rgtro := UTI_Guardar_Datos_Registro( FieldByName('id').AsString,
                                                       '',
                                                       '',

                                                       FieldByName('descripcion').AsString,
                                                       '',
                                                       '' );
  end;

  Presentar_Datos_GroupBox_Registro;
end;

procedure Tform_servicios_regulares_000.Presentar_Datos;
begin
  // *********************************************************************************************** //
  // ** En el Panel_Barra_Superior                                                                ** //
  // *********************************************************************************************** //

  // *********************************************************************************************** //
  // ** En el TabSheet_Busqueda_Concreta                                                          ** //
  // *********************************************************************************************** //

  // *********************************************************************************************** //
  // ** En el GroupBox_Grid                                                                       ** //
  // *********************************************************************************************** //

  // *********************************************************************************************** //
  // ** En el GroupBox_Registro                                                                   ** //
  // *********************************************************************************************** //
  Presentar_Datos_GroupBox_Registro;
end;

procedure Tform_servicios_regulares_000.Presentar_Datos_GroupBox_Registro;
var var_ValorFecha   : Real;
    var_Valor_Minuto : Extended;
    var_Horas        : Extended;
    var_Minutos      : Extended;
begin
  PageControl_Otros_Datos.ActivePage := TabSheet_Itinerario;

  with SQLQuery_Principal do
  begin
    if RecordCount > 0 then
    begin
      Edit_Descripcion_Cliente.Text                   := FieldByName('OT_cliente_descripcion').AsString;
      Edit_Subcuenta_Cliente.Text                     := FieldByName('OT_cliente_cuenta_contable').AsString;

      Edit_Descripcion_Tipo_Vehiculo.Text             := FieldByName('OT_vehiculos_tipos_descripcion').AsString;
      SpinEdit_Ctdad_Conductores.Value                := FieldByName('conductores_cantidad').Value;

      Edit_Acompanante_Nombre.Text                    := FieldByName('OT_monitor_nombre').AsString;
      Edit_Acompanante_Telefono_1.Text                := FieldByName('OT_monitor_Tfno_Fijo_1').AsString;
      Edit_Acompanante_Telefono_2.Text                := FieldByName('OT_monitor_Tfno_Fijo_2').AsString;
      Edit_Acompanante_FAX.Text                       := FieldByName('OT_monitor_FAX').AsString;
      Edit_Acompanante_Movil.Text                     := FieldByName('OT_monitor_Movil').AsString;
      Edit_Acompanante_eMail.Text                     := FieldByName('OT_monitor_eMail').AsString;
      Edit_Acompanante_Direccion.Text                 := FieldByName('OT_monitor_direccion').AsString;
      Edit_Acompanante_CodigoPostal.Text              := FieldByName('OT_monitor_Codigo_Postal').AsString;
      Edit_Acompanante_NIF.Text                       := FieldByName('OT_monitor_NIF').AsString;
      Edit_Acompanante_NIF_Caducidad.Text             := FieldByName('OT_monitor_NIF_caducidad').AsString;
      Edit_Acompanante_Poblacion.Text                 := FieldByName('OT_monitor_poblacion_descripcion').AsString;
      Edit_Acompanante_Provincia.Text                 := FieldByName('OT_monitor_provincia_descripcion').AsString;
      Edit_Acompanante_Pais.Text                      := FieldByName('OT_monitor_pais_descripcion').AsString;
      Edit_Acompanante_Empleado_de.Text               := FieldByName('OT_monitor_Empleado_De').AsString;
      Edit_Acompanante_SeguridadSocial.Text           := FieldByName('OT_monitor_Seguridad_Social').AsString;

      Edit_Descripcion_Contratante.Text               := FieldByName('OT_contratante_descripcion').AsString;
      Edit_NIF_Contratante.Text                       := FieldByName('OT_contratante_NIF').AsString;

      Edit_Descripcion_TipoServicio.Text              := FieldByName('OT_servicios_tipos_descripcion').AsString;

      Edit_serie_codigo.Text                          := FieldByName('OT_series_servicios_descripcion').AsString;
      Edit_Subcuenta_Ventas_de_la_Serie_Servicio.Text := FieldByName('OT_series_servicios_subcuenta_ventas').AsString;

      MaskEdit_Horas_Anticipacion.Text                := '0';
      MaskEdit_Minutos_Anticipacion.Text              := '0';

      if (not FieldByName('OT_periodo_inicio_servicio_anticipacion').IsNull) and
         (not FieldByName('OT_periodo_clientes_recogida_inicio').IsNull)     then
      begin
        var_ValorFecha                     := FieldByName('clientes_recogida_inicio').Value -
                                              FieldByName('inicio_servicio_anticipacion').Value;

        var_Valor_Minuto                   := StrToTime('00:02:00') - StrToTime('00:01:00');
        var_Minutos                        := Round(var_ValorFecha / var_Valor_Minuto);
        var_Horas                          := Trunc(var_Minutos / 60);
        var_Minutos                        := var_Minutos - (var_Horas * 60);

        MaskEdit_Horas_Anticipacion.Text   := FloatToStr(Round(var_Horas));
        MaskEdit_Minutos_Anticipacion.Text := FloatToStr(var_Minutos);
      end;

    end;
  end;
end;

function Tform_servicios_regulares_000.SeCambioAlgoEnRgtro : Boolean;
begin
  Result := true;

  with SQLQuery_Principal do
  begin
    if falta_algo_por_completar = false then
    begin
      if State = dsEdit then
      begin
        Result := false;

        FieldByName('conductores_cantidad').Value := SpinEdit_Ctdad_Conductores.Value;

        if UTI_DATOS_TABLA_SeCambioAlgoEnRgtro( SQLQuery_Principal ) = true then
        begin
          Result := true;
        end;
      end;
    end
    else
    begin
      Result := false;
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Cambiar_WindowState;
begin
  Self.WindowState := wsNormal; // Puede ser wsNormal, wsFullScreen, wsMaximized o wsMinimized
end;

procedure Tform_servicios_regulares_000.Abrir_Conexiones_con_BD_II;
begin
  Abrir_Conexion_con_BD( SQLTransaction_Temporadas, SQLConnector_Temporadas);
end;

procedure Tform_servicios_regulares_000.Cerramos_Tablas_Ligadas;
begin
  Cerrar_Tabla( SQLConnector_Temporadas,
                SQLTransaction_Temporadas,
                SQLQuery_Temporadas );
end;

procedure Tform_servicios_regulares_000.Borrar_Registro;
var var_msg           : TStrings;
    var_Fue_Utilizado : ShortInt;
begin
  if UTI_USR_Permiso_SN(public_Menu_Worked, 'B', True) = True then
  begin
    with SQLQuery_Principal do
    begin
      UTI_RGTRO_Borrar( pubic_nombre_tabla_Principal,
                        SQLQuery_Principal,
                        public_Solo_Ver,
                        public_Menu_Worked );
    end;
  end;
end;

procedure Tform_servicios_regulares_000.Dibujar_Grid_Principal( p_Sender: TObject;
                                                                const p_Rect: TRect;
                                                                p_DataCol: Integer;
                                                                p_Column: TColumn;
                                                                p_State: TGridDrawState );
begin
  UTI_GEN_Dibujar_Grid( p_Sender, SQLQuery_Principal, p_Rect, p_DataCol, p_Column, p_State );
end;

procedure Tform_servicios_regulares_000.Edit_filtro_descripcion_TipoVehiculoClick(Sender: TObject);
begin
  Edit_filtro_id_vehiculos_tipos.Text       := '';
  Edit_filtro_descripcion_TipoVehiculo.Text := '';
end;

procedure Tform_servicios_regulares_000.Rellenar_Datos_Monitor_Elegido( param_id : String );
var var_Rgtro : TPersonal;
begin
  if Trim(param_id) = '' then Exit;

  var_Rgtro := UTI_DATOS_TABLA_Traer_Personal_xID( Trim(param_id) );

  if var_Rgtro.id <> '0' then
  begin
    Edit_Acompanante_Nombre.Text          := var_Rgtro.nombre;
    Edit_Acompanante_NIF.Text             := var_Rgtro.nif_cif;
    Edit_Acompanante_NIF_Caducidad.Text   := var_Rgtro.nif_cif_caducidad;
    Edit_Acompanante_Telefono_1.Text      := var_Rgtro.Tfno_Fijo_1;
    Edit_Acompanante_Telefono_2.Text      := var_Rgtro.Tfno_Fijo_2;
    Edit_Acompanante_FAX.Text             := var_Rgtro.FAX;
    Edit_Acompanante_Movil.Text           := var_Rgtro.Movil;

    Edit_Acompanante_Direccion.Text       := var_Rgtro.Direccion + ' ' +
                                             var_Rgtro.Direccion_Numero + ' ' +
                                             var_Rgtro.Direccion_Piso_Letra;

    Edit_Acompanante_CodigoPostal.Text    := var_Rgtro.Codigo_Postal;
    Edit_Acompanante_Poblacion.Text       := var_Rgtro.OT_descripcion_poblacion;
    Edit_Acompanante_Provincia.Text       := var_Rgtro.OT_descripcion_provincia;
    Edit_Acompanante_Pais.Text            := var_Rgtro.OT_descripcion_pais;
    Edit_Acompanante_Empleado_de.Text     := var_Rgtro.OT_Descripcion_Empleado_De;
    Edit_Acompanante_SeguridadSocial.Text := var_Rgtro.Seguridad_Social;
    Edit_Acompanante_eMail.Text           := var_Rgtro.eMail;
  end;
end;

procedure Tform_servicios_regulares_000.BitBtn_filtro_TipoVehiculoClick(Sender: TObject);
var v_Registro : TRecord_Rgtro_Comun;
begin
  v_Registro := UTI_Abrir_Form( true, false, '', 360 );
  if v_Registro.id_1 <> '' then
  begin
    Edit_filtro_id_vehiculos_tipos.Text       := Trim(v_Registro.id_1);
    Edit_filtro_descripcion_TipoVehiculo.Text := v_Registro.descripcion_1;
  end;
end;

function Tform_servicios_regulares_000.Se_duplico_SN(p_id : String) : Boolean;
begin
  Label_Duplicandose.Visible := true;
  Result                     := false;

  // DUPLICO CABECERA
  Label_Duplicandose.Caption := 'Duplicando cabecera del servicio';
  Application.ProcessMessages;

  if UTI_SERV_Duplicar_Serv_Regular_Cabecera( SQLQuery_Principalid.asString ) = false then
  begin
    Exit;
  end;

  // Se terminó la duñlicación
  Label_Duplicandose.Visible := false;
  Result                     := True;

  Application.ProcessMessages;
end;

procedure Tform_servicios_regulares_000.BitBtn_duplicarClick(Sender: TObject);
var var_msg               : TStrings;

    v_id_series_servicios : Largeint;
    v_id_clientes         : Largeint;
    v_descripcion         : String;

    v_Insert_WHEN         : TDateTime;
    v_Insert_Id_User      : Largeint;
begin
  if SQLQuery_Principal.RecordCount = 0 then
  begin
    var_msg := TStringList.Create;
    var_msg.Add('No hay ningún servicio para duplicar.');
    UTI_GEN_Aviso( true,
                   var_msg,
                   rs_No_Se_Puede, True, False );
    var_msg.Free;
    Exit;
  end;

  var_msg := TStringList.Create;
  var_msg.Add('¿Seguro que desea duplicar el servicio regular <<' + SQLQuery_Principaldescripcion.asString + '>> ?');
  if UTI_GEN_Aviso( true,
                    var_msg,
                    rs_OK, True, True ) = True then
  begin
    if Se_duplico_SN(SQLQuery_Principalid.asString) = false then
    begin
      var_msg.Clear;
      var_msg.Add('El servicio regular <<' + SQLQuery_Principaldescripcion.asString + '>> no se pudo duplicar ');
      UTI_GEN_Aviso( true,
                     var_msg,
                     rs_No_Se_Puede, True, False );
    end else
    begin
      Edit_descripcion.Text                := SQLQuery_Principaldescripcion.asString;
      Edit_filtro_id_clientes.Text         := SQLQuery_Principalid_clientes.asString;
      Edit_filtro_descripcion_cliente.Text := SQLQuery_PrincipalOT_cliente_descripcion.asString;
      Edit_filtro_id_empresas.Text         := SQLQuery_Principalid_empresas.asString;
      Edit_filtro_descripcion_empresa.Text := SQLQuery_PrincipalOT_empresa_descripcion.asString;

      Refrescar_registros;
    end;
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.Insertar_Registro_Temporadas;
var var_msg           : TStrings;
    var_Form          : Tform_servicios_regulares_001;
    var_record_Existe : Trecord_Existe;
begin
  if public_Solo_Ver = true then
  begin
    Exit;
  end;

  with SQLQuery_Temporadas do
  begin
    var_msg := TStringList.Create;

    if UTI_USR_Permiso_SN(public_Menu_Worked, 'A', True) = True then
    begin
      if public_Solo_Ver = True then
      begin
        var_msg.Clear;
        var_msg.Add(rs_Solo_Visualizar);
        UTI_GEN_Aviso(true, var_msg, rs_No_Se_Puede, True, False);
      end else
      begin
        Insert;

        FieldByName('id_servicios_regulares').AsString       := SQLQuery_Principal.FieldByName('id').AsString;

        FieldByName('inicio_en_cocheras_SN').AsString        := SQLQuery_Principal.FieldByName('inicio_en_cocheras_SN').AsString;
        FieldByName('inicio_servicio_anticipacion').AsString := SQLQuery_Principal.FieldByName('inicio_servicio_anticipacion').AsString;
        FieldByName('clientes_recogida_inicio').AsString     := SQLQuery_Principal.FieldByName('clientes_recogida_inicio').AsString;
        FieldByName('clientes_fin_servicio').AsString        := SQLQuery_Principal.FieldByName('clientes_fin_servicio').AsString;


        var_Form := Tform_servicios_regulares_001.Create(nil);

        var_Form.para_Empezar_GroupBox_Registro;

        var_Form.ShowModal;
        if var_Form.public_Pulso_Aceptar = true then
        begin
          var_Form.Free;
          var_record_Existe := Existe_Temporada_Ya( '', // Estoy insertando/creando y lo que tengo que comprobar es que no exista la pwd en cualquier otro usuario, por lo que el campo id_Users no lo paso
                                                    FieldByName('id_servicios_regulares').AsString,
                                                    FieldByName('desde_fecha').AsString,
                                                    FieldByName('hasta_fecha').AsString );

          if var_record_Existe.Fallo_en_Conexion_BD = true then
          begin
            // var_Form.Free;
            Cancel;
          end else
          begin
            if var_record_Existe.Existe = false then
            begin
              FieldByName('Insert_WHEN').Value    := UTI_CN_Fecha_Hora;
              FieldByName('Insert_Id_User').Value := Form_Menu.public_User;

              UTI_RGTRO_Grabar_Antes( 'servicios_regulares_periodos', SQLQuery_Temporadas );
            end else
            begin
              Cancel;
              var_msg.Clear;

              var_msg.Add(rs_serv_regulares_014);

              if UpperCase(var_record_Existe.deBaja) = 'S' then
              begin
                var_msg.Add(rs_Rgtro_Borrado);
              end;

              UTI_GEN_Aviso(true, var_msg, rs_Ya_Existe, True, False);
            end;
          end;
        end else
        begin
          var_Form.Free;
          Cancel;
        end;
      end;
    end;

    var_msg.Free;
  end;
end;

procedure Tform_servicios_regulares_000.Editar_Registro_Temporadas;
var var_msg           : TStrings;
    var_Form          : Tform_servicios_regulares_001;
    var_record_Existe : Trecord_Existe;
    var_id            : ShortString;
begin
  if public_Solo_Ver = true then
  begin
    Exit;
  end;

  with SQLQuery_Temporadas do
  begin
    var_msg := TStringList.Create;

    if RecordCount > 0 then
    begin
      var_id := FieldByName('id').AsString;

      if UTI_USR_Permiso_SN(public_Menu_Worked, 'M', True) = True then
      begin
        if UTI_RGTRO_isLock( 'servicios_regulares_periodos',
                             FieldByName('id').AsString,
                             true ) = true then
        begin
          Exit;
        end else
        begin
          if UTI_RGTRO_Lock( 'servicios_regulares_periodos',
                             FieldByName('id').AsString ) = true then
               Edit
          else Exit;
        end;

        var_Form := Tform_servicios_regulares_001.Create(nil);

        var_Form.para_Empezar_GroupBox_Registro;

        var_Form.ShowModal;
        if var_Form.public_Pulso_Aceptar = true then
        begin
          var_record_Existe := Existe_Temporada_Ya( FieldByName('id').AsString, // Estoy insertando/creando y lo que tengo que comprobar es que no exista la pwd en cualquier otro usuario, por lo que el campo id_Users no lo paso
                                                    FieldByName('id_servicios_regulares').AsString,
                                                    FieldByName('desde_fecha').AsString,
                                                    FieldByName('hasta_fecha').AsString );

          if var_record_Existe.Fallo_en_Conexion_BD = true then
          begin
            var_Form.Free;
            Cancel;
          end else
          begin
            if var_record_Existe.Existe = false then
            begin
              if UTI_DATOS_TABLA_SeCambioAlgoEnRgtro( SQLQuery_AMD ) = true then

              if ( Trim(Params.ParamByName('COPY_' + 'id_servicios_regulares').AsString)       <> Trim(FieldByName('id_servicios_regulares').AsString) )       or
                 ( Trim(Params.ParamByName('COPY_' + 'desde_fecha').AsString)                  <> Trim(FieldByName('desde_fecha').AsString) )                  or
                 ( Trim(Params.ParamByName('COPY_' + 'hasta_fecha').AsString)                  <> Trim(FieldByName('hasta_fecha').AsString) )                  or
                 ( Trim(Params.ParamByName('COPY_' + 'inicio_en_cocheras_SN').AsString)        <> Trim(FieldByName('inicio_en_cocheras_SN').AsString) )        or
                 ( Trim(Params.ParamByName('COPY_' + 'inicio_servicio_anticipacion').AsString) <> Trim(FieldByName('inicio_servicio_anticipacion').AsString) ) or
                 ( Trim(Params.ParamByName('COPY_' + 'clientes_recogida_inicio').AsString)     <> Trim(FieldByName('clientes_recogida_inicio').AsString) )     or
                 ( Trim(Params.ParamByName('COPY_' + 'clientes_fin_servicio').AsString)        <> Trim(FieldByName('clientes_fin_servicio').AsString) )        then
              begin
                FieldByName('Change_WHEN').Value               := UTI_CN_Fecha_Hora;
                FieldByName('Change_Id_User').Value            := Form_Menu.public_User;

                FieldByName('id_servicios_regulares').AsString := SQLQuery_Principal.FieldByName('id').AsString;

                UTI_RGTRO_Grabar_Antes( 'servicios_regulares_periodos', SQLQuery_Temporadas );
              end
              else
              begin
                Cancel;
              end;

              var_Form.Free;
            end else begin
              var_Form.Free;
              Cancel;
              var_msg.Clear;

              var_msg.Add(rs_serv_regulares_014);

              if UpperCase(var_record_Existe.deBaja) = 'S' then
              begin
                var_msg.Add(rs_Rgtro_Borrado);
              end;

              UTI_GEN_Aviso(true, var_msg, rs_Ya_Existe, True, False);
            end;
          end;
        end else begin
          var_Form.Free;
          Cancel;
        end;

        UTI_RGTRO_UnLock( 'servicios_regulares_periodos', var_id );
      end;
    end
    else
    begin
      var_msg.Add(rs_no_Hay_Rgtros);
      UTI_GEN_Aviso(true, var_msg, rs_No_Se_Puede, True, False);
    end;
  end;

  var_msg.Free;
end;

procedure Tform_servicios_regulares_000.falta_algo_por_completar_II(p_msg : TStrings);
begin
{ Estos serán mensajes de aviso de que no se completaron ... no obligatorios

  with SQLQuery_Principal do
  begin
    if Trim(FieldByName('id_series_servicios').AsString) = '' then
    begin
      p_msg.Add('* La SERIE para el servicio.');
    end;

    if Trim(FieldByName('descripcion').AsString) = '' then
    begin
      p_msg.Add('* La DESCRIPCIÓN.');
    end;

    if Trim(FieldByName('id_vehiculos_tipos').AsString) = '' then
    begin
      p_msg.Add('* El TIPO DE VEHICULO.');
    end;

    if Trim(FieldByName('id_empresas').AsString) = '' then
    begin
      p_msg.Add('* La EMPRESA que realizará el servicio.');
    end;

    if Trim(FieldByName('id_clientes').AsString) = '' then
    begin
      p_msg.Add('* El cliente.');
    end;
  end;
}
end;

function Tform_servicios_regulares_000.Antes_de_hacer_Post_tabla_Principal : Boolean;
var var_msg : TStrings;
begin
  Result  := true;

  var_msg := TStringList.Create;
  var_msg.Clear;

  with SQLQuery_Principal do
  begin
    // ********************************************************************************************* //
    // ** Asignamos valores si no los tenían                                                      ** //
    // ********************************************************************************************* //

    // ********************************************************************************************* //
    // ** Ahora vienen las comprobaciones de porque no grabamos                                   ** //
    // ********************************************************************************************* //
    // ** Tengo que comprobar que la empresa puesta en la lengueta de facturación es la misma que ** //
    // ** la de la serie de servicio elegida.                                                     ** //
    // ********************************************************************************************* //
    if FieldByName('OT_id_empresas_series_servicios').AsString <> FieldByName('id_empresas').AsString then
    begin
      var_msg.Add(rs_serv_regulares_018);
      Result := false;
    end;

    if Trim(FieldByName('id_series_servicios').AsString) = '' then
    begin
      var_msg.Add(rs_serv_regulares_019);
      Result := false;
    end;

    if Trim(FieldByName('descripcion').AsString) = '' then
    begin
      var_msg.Add(rs_serv_regulares_020);
      Result := false;
    end;

    if Trim(FieldByName('id_vehiculos_tipos').AsString) = '' then
    begin
      var_msg.Add(rs_serv_regulares_021);
      Result := false;
    end;

    if Trim(FieldByName('id_empresas').AsString) = '' then
    begin
      var_msg.Add(rs_serv_regulares_022);
      Result := false;
    end;

    if Trim(FieldByName('id_clientes').AsString) = '' then
    begin
      var_msg.Add(rs_serv_regulares_023);
      Result := false;
    end;

  end;

  if Trim(var_msg.Text) <> '' then
  begin
    UTI_GEN_Aviso(true, var_msg, rs_No_Se_Puede, True, False);
  end;

  var_msg.Free;

end;

procedure Tform_servicios_regulares_000.que_Hacer_para_un_Insert;
begin
  with SQLQuery_Principal do
  begin
    // ********************************************************************************************* //
    // ** Asignamos valores de iniciosi no los tenían                                             ** //
    // ********************************************************************************************* //
    FieldByName('fuera_del_municipio_SN').AsString            := 'N';
    FieldByName('Itinerarios_imprimir_en_partes_SN').AsString := 'S';
    FieldByName('conductores_cantidad').asString              := '1';

    FieldByName('lunes_SN').AsString                          := 'N';
    FieldByName('martes_SN').AsString                         := 'N';
    FieldByName('miercoles_SN').AsString                      := 'N';
    FieldByName('jueves_SN').AsString                         := 'N';
    FieldByName('viernes_SN').AsString                        := 'N';
    FieldByName('sabado_SN').AsString                         := 'N';
    FieldByName('domingo_SN').AsString                        := 'N';
  end;

end;

end.


jerofa falta la lengüeta de periodos/temporadas
FALTA DECIRLE QUE TIPO DE SERVICIO VA A SER

hay que hacer el mantenimiento de servicios tipos que la aplicación old no lo lo tenía
hay que hacer el mantenimiento de periodos

hay qye hacer el mantenimiento de series de facturas
hay que hacer el mantenimiento de series de servicios

jerofa en copias de anteriores al 11-03-2017 esta como debe de ser el diseño de la lengueta itinerarios
para servicios discrecionales ... servicios montados






Ocurrió un error de conexión con la BD. La tabla ha sido SQLQuery_Principal desde el módulo form_servicios_regulares_000

Este es el mensaje de error:

An error occured while applying the updates in a record:
  : Error executing query: You have an error in your SQL syntax; check the manual
  that corresponds to your MySQL server version for the right syntax to use near 'WHERE id = 1' at line 1
