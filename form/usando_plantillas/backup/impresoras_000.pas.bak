unit impresoras_000;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, db, FileUtil, Forms, Controls, Graphics, Dialogs, ExtCtrls, StdCtrls,
  Buttons, ComCtrls, DbCtrls, DBGrids, ButtonPanel, plantilla_000, Grids, Spin, utilidades_datos_tablas,
  types, utilidades_rgtro, utilidades_general, utilidades_bd, utilidades_forms_Filtrar, utilidades_usuarios,
  utilidades_impresoras;

resourcestring
  rs_impr_001 = 'Mantenimiento de impresoras';
  rs_impr_002 = ', con descripción %';
  rs_impr_003 = 'Por la descripción';
  rs_impr_004 = 'Por la id';
  rs_impr_005 = '* La impresora';
  rs_impr_006 = 'No se pudo comprobar si ya existe la impresora.';
  rs_impr_007 = 'Impresora repetida.';

type

  { Tf_impresoras_000 }

  Tf_impresoras_000 = class(Tform_plantilla_000)
    BitBtn_Considerar_como_cerrado: TBitBtn;
    Boton_Elegir_Impresora: TBitBtn;
    DBCheckBox1: TDBCheckBox;
    Edit_Descripcion: TEdit;
    Edit_Descripcion_Impresora: TEdit;
    Image_Predeterminada: TImage;
    Label17: TLabel;
    Label6: TLabel;
    Label_Copias: TLabel;
    Panel16: TPanel;
    SpinEdit_Copias: TSpinEdit;
    SQLQuery_PrincipalChange_Id_User: TLargeintField;
    SQLQuery_PrincipalChange_WHEN: TDateTimeField;
    SQLQuery_PrincipalCopias_a_Imprimir: TLongintField;
    SQLQuery_PrincipalDel_Id_User: TLargeintField;
    SQLQuery_PrincipalDel_WHEN: TDateTimeField;
    SQLQuery_PrincipalDel_WHY: TStringField;
    SQLQuery_Principaldescripcion: TStringField;
    SQLQuery_PrincipalInsert_Id_User: TLargeintField;
    SQLQuery_PrincipalInsert_WHEN: TDateTimeField;
    SQLQuery_Principalpredeterminada_SN: TStringField;

    procedure BitBtn_Considerar_como_cerradoClick(Sender: TObject);
    procedure Boton_Elegir_ImpresoraClick(Sender: TObject);
    procedure Edit_Descripcion_ImpresoraClick(Sender: TObject);

    procedure Campo_Foco_en_modo_Edicion_Inserccion; override;
    procedure NewRecord_Insert; override;
    procedure Antes_del_Post_Principal_Sin_Rellenar_Permitido_SI( p_msg : TStrings ); override;
    procedure Antes_del_Post_Principal_Sin_Rellenar_Permitido_NO( p_msg, p_msg_Comprobar : TStrings ); override;
    procedure Antes_del_Post_Principal_Asignar_Valores; override;
    procedure Filtrar_tablas_ligadas_II( var p_Lineas_Filtro : TStrings; var p_Lineas_OrderBy : TStrings ); override;
    procedure Cambiar_Nombre_Tabla_Principal; override;
    procedure Cambiar_Titulo_Form; override;
    procedure Rellenar_Filtros_Impresion(var p_Ordenado_por : String); override;
    procedure Crear_tipos_orden_Principal; override;
    procedure Crear_tipos_orden_TablasLigadas; override;
    procedure Refrescar_Registros; override;
    procedure Refrescar_Registros_TablasLigadas; override;
    procedure Tabla_Principal_que_Filtrar( var p_Registro_CRUD : TRegistro_CRUD; var p_ctdad_Rgtros : Integer; var p_a_Filtrar : TStrings ); override;
    procedure Presentar_Datos; override;
    procedure Presentar_Datos_GroupBox_Registro; override;
    procedure para_Empezar_GroupBox_Registro; override;
    procedure Cambiar_WindowState; override;
    procedure Abrir_Conexiones_con_BD_TablasAdicionales; override;
    procedure Cerramos_Tablas_Ligadas; override;
    procedure Borrar_Registro; override;
    procedure Dibujar_Grid_Principal( p_Sender: TObject; const p_Rect: TRect; p_DataCol: Integer; p_Column: TColumn; p_State: TGridDrawState ); override;

  private
    { private declarations }
    function Existe_la_Impresora_Ya( param_id, param_descripcion : ShortString ) : Trecord_Existe;

  public
    { public declarations }

  end;

var
  f_impresoras_000: Tf_impresoras_000;

implementation

{$R *.lfm}

uses menu;

procedure Tf_impresoras_000.Tabla_Principal_que_Filtrar( var p_Registro_CRUD : TRegistro_CRUD;
                                                            var p_ctdad_Rgtros  : Integer;
                                                            var p_a_Filtrar     : TStrings );
begin
  p_Registro_CRUD := UTI_DATOS_TABLA_impresoras_CRUD(SQLQuery_Principal);
  p_ctdad_Rgtros  := -1;

  // ********************************************************************************************* //
  // ** AHORA PONDREMOS EL RESTO DE LOS FILTROS QUE NO SON GENERALES                            ** //
  // ********************************************************************************************* //
  // ** Primero buscaremos en el nombre y apellido el texto a buscar                              ** //
  // ********************************************************************************************* //
  if Trim(Edit_Descripcion.Text) <> '' then
  begin
      UTI_RGTRO_Add_to_Where( false,
                              p_a_Filtrar,
                              'i.descripcion LIKE ' +
                              UTI_GEN_Comillas('%' + Trim(Edit_Descripcion.Text) + '%') );
  end;
end;

procedure Tf_impresoras_000.Filtrar_tablas_ligadas_II( var p_Lineas_Filtro : TStrings;
                                                          var p_Lineas_OrderBy : TStrings );
begin
  // *********************************************************************************************** //
  // ** no hay tablas ligadas                                                                     ** //
  // *********************************************************************************************** //
end;

procedure Tf_impresoras_000.Boton_Elegir_ImpresoraClick(Sender: TObject);
var var_Impresora_Predeterminada : TImpresora_Predeterminada;
    var_msg                      : TStrings;
begin
  if UTI_USR_Permiso_SN(public_Menu_Worked, '', True) = true then
  begin
    var_Impresora_Predeterminada := UTI_IMPRESORAS_Elegir_Impresora;
    if UpperCase(var_Impresora_Predeterminada.Error) = 'N' then
    begin
      with SQLQuery_Principal do
      begin
        FieldByName('descripcion').AsString       := var_Impresora_Predeterminada.Impresora_descripcion_Elegida;
        FieldByName('Copias_a_Imprimir').AsString := var_Impresora_Predeterminada.Impresora_Ctdad_Copias;
      end;

      Edit_Descripcion_Impresora.Text := var_Impresora_Predeterminada.Impresora_descripcion_Elegida;
      SpinEdit_Copias.Value           := StrToInt(var_Impresora_Predeterminada.Impresora_Ctdad_Copias);
    end else
    begin
      var_msg := TStringList.Create;
      var_msg.Clear;
      var_msg.Add('No se pudo elegir una impresora.');
      UTI_GEN_Aviso(true, var_msg, rs_Falta, True, False);
      var_msg.Free;
    end;

  end;

end;

procedure Tf_impresoras_000.Edit_Descripcion_ImpresoraClick(Sender: TObject);
var var_msg : TStrings;
begin
    var_msg := TStringList.Create;
    var_msg.Add('¿QUITAMOS la impresora');
    if UTI_GEN_Aviso(true, var_msg, rs_OK, True, True) = True then
    begin
         SQLQuery_Principal.FieldByName('descripcion').Clear;
         Edit_Descripcion_Impresora.Text := '';
    end;
    var_msg.Free;
end;

procedure Tf_impresoras_000.Cambiar_Nombre_Tabla_Principal;
begin
  pubic_nombre_tabla_Principal := 'impresoras';
end;

procedure Tf_impresoras_000.Cambiar_Titulo_Form;
begin
  Self.Caption := rs_impr_001;
end;

procedure Tf_impresoras_000.Rellenar_Filtros_Impresion(var p_Ordenado_por : String);
begin
  // ********************************************************************************************* //
  // ** Configuramos el título del listado                                                      ** //
  // ********************************************************************************************* //
  p_Ordenado_por := rs_Filtros_Otros_1 +
                    Trim(ComboBox_Filtros.Text);

  if Trim(Memo_Filtros.Lines.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_Filtros_Otros_2 +
                      Trim(Memo_Filtros.Lines.Text);
  end;

  if Trim(Edit_Descripcion.Text) <> '' then
  begin
    p_Ordenado_por := p_Ordenado_por +
                      rs_impr_002 +
                      Trim(Edit_Descripcion.Text) + '%';
  end;
end;

procedure Tf_impresoras_000.Crear_tipos_orden_Principal;
begin
  SetLength(public_Order_By, 2);

  public_Order_By[0].Titulo       := rs_impr_003; // El índice 0 siempre será por el que empezará la aplicación y los filtros
  public_Order_By[0].Memo_OrderBy := 'i.descripcion ASC';

  public_Order_By[1].Titulo       := rs_impr_004;
  public_Order_By[1].Memo_OrderBy := 'i.id ASC';

  Memo_OrderBy.Lines.Text          := public_Order_By[0].Memo_OrderBy;

  UTI_TB_Rellenar_ComboBox_Orden( true,
                                  ComboBox_Filtros,
                                  public_Order_By,
                                  0 );
end;

procedure Tf_impresoras_000.Crear_tipos_orden_TablasLigadas;
begin
  { Hacer algo parecido a lo de abajo pero en plan hereditario con su inherited y todo

  // Tabla ligada 001
  SetLength(private_Order_By_TablaLigada001, 1);

  private_Order_By_TablaLigada001[0].Titulo       := 'Por la id del impuesto'; // El índice 0 siempre será por el que empezará la aplicación y los filtros
  private_Order_By_TablaLigada001[0].Memo_OrderBy := 'ic.id_impuestos_al_que_pertenece ASC, ic.id_impuestos ASC';

  // Tabla ligada 002
  SetLength(private_Order_By_TablaLigada002, 1);

  private_Order_By_TablaLigada002[0].Titulo       := 'Por la id del impuesto'; // El índice 0 siempre será por el que empezará la aplicación y los filtros
  private_Order_By_TablaLigada002[0].Memo_OrderBy := 'ic.id_impuestos_al_que_pertenece ASC, ic.id_impuestos ASC';
  }
end;

procedure Tf_impresoras_000.Refrescar_Registros;
var var_descripcion : String;
begin
    // ********************************************************************************************* //
    // ** OJITO ... NO USAR CAMPOS AUTOINCREMENTABLES                                             ** //
    // ********************************************************************************************* //
    var_descripcion := '';

    if SQLQuery_Principal.RecordCount > 0 then
    begin
        var_descripcion := SQLQuery_Principal.FieldByName('descripcion').Value;
    end;

    Filtrar_Principal_Sin_Preguntar;

    if Trim(var_descripcion) <> '' then
    begin
      SQLQuery_Principal.Locate('descripcion', var_descripcion, []);
    end;
end;

procedure Tf_impresoras_000.Refrescar_Registros_TablasLigadas;
begin
  { Hacer algo parecido a lo de abajo pero en plan hereditario con su inherited y todo

  Refrescar_Tabla_001;
  Refrescar_Tabla_002;
  Refrescar_Tabla_003;
  }
end;

procedure Tf_impresoras_000.Presentar_Datos;
begin
  // *********************************************************************************************** //
  // ** En el Panel_Barra_Superior                                                                ** //
  // *********************************************************************************************** //

  // *********************************************************************************************** //
  // ** En el TabSheet_Busqueda_Concreta                                                          ** //
  // *********************************************************************************************** //

  // *********************************************************************************************** //
  // ** En el GroupBox_Grid                                                                       ** //
  // *********************************************************************************************** //

  // *********************************************************************************************** //
  // ** En el GroupBox_Registro                                                                   ** //
  // *********************************************************************************************** //
  Presentar_Datos_GroupBox_Registro;
end;

procedure Tf_impresoras_000.Presentar_Datos_GroupBox_Registro;
begin
  with SQLQuery_Principal do
  begin
    if RecordCount > 0 then
    begin
      Edit_Descripcion_Impresora.Text := FieldByName('descripcion').AsString;

      if Trim(FieldByName('Copias_a_Imprimir').AsString) <> '' then
      begin
        SpinEdit_Copias.Value := FieldByName('Copias_a_Imprimir').Value;
      end;
    end;
  end;
end;

procedure Tf_impresoras_000.para_Empezar_GroupBox_Registro;
begin
  with SQLQuery_Principal do
  begin
    public_Record_Rgtro := UTI_Guardar_Datos_Registro( FieldByName('id').AsString,
                                                       '',
                                                       '',

                                                       FieldByName('descripcion').AsString,
                                                       '',
                                                       '' );
  end;

  Presentar_Datos_GroupBox_Registro;
end;

procedure Tf_impresoras_000.Cambiar_WindowState;
begin
  Self.WindowState := wsNormal; // Puede ser wsNormal, wsFullScreen, wsMaximized o wsMinimized
end;

procedure Tf_impresoras_000.Abrir_Conexiones_con_BD_TablasAdicionales;
begin
  { Hacer algo parecido a lo de abajo pero en plan hereditario con su inherited y todo

  Abrir_Conexion_con_BD( SQLTransaction_TablaHija001, SQLConnector_TablaHija001);
  Abrir_Conexion_con_BD( SQLTransaction_TablaHija002, SQLConnector_TablaHija002);
  }
end;

procedure Tf_impresoras_000.Cerramos_Tablas_Ligadas;
begin
  { Hacer algo parecido a lo de abajo pero en plan hereditario con su inherited y todo

  Cerrar_Tabla( SQLConnector_Tabla001,
                SQLTransaction_Tabla001,
                SQLQuery_Tabla001 );
  }
end;

procedure Tf_impresoras_000.Borrar_Registro;
begin
  if UTI_USR_Permiso_SN(public_Menu_Worked, 'B', True) = True then
  begin
    UTI_RGTRO_Borrar( pubic_nombre_tabla_Principal,
                      SQLQuery_Principal,
                      public_Solo_Ver,
                      public_Menu_Worked );
  end;
end;

procedure Tf_impresoras_000.Dibujar_Grid_Principal( p_Sender: TObject;
                                                       const p_Rect: TRect;
                                                       p_DataCol: Integer;
                                                       p_Column: TColumn;
                                                       p_State: TGridDrawState );
var var_Color_Normal : TColor;
begin
  with p_Sender as TDBGrid do
  begin
      if SQLQuery_Principal.RecordCount = 0 then Exit;

      var_Color_Normal := Canvas.Brush.Color;

      // ***************************************************************************************** //
      // ** Primero comprobamos si es un registro dado de baja o no                             ** //
      // ***************************************************************************************** //
      if not SQLQuery_Principal.FieldByName('Del_WHEN').IsNull then
      begin
          // ********************************************************************************* //
          // ** Registro DADO de BAJA                                                       ** //
          // ********************************************************************************* //
          Canvas.Font.Color := clSilver;
      end else begin
          // ********************************************************************************* //
          // ** Registro DADO de ALTA, NO BAJA                                              ** //
          // ********************************************************************************* //
          // ** Así que las pinto, pero sólo si no son las columnas que van a               ** //
          // ** ser dibujadas                                                               ** //
          // ********************************************************************************* //
          if p_State <> [gdSelected] then
          begin
              if (p_Column.FieldName <> 'predeterminada') then
              begin
                  Canvas.font.Color := clBlack;
              end;
          end;
      end;

      // ***************************************************************************************** //
      // ** Ahora paso a dibujar una celda normal con los colores elegidos o una                ** //
      // ** dibujada                                                                            ** //
      // ***************************************************************************************** //
      if (p_Column.FieldName <> 'predeterminada') then
      begin
          // ********************************************************************************* //
          // ** No es una de las columnas a dibujar por lo que la pinto con los             ** //
          // ** colores elegidos                                                            ** //
          // ********************************************************************************* //
          DefaultDrawColumnCell(p_Rect, p_DataCol, p_Column, p_State);
      end else begin
          // ********************************************************************************* //
          // ** Es una de las columnas a dibujar                                            ** //
          // ********************************************************************************* //
          // ** COLUMNA CONFIRMADA                                                          ** //
          // ********************************************************************************* //
          if p_Column.FieldName = 'predeterminada'  then
          begin
              if SQLQuery_Principal.FieldByName('predeterminada_SN').Value = 'S' then
                   Canvas.StretchDraw(p_Rect, Image_Predeterminada.Picture.Graphic)
              else DefaultDrawColumnCell(p_Rect, p_DataCol, p_Column, p_State);
          end;
      end;

      Canvas.Font.Color := var_Color_Normal;
  end;
end;

procedure Tf_impresoras_000.BitBtn_Considerar_como_cerradoClick(Sender: TObject);
var var_msg : TStrings;
begin
  with SQLQuery_Principal do
  begin
    if RecordCount <> 0 then
    begin
      if UTI_IMPRESORAS_Crear_Predeterminada( FieldByName('id').AsString,
                                              FieldByName('descripcion').AsString ) = false then
      begin
        var_msg := TStringList.Create;
        var_msg.Add('No se pudo poner como predeterminada.');
        UTI_GEN_Aviso(true, var_msg, rs_No_Se_Puede, True, False);
        var_msg.Free;
      end else begin
        // ********************************************************************************* //
        // ** Refrescar los registros para presentar la nueva impresora predeterminada    ** //
        // ********************************************************************************* //
        Refrescar_Registros;

        // ********************************************************************************* //
        // ** Asignamos a la aplicación cual es la impresora predeterminada y cantidad de ** //
        // ** copias preconfiguradas cuando se use                                        ** //
        // ********************************************************************************* //
        form_menu.Traer_Impresora_Predeterminada;
      end;
    end else
    begin

    end;
  end;
end;

function Tf_impresoras_000.Existe_la_Impresora_Ya( param_id,
                                                      param_descripcion : ShortString ) : Trecord_Existe;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
  try
    Result.Fallo_en_Conexion_BD := false;
    Result.Existe               := false;
    Result.deBaja               := 'N';

    if Trim(param_descripcion) <> '' then
    begin
      // ******************************************************************************************* //
      // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                    ** //
      // ******************************************************************************************* //
      var_SQLTransaction := TSQLTransaction.Create(nil);
      var_SQLConnector   := TSQLConnector.Create(nil);

      if UTI_CN_Abrir( var_SQLTransaction,
                       var_SQLConnector ) = False then UTI_GEN_Salir;

      // ******************************************************************************************* //
      // ** Creamos la SQL Según el motor de BD                                                   ** //
      // ******************************************************************************************* //
      var_SQL := TStringList.Create;
      var_SQL.Clear;

      var_SQL.Add('SELECT i.*' );
      var_SQL.Add(  'FROM impresoras AS i' );

      var_SQL.Add(' WHERE i.descripcion LIKE ' + UTI_GEN_Comillas('%' + Trim(param_descripcion) + '%') );

      if Trim(param_id) <> '' then
      begin
        var_SQL.Add(  ' AND NOT i.id = ' + Trim(param_id) );
      end;

      var_SQL.Add(' ORDER BY i.descripcion ASC' );

      // ********************************************************************************************* //
      // ** Abrimos la tabla                                                                        ** //
      // ********************************************************************************************* //
      var_SQLQuery      := TSQLQuery.Create(nil);
      var_SQLQuery.Name := 'SQLQuery_Existe_la_Impresora_Ya';

      if UTI_TB_Abrir( '', '', '',
                       var_SQLConnector,
                       var_SQLTransaction,
                       var_SQLQuery,
                       -1, // asi me trae todos los registros de golpe
                       var_SQL.Text ) = False then UTI_GEN_Salir;

      // ********************************************************************************************* //
      // ** TRABAJAMOS CON LOS REGISTROS DEVUELTOS                                                  ** //
      // ********************************************************************************************* //
      if var_SQLQuery.RecordCount > 0 then
      begin
        Result.Existe := true;
        if not var_SQLQuery.FieldByName('Del_WHEN').IsNull then
        begin
          Result.deBaja := 'S';
        end;
      end;

      // ********************************************************************************************* //
      // ** Cerramos la tabla                                                                       ** //
      // ********************************************************************************************* //
      if UTI_TB_Cerrar( var_SQLConnector,
                        var_SQLTransaction,
                        var_SQLQuery ) = false then UTI_GEN_Salir;

      var_SQLQuery.Free;

      var_SQLTransaction.Free;
      var_SQLConnector.Free;

      var_SQL.Free;
    end;
  except
    on error : Exception do
    begin
      UTI_GEN_Error_Log( 'Error al comprobar si la impresora existe ya.' +
                         'La tabla ha sido ' + var_SQLQuery.Name + ' desde el módulo ' +
                         Screen.ActiveForm.Name,
                         error );
      try
        var_SQL.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
        var_SQLQuery.Free;
      except
      end;

      Result.Fallo_en_Conexion_BD := true;
    end;
  end;
end;

procedure Tf_impresoras_000.Antes_del_Post_Principal_Sin_Rellenar_Permitido_SI( p_msg : TStrings );
begin
  { Hacer algo parecido a lo de abajo pero en plan hereditario con su inherited y todo

  // *********************************************************************************************** //
  // ** Ahora vienen las comprobaciones de porque no grabamos                                     ** //
  // *********************************************************************************************** //
  with SQLQuery_Principal do
  begin
    if Trim(DBEdit_Descripcion.Text) <> '' then
      FieldByName('descripcion').asString := AnsiUpperCase(Trim(FieldByName('descripcion').AsString))
    else
    begin
      p_msg.Add( rs_bcta_006 );
    end;

    if Trim(FieldByName('id_empresas').AsString) = '' then
    begin
      p_msg.Add( rs_bcta_007 );
    end;
  end;
}
end;

procedure Tf_impresoras_000.Antes_del_Post_Principal_Asignar_Valores;
begin
  // *********************************************************************************************** //
  // ** Asignamos valores si no los tenían                                                        ** //
  // *********************************************************************************************** //
  with SQLQuery_Principal do
  begin
    if FieldByName('predeterminada_SN').IsNull then
    begin
      FieldByName('predeterminada_SN').AsString := 'N';
    end;

    FieldByName('Copias_a_Imprimir').Value := SpinEdit_Copias.Value;

  end;

end;

procedure Tf_impresoras_000.Antes_del_Post_Principal_Sin_Rellenar_Permitido_NO( p_msg,
                                                                                p_msg_Comprobar : TStrings );
var var_record_Existe : Trecord_Existe;
begin
  // *********************************************************************************************** //
  // ** Ahora vienen las comprobaciones de porque no grabamos                                     ** //
  // *********************************************************************************************** //
  with SQLQuery_Principal do
  begin
    if Trim(FieldByName('descripcion').AsString) = '' then
    begin
      p_msg.Add( rs_impr_005);
    end;

    // ********************************************************************************************* //
    // ** Comprobamos que la cuenta contable no esté ya creada para otra cuenta bancaria          ** //
    // ********************************************************************************************* //
(*
    if var_record_Existe.Fallo_en_Conexion_BD = true then
    begin
      Result := false;
    end else
    begin
      if var_record_Existe.Existe = true then
      begin
        Result := false;

        var_msg := TStringList.Create;

        var_msg.Clear;
        var_msg.Add( 'Impresora repetida.');

        if UpperCase(var_record_Existe.deBaja) = 'S' then
        begin
          var_msg.Add(rs_Rgtro_Borrado);
        end;

        UTI_GEN_Aviso(true, var_msg, rs_Ya_Existe, True, False);

        var_msg.Free;
      end;
    end;

*)
    if SQLQuery_Principal.State = dsInsert then
    begin
      var_record_Existe := Existe_la_Impresora_Ya( '',
                                                   FieldByName('descripcion').AsString );
    end;

    if SQLQuery_Principal.State = dsEdit then
    begin
      var_record_Existe := Existe_la_Impresora_Ya( FieldByName('id').AsString,
                                                   FieldByName('descripcion').AsString );

    end;

    if (SQLQuery_Principal.State = dsInsert) or
       (SQLQuery_Principal.State = dsEdit)   then
    begin
      if var_record_Existe.Fallo_en_Conexion_BD = true then
      begin
        p_msg.Add( rs_impr_006 );
      end
      else
      begin
        if var_record_Existe.Existe = true then
        begin
          p_msg.Add( rs_impr_007 );

          if UpperCase(var_record_Existe.deBaja) = 'S' then
          begin
            p_msg.Add(rs_Rgtro_Borrado);
          end;
        end;

      end;
    end;

  end;

end;

procedure Tf_impresoras_000.NewRecord_Insert;
begin
  { Hacer algo parecido a lo de abajo pero en plan hereditario con su inherited y todo

  with SQLQuery_Principal do
  begin
    // ********************************************************************************************* //
    // ** Asignamos valores de iniciosi no los tenían                                             ** //
    // ********************************************************************************************* //
    FieldByName('numero_siguiente').AsString := '1';

  end;
}
end;

procedure Tf_impresoras_000.Campo_Foco_en_modo_Edicion_Inserccion;
begin
  Self.ActiveControl := Boton_Elegir_Impresora;
end;

end.




