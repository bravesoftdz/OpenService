unit utilidades_empresas;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, utilidades_datos_tablas, utilidades_general;

type
    TCuantas_Empresas_Hay = record
      Error    : Boolean;
      Cuantas  : LongInt;
      id_de_1a : Int64;
    end;

  procedure UTI_EMPRE_Asignar_Empresa( param_tabla : TSQLQuery ) ;
  function  UTI_EMPRE_Cuantas_empresas_hay : TCuantas_Empresas_Hay;

implementation

uses menu, avisos, barra_progreso, informe, utilidades_usuarios, utilidades_bd;

function UTI_EMPRE_Cuantas_empresas_hay : TCuantas_Empresas_Hay;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_EMPRE_Cuantas_empresas_hay';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'SELECT id' );
        var_SQLQuery.SQL.Add(   'FROM empresas' );
        var_SQLQuery.SQL.Add(  'WHERE Del_WHEN IS NULL' );

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add(  'ORDER BY ID ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        var_SQLQuery.First;

        Result.Error    := false;
        Result.Cuantas  := var_SQLQuery.RecordCount;
        Result.id_de_1a := var_SQLQuery.FieldByName('id').Value;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            Result.Error    := true;
            Result.Cuantas  := 0;
            Result.id_de_1a := 0;

            UTI_GEN_Error_Log( 'Ocurrió un error al traer la cantidad de empresas creadas y activas',
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

procedure UTI_EMPRE_Asignar_Empresa( param_tabla : TSQLQuery ) ;
var var_Cuantas_Empresas_Hay : TCuantas_Empresas_Hay;
    var_Registro_Empresa     : TEmpresas;
    var_msg                  : TStrings;
begin
    var_msg := TStringList.Create;

    var_Cuantas_Empresas_Hay := UTI_EMPRE_Cuantas_empresas_hay;
    if var_Cuantas_Empresas_Hay.Error = false then
    begin
        // ***************************************************************************************** //
        // ** No se produjo error al traer la cantidad de empresas                                ** //
        // ***************************************************************************************** //
        if var_Cuantas_Empresas_Hay.Cuantas = 1 then
        begin
            // ************************************************************************************* //
            // ** Hay una sola empresa creada por lo que la ponemos automáticamente               ** //
            // ************************************************************************************* //
            var_Registro_Empresa := UTI_DATOS_TABLA_Traer_Empresas_xID( Trim(FloatToStr(var_Cuantas_Empresas_Hay.id_de_1a)) );
            with param_tabla do
            begin
                FieldByName('id_empresas').AsString            := var_Registro_Empresa.id;
                FieldByName('OT_descripcion_empresa').AsString := var_Registro_Empresa.nombre_comercial;
            end;
        end else begin
            // ************************************************************************************* //
            // ** Hay más de una empresa creada, así que vamos a comprobar si el usuario ya tiene ** //
            // ** una seleccionada desde la aplicación                                            ** //
            // ************************************************************************************* //
            with param_tabla do
            begin
                if Trim(form_menu.public_User_Registro_Empresa_Elegida.id) <> '' then
                begin
                    var_msg.Clear;
                    var_msg.Add('Tiene seleccionada para trabajar la empresa << ' +
                                form_menu.public_User_Registro_Empresa_Elegida.nombre_comercial +
                                ' >>, ¿LA AÑADIMOS?' );

                    if UTI_GEN_Aviso(true,  var_msg, '¿QUE HACEMOS?', true, true ) = true then
                    begin
                        FieldByName('id_empresas').AsString            := form_menu.public_User_Registro_Empresa_Elegida.id;
                        FieldByName('OT_descripcion_empresa').AsString := form_menu.public_User_Registro_Empresa_Elegida.nombre_comercial;
                    end;
                end;
            end;
        end;
    end;

    var_msg.Free;
end;

initialization

finalization

end.

