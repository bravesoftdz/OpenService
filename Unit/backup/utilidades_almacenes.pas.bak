unit utilidades_almacenes;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, utilidades_datos_tablas, utilidades_general;

type
    TCuantos_Almacenes_Hay = record
      Error    : Boolean;
      Cuantos  : LongInt;
      id_de_1o : Int64;
    end;

  procedure UTI_ALMAC_Asignar_almacen( param_tabla : TSQLQuery ) ;
  function  UTI_ALMAC_Cuantos_almacenes_hay : TCuantos_Almacenes_Hay;

implementation

uses utilidades_bd;

function UTI_ALMAC_Cuantos_almacenes_hay : TCuantos_Almacenes_Hay;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_EMPRE_Cuantas_empresas_hay';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'SELECT id' );
        var_SQLQuery.SQL.Add(   'FROM empresas' );
        var_SQLQuery.SQL.Add(  'WHERE Del_WHEN IS NULL' );

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add(  'ORDER BY id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        var_SQLQuery.First;

        Result.Error    := false;
        Result.Cuantos  := var_SQLQuery.RecordCount;
        Result.id_de_1o := var_SQLQuery.FieldByName('id').Value;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            Result.Error    := true;
            Result.Cuantos  := 0;
            Result.id_de_1o := 0;

            UTI_GEN_Error_Log( 'Ocurrió un error al traer la cantidad de almacenes creados y activos',
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

procedure UTI_ALMAC_Asignar_almacen( param_tabla : TSQLQuery ) ;
var var_Cuantos_Almacenes_Hay : TCuantos_Almacenes_Hay;
    var_Registro_Almacen      : TAlmacenes;
    var_msg                   : TStrings;
begin
    var_msg := TStringList.Create;

    var_Cuantos_Almacenes_Hay := UTI_ALMAC_Cuantos_almacenes_hay;
    if var_Cuantos_Almacenes_Hay.Error = false then
    begin
        // ***************************************************************************************** //
        // ** No se produjo error al traer la cantidad de empresas                                ** //
        // ***************************************************************************************** //
        if var_Cuantos_Almacenes_Hay.Cuantos = 1 then
        begin
            // ************************************************************************************* //
            // ** Hay un solo almacén creado por lo que lo ponemos automáticamente                ** //
            // ************************************************************************************* //
            var_Registro_Almacen := UTI_DATOS_TABLA_Traer_Almacenes_xID( Trim(FloatToStr(var_Cuantos_Almacenes_Hay.id_de_1o)) );
            with param_tabla do
            begin
                FieldByName('id_almacenes').AsString           := var_Registro_Almacen.id;
                FieldByName('OT_descripcion_almacen').AsString := var_Registro_Almacen.descripcion;
            end;
        end;
    end;

    var_msg.Free;
end;

initialization

finalization

end.

