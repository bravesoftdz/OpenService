unit utilidades_compras;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, sqldb, Forms, utilidades_bd, utilidades_general, utilidades_datos_tablas,
  utilidades_rgtro;

type

  TUTI_COMPRAS_Ctdad_Rgtros_Detalle = record
      Total_Lineas            : Int64;
      Total_Lineas_Sin_Marcar : Int64;
      Total_Lineas_Marcadas   : Int64;
  end;

  function  UTI_COMPRAS_Esta_Ftra_Tiene_Albaranes( param_id_facturas : ShortString ) : String;
  function  UTI_COMPRAS_Devolver_Numeracion_Factura( param_msg : TStrings; param_Registro_Empresa : TEmpresas; param_DESbloqueamos_empresa, param_Save_Next : Boolean ) : TEmpresas;
  function  UTI_COMPRAS_Devolver_Numeracion_Abono( param_msg : TStrings; param_Registro_Empresa : TEmpresas; param_DESbloqueamos_empresa, param_Save_Next : Boolean ) : TEmpresas;
  function  UTI_COMPRAS_Devolver_id_factura( param_Serie, param_Numero : ShortString ) : String;
  function  UTI_COMPRAS_Esta_Cerrado_SN( param_tabla, param_id : String ) : ShortString;
  function  UTI_COMPRAS_Estado_Lineas_Detalle( param_SQLQuery : TSQLQuery; param_Nombre_Campo_Serie, param_Nombre_Campo_Numero : String ) : TUTI_COMPRAS_Ctdad_Rgtros_Detalle;
  function  UTI_COMPRAS_Cerrar_SN( param_tabla, param_Cerrar_SN { S o N }, param_id, param_Serie, param_Numero : String ) : Boolean;
  function  UTI_COMPRAS_Update_Next_No_Presupuesto( param_id_empresas, param_Numero : ShortString ) : Boolean;
  function  UTI_COMPRAS_Update_Next_No_Pedido( param_id_empresas, param_Numero : ShortString ) : Boolean;
  function  UTI_COMPRAS_Update_Next_No_Albaran( param_id_empresas, param_Numero_Albaran : ShortString ) : Boolean;
  function  UTI_COMPRAS_Update_Next_No_Factura( param_id_empresas, param_Numero_Factura : ShortString ) : Boolean;
  function  UTI_COMPRAS_Update_Next_No_Abono( param_id_empresas, param_Numero_Abono : ShortString ) : Boolean;
  function  UTI_COMPRAS_Devolver_Numeracion_Presupuesto( param_msg : TStrings; param_Registro_Empresa : TEmpresas; param_DESbloqueamos_empresa, param_Save_Next : Boolean ) : TEmpresas;
  function  UTI_COMPRAS_Devolver_Numeracion_Pedido( param_msg : TStrings; param_Registro_Empresa : TEmpresas; param_DESbloqueamos_empresa, param_Save_Next : Boolean ) : TEmpresas;
  function  UTI_COMPRAS_Devolver_Numeracion_Albaran( param_msg : TStrings; param_Registro_Empresa : TEmpresas; param_DESbloqueamos_empresa, param_Save_Next : Boolean ) : TEmpresas;

implementation

function UTI_COMPRAS_Esta_Cerrado_SN( param_tabla,
                                      param_id : String ) : ShortString;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Esta_Cerrado_SN';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'SELECT Cerrado_SN' );
        var_SQLQuery.SQL.Add(   'FROM ' + Trim(param_tabla) );
        var_SQLQuery.SQL.Add(  'WHERE id = ' + param_id );

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add(  'ORDER BY id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe ninguna compra todavia                            ** //
        // ***************************************************************************************** //
        Result := ''; // No encontremos este registro
        if var_SQLQuery.RecordCount <> 0 then
        begin
            with var_SQLQuery do
            begin
                Result := FieldByName('Cerrado_SN').AsString;
            end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            Result := ''; // No encontremos este registro

            UTI_GEN_Error_Log( 'Ocurrió un error al comprobar si estaba cerrado ' +
                               Trim(param_tabla) + ' con id = ' + Trim(param_id) +
                               '. Desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_COMPRAS_Estado_Lineas_Detalle( param_SQLQuery : TSQLQuery;
                                            param_Nombre_Campo_Serie,
                                            param_Nombre_Campo_Numero : String ) : TUTI_COMPRAS_Ctdad_Rgtros_Detalle;
begin
    // ********************************************************************************************* //
    // ** Comprobar si tiene alguna línea sin convertir en albarán                                ** //
    // ********************************************************************************************* //
    with param_SQLQuery do
    begin
        Result.Total_Lineas            := 0;
        Result.Total_Lineas_Sin_Marcar := 0;
        Result.Total_Lineas_Marcadas   := 0;

        First;
        While not eof do
        begin
            if FieldByName('Del_WHEN').IsNull then
            begin
                Result.Total_Lineas := Result.Total_Lineas + 1;

                // ********************************************************************************* //
                // ** Comprobar si tiene alguna línea de detalle sin convertir todavía en pedido  ** //
                // ********************************************************************************* //
                if (FieldByName(Trim(param_Nombre_Campo_Serie)).IsNull)  and
                   (FieldByName(Trim(param_Nombre_Campo_Numero)).IsNull) then
                begin
                    Result.Total_Lineas_Sin_Marcar := Result.Total_Lineas_Sin_Marcar + 1;
                end else begin
                    Result.Total_Lineas_Marcadas := Result.Total_Lineas_Marcadas + 1;
                end;
            end;

            Next;
        end;
    end;
end;

function UTI_COMPRAS_Cerrar_SN( param_tabla,
                                param_Cerrar_SN { S o N },
                                param_id,
                                param_Serie,
                                param_Numero : String ) : Boolean;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_msg            : TStrings;
begin
    Result := true;

    Try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = False then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos la SQL Según el motor de BD                                                 ** //
        // ***************************************************************************************** //
        var_SQL := TStringList.Create;

        var_SQL.Add( 'UPDATE ' + Trim(param_tabla) );
        var_SQL.Add(    'SET Cerrado_SN = ' + UTI_GEN_Comillas(UpperCase(Trim(param_Cerrar_SN))) );
        var_SQL.Add(  'WHERE id = ' + Trim(param_id) );

        // ***************************************************************************************** //
        // ** Ejecutamos la SQL                                                                   ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);

        var_SQLQuery.Database := var_SQLConnector;
        var_SQLQuery.SQL.Text := var_SQL.Text;

        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Cerrar_SN';

        var_SQLQuery.ExecSQL;
        var_SQLTransaction.Commit;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQL.Free;

        // ***************************************************************************************** //
        // ** Cerramos La transacción y la conexión con la BD                                     ** //
        // ***************************************************************************************** //
        if UTI_CN_Cerrar( var_SQLTransaction,
                          var_SQLConnector ) = False then UTI_GEN_Salir;

        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    Except
        on error : Exception do
        begin
            Result  := false;

            var_msg := TStringList.Create;
            if UpperCase(Trim(param_Cerrar_SN)) = 'S' then
            begin
                var_msg.Add( 'No se pudo considerar como cerrado NUESTRA REFERENCIA DE SERIE/NUMERO: ' +
                             Trim(param_Serie) + '/' + Trim(param_Numero) + '.' );
            end else begin
                var_msg.Add( 'No se pudo considerar como no cerrado NUESTRA REFERENCIA DE SERIE/NUMERO: ' +
                             Trim(param_Serie) + '/' + Trim(param_Numero) + '.' );
            end;

            UTI_GEN_Error_Log( var_msg.Text, error );
            UTI_GEN_Aviso(true, var_msg, 'No se pudo', True, False);
            var_msg.Free;

            try
                var_SQL.Free;
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_COMPRAS_Devolver_Numeracion_Presupuesto( param_msg : TStrings;
                                                      param_Registro_Empresa : TEmpresas;
                                                      param_DESbloqueamos_empresa,
                                                      param_Save_Next : Boolean ) : TEmpresas;
var var_Next_Pto : Integer;
begin
    // ********************************************************************************************* //
    // ** Lo primero es traer la próxima numeración. Esto lo trae de la empresa.                  ** //
    // ** Pero antes tengo que comprobar que nadie esté bloqueando el registro de la empresa, pues** //
    // ** este entre otras cosas lleva la numeración y así controlo que nadie cree al mismo tiempo** //
    // ********************************************************************************************* //
    if UTI_RGTRO_isLock( 'empresas',
                         param_Registro_Empresa.id,
                         true ) = true then
    begin
        // ***************************************************************************************** //
        // ** El registro ya está bloqueado por lo que no continuamos                             ** //
        // ***************************************************************************************** //
        param_msg.Add( '* El registro de la empresa ahora mismo alguien lo está bloqueando,' +
                       ' por lo que no se pueden crear presupuestos' );
        Exit;
    end else begin
        if UTI_RGTRO_Lock( 'empresas',
                           param_Registro_Empresa.id ) = false then
        begin
            // ************************************************************************************* //
            // ** NO SE PUDO BLOQUEAR, ASI QUE NO CONTINUAMOS                                     ** //
            // ************************************************************************************* //
            param_msg.Add( '* El registro de la empresa no se pudo bloquear,' +
                           ' por lo que no se pueden crear presupuestos' );
            Exit;
        end else begin
            // ************************************************************************************* //
            // ** REGISTRO DE EMPRESA BLOQUEADO, continuamos con la creación de los presupuestos  ** //
            // ************************************************************************************* //
           param_Registro_Empresa := UTI_DATOS_TABLA_Traer_Empresas_xID( Trim(param_Registro_Empresa.id) );

           if Trim(param_Registro_Empresa.Numero_Presupuesto_Compras) = '' then
           begin
               param_msg.Add( '* A la empresa ' +
                              Trim(param_Registro_Empresa.nombre_comercial) +
                              ' le falta configurar la numeración para sus próximos presupuestos' +
                              ' por compras, por lo que no se puede crear el nuevo presupuesto.' );

               // ********************************************************************************** //
               // ** Libero el registro de empresas porque esta funcion lo habia bloqueado        ** //
               // ********************************************************************************** //
               UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );

               Exit;
           end else begin
               // ********************************************************************************** //
               // ** Ya conozco el próximo presupuesto y está guardado en:                        ** //
               // ** param_Registro_Empresa.Serie_Presupuesto                                     ** //
               // ** param_Registro_Empresa.Numero_Presupuesto                                    ** //
               // ********************************************************************************** //

               if param_Save_Next = true then
               begin
                   // ****************************************************************************** //
                   // ** Actualizamos el registro de la empresa al siguiente número de empresa    ** //
                   // ****************************************************************************** //
                   var_Next_Pto := StrToInt( Trim(param_Registro_Empresa.Numero_Presupuesto) ) + 1;

                   if UTI_COMPRAS_Update_Next_No_Presupuesto( param_Registro_Empresa.id,
                                                              IntToStr(var_Next_Pto) ) = false then
                   begin
                       param_msg.Add( '* No se pudo actualizar el próximo número de presupuesto' +
                                      ' por compras a crear, por lo que no podemos continuar con' +
                                      ' la creación de la cabecera del presupuesto.' +
                                      Trim(param_Registro_Empresa.Serie_Presupuesto_Compras) + '/' +
                                      Trim(param_Registro_Empresa.Numero_Presupuesto_Compras) );
                       Exit;
                   end;
               end;

               // ********************************************************************************** //
               // ** Sólo libero el rgtro.de empresas si param_DESbloqueamos_empresa = true       ** //
               // ********************************************************************************** //
               if param_DESbloqueamos_empresa = true then
               begin
                   UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );
               end;

               // ********************************************************************************** //
               // ** No se produjo ningún error durante la grabación del próximo presupuesto y el ** //
               // ** del registro de la empresa, por lo que devolvemos el registro de la empresa  ** //
               // ********************************************************************************** //
               Result := param_Registro_Empresa;
               Exit;
           end;
        end;
    end;
end;

function UTI_COMPRAS_Update_Next_No_Presupuesto( param_id_empresas,
                                                 param_Numero : ShortString ) : Boolean;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    Result := true;

    Try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = False then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** CREAMOS LA SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQL := TStringList.Create;

        var_SQL.Add( 'UPDATE empresas' );
        var_SQL.Add(    'SET Numero_Presupuesto_Compras = ' + Trim(param_Numero) );
        var_SQL.Add(  'WHERE id = ' + Trim(param_id_empresas) );

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y Ejecutamos la sql                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);

        var_SQLQuery.Database := var_SQLConnector;
        var_SQLQuery.SQL.Text := var_SQL.Text;

        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Update_Next_No_Presupuesto';

        var_SQLQuery.ExecSQL;
        var_SQLTransaction.Commit;

        // ***************************************************************************************** //
        // ** Destruimos el SQLQuery la SQL creada                                                ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQL.Free;

        // ***************************************************************************************** //
        // ** Cerramos La transacción y la conexión con la BD                                     ** //
        // ***************************************************************************************** //
        if UTI_CN_Cerrar( var_SQLTransaction,
                          var_SQLConnector ) = False then UTI_GEN_Salir;

        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    Except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Error al actualizar el número de presupuesto por compras a ' +
                               Trim(param_Numero) +
                               ' a la empresa ' +
                               Trim(param_id_empresas),
                               error );
            try
                var_SQL.Free;
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;

            Result := false
        end;
    end;
end;

function UTI_COMPRAS_Devolver_Numeracion_Pedido( param_msg : TStrings;
                                                 param_Registro_Empresa : TEmpresas;
                                                 param_DESbloqueamos_empresa,
                                                 param_Save_Next : Boolean ) : TEmpresas;
var var_Next_Pedido : Integer;
begin
    // ********************************************************************************************* //
    // ** Lo primero es traer la próxima numeración. Esto lo trae de la empresa.                  ** //
    // ** Pero antes tengo que comprobar que nadie esté bloqueando el registro de la empresa, pues** //
    // ** este entre otras cosas lleva la numeración y así controlo que nadie cree al mismo tiempo** //
    // ********************************************************************************************* //
    if UTI_RGTRO_isLock( 'empresas',
                         param_Registro_Empresa.id,
                         true ) = true then
    begin
        // ***************************************************************************************** //
        // ** El registro ya está bloqueado por lo que no continuamos                             ** //
        // ***************************************************************************************** //
        param_msg.Add( '* El registro de la empresa ahora mismo alguien lo está bloqueando,' +
                       ' por lo que no se pueden crear pedidos.' );
        Exit;
    end else begin
        if UTI_RGTRO_Lock( 'empresas',
                           param_Registro_Empresa.id ) = false then
        begin
            // ************************************************************************************* //
            // ** NO SE PUDO BLOQUEAR, ASI QUE NO CONTINUAMOS                                     ** //
            // ************************************************************************************* //
            param_msg.Add( '* El registro de la empresa no se pudo bloquear,' +
                           ' por lo que no se pueden crear pedidos.' );
            Exit;
        end else begin
            // ************************************************************************************* //
            // ** REGISTRO DE EMPRESA BLOQUEADO, continuamos con la creación de los pedidos       ** //
            // ************************************************************************************* //
           param_Registro_Empresa := UTI_DATOS_TABLA_Traer_Empresas_xID( Trim(param_Registro_Empresa.id) );

           if Trim(param_Registro_Empresa.Numero_Pedido_Compras) = '' then
           begin
               param_msg.Add( '* A la empresa ' +
                              Trim(param_Registro_Empresa.nombre_comercial) +
                              ' le falta configurar la numeración para sus próximos pedidos de compras,' +
                              ' por lo que no se puede crear el nuevo pedido.' );

               // ********************************************************************************** //
               // ** Libero el registro de empresas porque esta funcion lo habia bloqueado        ** //
               // ********************************************************************************** //
               UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );

               Exit;
           end else begin
               // ********************************************************************************** //
               // ** Ya conozco el próximo pedido y está guardado en:                             ** //
               // ** param_Registro_Empresa.Serie_Pedido                                          ** //
               // ** param_Registro_Empresa.Numero_Pedido                                         ** //
               // ********************************************************************************** //

               if param_Save_Next = true then
               begin
                   // ****************************************************************************** //
                   // ** Actualizamos el registro de la empresa al siguiente número de empresa    ** //
                   // ****************************************************************************** //
                   var_Next_Pedido := StrToInt( Trim(param_Registro_Empresa.Numero_Pedido_Compras) ) + 1;

                   if UTI_COMPRAS_Update_Next_No_Pedido( param_Registro_Empresa.id,
                                                         IntToStr(var_Next_Pedido) ) = false then
                   begin
                       param_msg.Add( '* No se pudo actualizar el próximo número de pedido de compras a crear' +
                                      ', por lo que no podemos continuar con la creación de la ' +
                                      'cabecera del pedido.' +
                                      Trim(param_Registro_Empresa.Serie_Pedido_Compras) + '/' +
                                      Trim(param_Registro_Empresa.Numero_Pedido_Compras) );
                       Exit;
                   end;
               end;

               // ********************************************************************************** //
               // ** Sólo libero el rgtro.de empresas si param_DESbloqueamos_empresa = true       ** //
               // ********************************************************************************** //
               if param_DESbloqueamos_empresa = true then
               begin
                   UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );
               end;

               // ********************************************************************************** //
               // ** No se produjo ningún error durante la grabación del próximo pedido y el      ** //
               // ** del registro de la empresa, por lo que devolvemos el registro de la empresa  ** //
               // ********************************************************************************** //
               Result := param_Registro_Empresa;
               Exit;
           end;
        end;
    end;
end;

function UTI_COMPRAS_Update_Next_No_Pedido( param_id_empresas,
                                            param_Numero : ShortString ) : Boolean;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    Result := true;

    Try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = False then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** CREAMOS LA SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQL := TStringList.Create;

        var_SQL.Add( 'UPDATE empresas' );
        var_SQL.Add(    'SET Numero_Pedido_Compras = ' + Trim(param_Numero) );
        var_SQL.Add(  'WHERE id = ' + Trim(param_id_empresas) );

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y Ejecutamos la sql                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);

        var_SQLQuery.Database := var_SQLConnector;
        var_SQLQuery.SQL.Text := var_SQL.Text;

        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Update_Next_No_Pedido';

        var_SQLQuery.ExecSQL;
        var_SQLTransaction.Commit;

        // ***************************************************************************************** //
        // ** Destruimos el SQLQuery la SQL creada                                                ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQL.Free;

        // ***************************************************************************************** //
        // ** Cerramos La transacción y la conexión con la BD                                     ** //
        // ***************************************************************************************** //
        if UTI_CN_Cerrar( var_SQLTransaction,
                          var_SQLConnector ) = False then UTI_GEN_Salir;

        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    Except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Error al actualizar el número de pedido por compras a ' +
                               Trim(param_Numero) +
                               ' a la empresa ' +
                               Trim(param_id_empresas),
                               error );
            try
                var_SQL.Free;
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;

            Result := false
        end;
    end;
end;

function UTI_COMPRAS_Devolver_Numeracion_Albaran( param_msg : TStrings;
                                                  param_Registro_Empresa : TEmpresas;
                                                  param_DESbloqueamos_empresa,
                                                  param_Save_Next : Boolean ) : TEmpresas;
var var_Next_Albaran : Integer;
begin
    // ********************************************************************************************* //
    // ** Lo primero es traer la próxima numeración. Esto lo trae de la empresa.                  ** //
    // ** Pero antes tengo que comprobar que nadie esté bloqueando el registro de la empresa, pues** //
    // ** este entre otras cosas lleva la numeración y así controlo que nadie cree al mismo tiempo** //
    // ********************************************************************************************* //
    if UTI_RGTRO_isLock( 'empresas',
                         param_Registro_Empresa.id,
                         true ) = true then
    begin
        // ***************************************************************************************** //
        // ** El registro ya está bloqueado por lo que no continuamos                             ** //
        // ***************************************************************************************** //
        param_msg.Add( '* El registro de la empresa ahora mismo alguien lo está bloqueando,' +
                       ' por lo que no se pueden crear albaranes' );
        Exit;
    end else begin
        if UTI_RGTRO_Lock( 'empresas',
                           param_Registro_Empresa.id ) = false then
        begin
            // ************************************************************************************* //
            // ** NO SE PUDO BLOQUEAR, ASI QUE NO CONTINUAMOS                                     ** //
            // ************************************************************************************* //
            param_msg.Add( '* El registro de la empresa no se pudo bloquear,' +
                           ' por lo que no se pueden crear albaranes' );
            Exit;
        end else begin
            // ************************************************************************************* //
            // ** REGISTRO DE EMPRESA BLOQUEADO, continuamos con la creación de los albaranes     ** //
            // ************************************************************************************* //
           param_Registro_Empresa := UTI_DATOS_TABLA_Traer_Empresas_xID( Trim(param_Registro_Empresa.id) );

           if Trim(param_Registro_Empresa.Numero_Albaran_Compras) = '' then
           begin
               param_msg.Add( '* A la empresa ' +
                              Trim(param_Registro_Empresa.nombre_comercial) +
                              ' le falta configurar la numeración para sus próximos albaranes,' +
                              ' por lo que no se puede crear el nuevo albarán.' );

               // ********************************************************************************** //
               // ** Libero el registro de empresas porque esta funcion lo habia bloqueado        ** //
               // ********************************************************************************** //
               UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );

               Exit;
           end else begin
               // ********************************************************************************** //
               // ** Ya conozco el próximo albarán y está guardado en:                            ** //
               // ** param_Registro_Empresa.Serie_Albaran                                         ** //
               // ** param_Registro_Empresa.Numero_Albaran                                        ** //
               // ********************************************************************************** //

               if param_Save_Next = true then
               begin
                   // ****************************************************************************** //
                   // ** Actualizamos el registro de la empresa al siguiente número de empresa    ** //
                   // ****************************************************************************** //
                   var_Next_Albaran := StrToInt( Trim(param_Registro_Empresa.Numero_Albaran_Compras) ) + 1;

                   if UTI_COMPRAS_Update_Next_No_Albaran( param_Registro_Empresa.id,
                                                         IntToStr(var_Next_Albaran) ) = false then
                   begin
                       param_msg.Add( '* No se pudo actualizar el próximo número de albaran a crear' +
                                      ', por lo que no podemos continuar con la creación de la ' +
                                      'cabecera del albarán.' +
                                      Trim(param_Registro_Empresa.Serie_Albaran) + '/' +
                                      Trim(param_Registro_Empresa.Numero_Albaran) );
                       Exit;
                   end;
               end;

               // ********************************************************************************** //
               // ** Sólo libero el rgtro.de empresas si param_DESbloqueamos_empresa = true       ** //
               // ********************************************************************************** //
               if param_DESbloqueamos_empresa = true then
               begin
                   UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );
               end;

               // ********************************************************************************** //
               // ** No se produjo ningún error durante la grabación del próximo albarán y el     ** //
               // ** del registro de la empresa, por lo que devolvemos el registro de la empresa  ** //
               // ********************************************************************************** //
               Result := param_Registro_Empresa;
               Exit;
           end;
        end;
    end;
end;

function UTI_COMPRAS_Update_Next_No_Albaran( param_id_empresas,
                                             param_Numero_Albaran : ShortString ) : Boolean;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    Result := true;

    Try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = False then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** CREAMOS LA SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQL := TStringList.Create;

        var_SQL.Add( 'UPDATE empresas' );
        var_SQL.Add(    'SET Numero_Albaran_Compras = ' + Trim(param_Numero_Albaran) );
        var_SQL.Add( 'WHERE id = ' + Trim(param_id_empresas) );

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y Ejecutamos la sql                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);

        var_SQLQuery.Database := var_SQLConnector;
        var_SQLQuery.SQL.Text := var_SQL.Text;

        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Update_Next_No_Albaran';

        var_SQLQuery.ExecSQL;
        var_SQLTransaction.Commit;

        // ***************************************************************************************** //
        // ** Destruimos el SQLQuery la SQL creada                                                ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQL.Free;

        // ***************************************************************************************** //
        // ** Cerramos La transacción y la conexión con la BD                                     ** //
        // ***************************************************************************************** //
        if UTI_CN_Cerrar( var_SQLTransaction,
                          var_SQLConnector ) = False then UTI_GEN_Salir;

        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    Except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Error al actualizar el número de albarán por compras a ' +
                               Trim(param_Numero_Albaran) +
                               ' a la empresa ' +
                               Trim(param_id_empresas),
                               error );
            try
                var_SQL.Free;
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;

            Result := false
        end;
    end;
end;

function UTI_COMPRAS_Devolver_id_factura( param_Serie,
                                          param_Numero : ShortString ) : String;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Devolver_id_factura';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'SELECT id' );
        var_SQLQuery.SQL.Add(   'FROM facturas_compras' );

        var_SQLQuery.SQL.Add(  'WHERE Serie_Factura = ' + UTI_GEN_Comillas(param_Serie) );
        var_SQLQuery.SQL.Add(    'AND Numero_Factura = ' + param_Numero );

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add(  'ORDER BY Serie_Factura ASC, Numero_Factura ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe ninguna compra todavia                            ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
        begin
             Result := '0'; // No encontremos este registro
        end else begin
             with var_SQLQuery do
             begin
                 Result := FieldByName('id').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            Result := '0'; // No encontremos este registro

            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer la ID de la factura ' +
                               Trim(param_Serie) + '/' + Trim(param_Numero) +
                               '. La tabla ha sido ' + var_SQLQuery.Name +
                               ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_COMPRAS_Devolver_Numeracion_Factura( param_msg : TStrings;
                                                  param_Registro_Empresa : TEmpresas;
                                                  param_DESbloqueamos_empresa,
                                                  param_Save_Next : Boolean ) : TEmpresas;
var var_Next_Factura : Integer;
begin
    // ********************************************************************************************* //
    // ** Lo primero es traer la próxima numeración. Esto lo trae de la empresa.                  ** //
    // ** Pero antes tengo que comprobar que nadie esté bloqueando el registro de la empresa, pues** //
    // ** este entre otras cosas lleva la numeración y así controlo que nadie cree al mismo tiempo** //
    // ********************************************************************************************* //
    if UTI_RGTRO_isLock( 'empresas',
                         param_Registro_Empresa.id,
                         true ) = true then
    begin
        // ***************************************************************************************** //
        // ** El registro ya está bloqueado por lo que no continuamos                             ** //
        // ***************************************************************************************** //
        param_msg.Add( '* El registro de la empresa ahora mismo alguien lo está bloqueando,' +
                       ' por lo que no se pueden crear facturas' );
        Exit;
    end else begin
        if UTI_RGTRO_Lock( 'empresas',
                           param_Registro_Empresa.id ) = false then
        begin
            // ************************************************************************************* //
            // ** NO SE PUDO BLOQUEAR, ASI QUE NO CONTINUAMOS                                     ** //
            // ************************************************************************************* //
            param_msg.Add( '* El registro de la empresa no se pudo bloquear,' +
                           ' por lo que no se pueden crear facturas' );
            Exit;
        end else begin
            // ************************************************************************************* //
            // ** REGISTRO DE EMPRESA BLOQUEADO, continuamos con la creación de las facturas      ** //
            // ************************************************************************************* //
           param_Registro_Empresa := UTI_DATOS_TABLA_Traer_Empresas_xID( Trim(param_Registro_Empresa.id) );

           if Trim(param_Registro_Empresa.Numero_Factura_Compras) = '' then
           begin
               param_msg.Add( '* A la empresa ' +
                              Trim(param_Registro_Empresa.nombre_comercial) +
                              ' le falta configurar la numeración para sus próximas facturas de compras,' +
                              ' por lo que no se puede crear la nueva factura.' );

               // ********************************************************************************** //
               // ** Libero el registro de empresas porque esta funcion lo habia bloqueado        ** //
               // ********************************************************************************** //
               UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );

               Exit;
           end else begin
               // ********************************************************************************** //
               // ** Ya conozco la próxima factura y está guardado en:                            ** //
               // ** param_Registro_Empresa.Serie_Factura                                         ** //
               // ** param_Registro_Empresa.Numero_Factura                                        ** //
               // ********************************************************************************** //

               if param_Save_Next = true then
               begin
                   // ****************************************************************************** //
                   // ** Actualizamos el registro de la empresa al siguiente número de empresa    ** //
                   // ****************************************************************************** //
                   var_Next_Factura := StrToInt( Trim(param_Registro_Empresa.Numero_Factura_Compras) ) + 1;

                   if UTI_COMPRAS_Update_Next_No_Factura( param_Registro_Empresa.id,
                                                          IntToStr(var_Next_Factura) ) = false then
                   begin
                       param_msg.Add( '* No se pudo actualizar el próximo número de factura de compras a crear' +
                                      ', por lo que no podemos continuar con la creación de la ' +
                                      'cabecera de la factura.' +
                                      Trim(param_Registro_Empresa.Serie_Factura) + '/' +
                                      Trim(param_Registro_Empresa.Numero_Factura) );
                       Exit;
                   end;
               end;

               // ********************************************************************************** //
               // ** Sólo libero el rgtro.de empresas si param_DESbloqueamos_empresa = true       ** //
               // ********************************************************************************** //
               if param_DESbloqueamos_empresa = true then
               begin
                   UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );
               end;

               // ********************************************************************************** //
               // ** No se produjo ningún error durante la grabación de la próxima factura y del  ** //
               // ** registro de la empresa, por lo que devolvemos el registro de la empresa      ** //
               // ********************************************************************************** //
               Result := param_Registro_Empresa;
               Exit;
           end;
        end;
    end;
end;

function UTI_COMPRAS_Update_Next_No_Factura( param_id_empresas,
                                             param_Numero_Factura : ShortString ) : Boolean;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    Result := true;

    Try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = False then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** CREAMOS LA SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQL := TStringList.Create;

        var_SQL.Add( 'UPDATE empresas' );
        var_SQL.Add(    'SET Numero_Factura_Compras = ' + Trim(param_Numero_Factura) );
        var_SQL.Add(  'WHERE id = ' + Trim(param_id_empresas) );

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y Ejecutamos la sql                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);

        var_SQLQuery.Database := var_SQLConnector;
        var_SQLQuery.SQL.Text := var_SQL.Text;

        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Update_Next_No_Factura';

        var_SQLQuery.ExecSQL;
        var_SQLTransaction.Commit;

        // ***************************************************************************************** //
        // ** Destruimos el SQLQuery la SQL creada                                                ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQL.Free;

        // ***************************************************************************************** //
        // ** Cerramos La transacción y la conexión con la BD                                     ** //
        // ***************************************************************************************** //
        if UTI_CN_Cerrar( var_SQLTransaction,
                          var_SQLConnector ) = False then UTI_GEN_Salir;

        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    Except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Error al actualizar el número de factura de compras a ' +
                               Trim(param_Numero_Factura) +
                               ' a la empresa ' +
                               Trim(param_id_empresas),
                               error );
            try
                var_SQL.Free;
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;

            Result := false
        end;
    end;
end;

function UTI_COMPRAS_Devolver_Numeracion_Abono( param_msg : TStrings;
                                                param_Registro_Empresa : TEmpresas;
                                                param_DESbloqueamos_empresa,
                                                param_Save_Next : Boolean ) : TEmpresas;
var var_Next_Abono : Integer;
begin
    // ********************************************************************************************* //
    // ** Lo primero es traer la próxima numeración. Esto lo trae de la empresa.                  ** //
    // ** Pero antes tengo que comprobar que nadie esté bloqueando el registro de la empresa, pues** //
    // ** este entre otras cosas lleva la numeración y así controlo que nadie cree al mismo tiempo** //
    // ********************************************************************************************* //
    if UTI_RGTRO_isLock( 'empresas',
                         param_Registro_Empresa.id,
                         true ) = true then
    begin
        // ***************************************************************************************** //
        // ** El registro ya está bloqueado por lo que no continuamos                             ** //
        // ***************************************************************************************** //
        param_msg.Add( '* El registro de la empresa ahora mismo alguien lo está bloqueando,' +
                       ' por lo que no se pueden crear facturas' );
        Exit;
    end else begin
        if UTI_RGTRO_Lock( 'empresas',
                           param_Registro_Empresa.id ) = false then
        begin
            // ************************************************************************************* //
            // ** NO SE PUDO BLOQUEAR, ASI QUE NO CONTINUAMOS                                     ** //
            // ************************************************************************************* //
            param_msg.Add( '* El registro de la empresa no se pudo bloquear,' +
                           ' por lo que no se pueden crear abonos' );
            Exit;
        end else begin
            // ************************************************************************************* //
            // ** REGISTRO DE EMPRESA BLOQUEADO, continuamos con la creación de las facturas      ** //
            // ************************************************************************************* //
           param_Registro_Empresa := UTI_DATOS_TABLA_Traer_Empresas_xID( Trim(param_Registro_Empresa.id) );

         { if (Trim(param_Registro_Empresa.Serie_Factura) = '')  or
              (Trim(param_Registro_Empresa.Numero_Factura) = '') then }
           if Trim(param_Registro_Empresa.Numero_Abono) = '' then
           begin
               param_msg.Add( '* A la empresa ' +
                              Trim(param_Registro_Empresa.nombre_comercial) +
                              ' le falta configurar la numeración para sus próximos abonos de compras,' +
                              ' por lo que no se puede crear el nuevo abono.' );

               // ********************************************************************************** //
               // ** Libero el registro de empresas porque esta funcion lo habia bloqueado        ** //
               // ********************************************************************************** //
               UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );

               Exit;
           end else begin
               // ********************************************************************************** //
               // ** Ya conozco la próxima factura y está guardado en:                            ** //
               // ** param_Registro_Empresa.Serie_Factura                                         ** //
               // ** param_Registro_Empresa.Numero_Factura                                        ** //
               // ********************************************************************************** //

               if param_Save_Next = true then
               begin
                   // ****************************************************************************** //
                   // ** Actualizamos el registro de la empresa al siguiente número de empresa    ** //
                   // ****************************************************************************** //
                   var_Next_Abono := StrToInt( Trim(param_Registro_Empresa.Numero_Abono_Compras) ) + 1;

                   if UTI_COMPRAS_Update_Next_No_Abono( param_Registro_Empresa.id,
                                                        IntToStr(var_Next_Abono) ) = false then
                   begin
                       param_msg.Add( '* No se pudo actualizar el próximo número de abono a crear' +
                                      ', por lo que no podemos continuar con la creación de la ' +
                                      'cabecera del abono.' +
                                      Trim(param_Registro_Empresa.Serie_Abono) + '/' +
                                      Trim(param_Registro_Empresa.Numero_Abono) );
                       Exit;
                   end;
               end;

               // ********************************************************************************** //
               // ** Sólo libero el rgtro.de empresas si param_DESbloqueamos_empresa = true       ** //
               // ********************************************************************************** //
               if param_DESbloqueamos_empresa = true then
               begin
                   UTI_RGTRO_UnLock( 'empresas', param_Registro_Empresa.id );
               end;

               // ********************************************************************************** //
               // ** No se produjo ningún error durante la grabación de la próxima factura y del  ** //
               // ** registro de la empresa, por lo que devolvemos el registro de la empresa      ** //
               // ********************************************************************************** //
               Result := param_Registro_Empresa;
               Exit;
           end;
        end;
    end;
end;

function UTI_COMPRAS_Update_Next_No_Abono( param_id_empresas,
                                           param_Numero_Abono : ShortString ) : Boolean;
var var_SQL            : TStrings;
    var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    Result := true;

    Try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = False then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** CREAMOS LA SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQL := TStringList.Create;

        var_SQL.Add( 'UPDATE empresas' );
        var_SQL.Add(    'SET Numero_Abono_Compras = ' + Trim(param_Numero_Abono) );
        var_SQL.Add(  'WHERE id = ' + Trim(param_id_empresas) );

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y Ejecutamos la sql                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);

        var_SQLQuery.Database := var_SQLConnector;
        var_SQLQuery.SQL.Text := var_SQL.Text;

        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Update_Next_No_Abono';

        var_SQLQuery.ExecSQL;
        var_SQLTransaction.Commit;

        // ***************************************************************************************** //
        // ** Destruimos el SQLQuery la SQL creada                                                ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQL.Free;

        // ***************************************************************************************** //
        // ** Cerramos La transacción y la conexión con la BD                                     ** //
        // ***************************************************************************************** //
        if UTI_CN_Cerrar( var_SQLTransaction,
                          var_SQLConnector ) = False then UTI_GEN_Salir;

        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    Except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Error al actualizar el número de abono de compras a ' +
                               Trim(param_Numero_Abono) +
                               ' a la empresa ' +
                               Trim(param_id_empresas),
                               error );
            try
                var_SQL.Free;
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;

            Result := false
        end;
    end;
end;

function UTI_COMPRAS_Esta_Ftra_Tiene_Albaranes( param_id_facturas : ShortString ) : String;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    if Trim(param_id_facturas) = '' then
    begin
        // ***************************************************************************************** //
        // ** Probablemente nos han mandado una id vacía porque se trata de una insert y todavía  ** //
        // ** no sabemos cual es la id. Pero lo que si que vamos a devolver es 0 = no cartera     ** //
        // ** Y no pasamos por la sql de abajo porque daría un error                              ** //
        // ***************************************************************************************** //
        Result := '0';
        Exit;
    end;

    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Esta_Ftra_Tiene_Albaranes';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'SELECT COUNT(*) as Existe' );
        var_SQLQuery.SQL.Add( 'FROM facturas_compras_detalles' );

        var_SQLQuery.SQL.Add( 'WHERE id_facturas = ' + Trim(param_id_facturas) );
        var_SQLQuery.SQL.Add(   'AND NOT Numero_Albaran IS NULL' );

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add(  'ORDER BY id_facturas ASC, id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe ninguna compra todavia                            ** //
        // ***************************************************************************************** //
        with var_SQLQuery do
        begin
            Result := FieldByName('Existe').AsString;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            Result := '0'; // No encontremos este registro

            UTI_GEN_Error_Log( 'Ocurrió un error al intentar ver si existen ALBARANES para ' +
                               'la factura de compras con la id ' + Trim(param_id_facturas) + '. ' +
                               'La tabla ha sido ' + var_SQLQuery.Name +
                               ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

end.

{
function UTI_COMPRAS_Tiene_Recibos_compras( param_id_facturas : ShortString ) : String;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
begin
    if Trim(param_id_facturas) = '' then
    begin
        // ***************************************************************************************** //
        // ** Probablemente nos han mandado una id vacía porque se trata de una insert y todavía  ** //
        // ** no sabemos cual es la id. Pero lo que si que vamos a devolver es 0 = no cartera     ** //
        // ** Y no pasamos por la sql de abajo porque daría un error                              ** //
        // ***************************************************************************************** //
        Result := '0';
        Exit;
    end;

    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_COMPRAS_Tiene_Recibos_compras';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'SELECT count(*) as Existe' );
        var_SQLQuery.SQL.Add(   'FROM facturas_cobros_pagos' );
        var_SQLQuery.SQL.Add(  'WHERE id_facturas = ' + Trim(param_id_facturas) );
        var_SQLQuery.SQL.Add(    'AND NOT id_proveedores IS NULL' );

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add(  'ORDER BY id_facturas ASC, id_proveedores, id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe ninguna compra todavia                            ** //
        // ***************************************************************************************** //
        with var_SQLQuery do
        begin
            Result := FieldByName('Existe').AsString;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            Result := '0'; // No encontremos este registro

            UTI_GEN_Error_Log( 'Ocurrió un error al intentar ver si existen recibos de compras para ' +
                               'la factura con la id ' + Trim(param_id_facturas) + '. ' +
                               'La tabla ha sido ' + var_SQLQuery.Name +
                               ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

}
