unit utilidades_datos_tablas;

{$mode objfpc}{$H+}

interface

uses
  Classes, Forms, sqldb, SysUtils, utilidades_bd, utilidades_general;

type
    TPersonal = record
        id                               : ShortString;
        id_Empleado_de                   : ShortString;
        nombre                           : ShortString;
        id_personal_familias             : ShortString;
        nif_cif                          : ShortString;
        nif_cif_caducidad                : ShortString;
        Fecha_Nacimiento                 : ShortString;
        Tfno_Fijo_1                      : ShortString;
        Tfno_Fijo_2                      : ShortString;
        FAX                              : ShortString;
        Movil                            : ShortString;
        eMail                            : ShortString;
        Direccion                        : ShortString;
        Direccion_Numero                 : ShortString;
        Direccion_Piso_Letra             : ShortString;
        Codigo_Postal                    : ShortString;
        id_poblaciones                   : ShortString;
        id_provincias                    : ShortString;
        id_paises                        : ShortString;
        Cta_Bco_Entidad                  : ShortString;
        Cta_Bco_Sucursal                 : ShortString;
        Cta_Bco_Digito_Control           : ShortString;
        Cta_Bco_Cuenta                   : ShortString;
        Cta_Bco_IBAN                     : ShortString;
        Cta_Bco_BIC_SWIFT                : ShortString;
        Cta_Bco_Mandato_Fecha_de_Firma   : ShortString;
        Cta_Bco_Mandato_Ref              : ShortString;
        Cta_Bco_Direccion                : ShortString;
        Cta_Bco_Direccion_Numero         : ShortString;
        Cta_Bco_Direccion_Piso_Letra     : ShortString;
        Cta_Bco_Codigo_Postal            : ShortString;
        id_Cta_Bco_poblaciones           : ShortString;
        id_Cta_Bco_provincias            : ShortString;
        id_Cta_Bco_pais                  : ShortString;
        Activar_Proximidad_SN            : ShortString;
        Cuenta_Contable                  : ShortString;
        Observaciones_Comentarios        : ShortString;
        Comision                         : ShortString;
        Controlar_su_Presencia           : ShortString;
        Seguridad_Social                 : ShortString;

        Insert_WHEN                      : ShortString;
        Insert_Id_User                   : ShortString;
        Del_WHEN                         : ShortString;
        Del_Id_User                      : ShortString;
        Del_WHY                          : ShortString;
        Change_WHEN                      : ShortString;
        Change_Id_User                   : ShortString;

        OT_Descripcion_Personal_Familias : ShortString;
        OT_Cuenta_Contable_Personal_tipo : ShortString;
        OT_Descripcion_Empleado_De       : ShortString;
        OT_descripcion_poblacion         : ShortString;
        OT_descripcion_provincia         : ShortString;
        OT_descripcion_pais              : ShortString;
        OT_Cta_Bco_descripcion_poblacion : ShortString;
        OT_Cta_Bco_descripcion_provincia : ShortString;
        OT_Cta_Bco_descripcion_pais      : ShortString;
    end;

type
    TRepresentantes = record
        id                               : String;
        nombre_propietario               : String;
        nombre_comercial                 : String;
        nif_cif                          : String;
        Fecha_Nacimiento                 : String;
        Tfno_Fijo_1                      : String;
        Tfno_Fijo_2                      : String;
        FAX                              : String;
        Movil                            : String;
        eMail                            : String;
        pagina_web                       : String;
        Direccion                        : String;
        Direccion_Numero                 : String;
        Direccion_Piso_Letra             : String;
        Codigo_Postal                    : String;
        id_poblaciones                   : String;
        id_provincias                    : String;
        id_paises                        : String;
        Cta_Bco_Entidad                  : String;
        Cta_Bco_Sucursal                 : String;
        Cta_Bco_Digito_Control           : String;
        Cta_Bco_Cuenta                   : String;
        Cta_Bco_IBAN                     : String;
        Cta_Bco_BIC_SWIFT                : String;
        Cta_Bco_Mandato_Fecha_de_Firma   : String;
        Cta_Bco_Mandato_Ref              : String;
        Cta_Bco_Direccion                : String;
        Cta_Bco_Direccion_Numero         : String;
        Cta_Bco_Direccion_Piso_Letra     : String;
        Cta_Bco_Codigo_Postal            : String;
        id_Cta_Bco_poblaciones           : String;
        id_Cta_Bco_provincias            : String;
        id_Cta_Bco_pais                  : String;
        id_formas_pago                   : String;
        Forma_pago_Dia_1                 : String;
        Forma_pago_Dia_2                 : String;
        Vencimientos_automaticos_SN      : String;
        Forma_pago_Vacaciones_Dia_Inicio : String;
        Forma_pago_Vacaciones_Mes_Inicio : String;
        Forma_pago_Vacaciones_Dia_Fin    : String;
        Forma_pago_Vacaciones_Mes_Fin    : String;
        IVA_con_Recargo_SN               : String;
        IVA_Excluido_SN                  : String;
        Comision                         : String;
        Retencion                        : String;
        Saldo_Acumulado                  : String;
        Activar_Proximidad_SN            : String;
        Cuenta_Contable                  : String;
        Observaciones_Comentarios        : String;

        Insert_WHEN                      : ShortString;
        Insert_Id_User                   : ShortString;
        Del_WHEN                         : ShortString;
        Del_Id_User                      : ShortString;
        Del_WHY                          : String;
        Change_WHEN                      : ShortString;
        Change_Id_User                   : ShortString;

        OT_descripcion_poblacion         : String;
        OT_descripcion_provincia         : String;
        OT_descripcion_pais              : String;
        OT_Cta_Bco_descripcion_poblacion : String;
        OT_Cta_Bco_descripcion_provincia : String;
        OT_Cta_Bco_descripcion_pais      : String;
        OT_descripcion_forma_pago        : String;
        OT_Vencimientos_Cantidad         : ShortString;
        OT_Vencimientos_1_Dias           : ShortString;
        OT_Vencimientos_Dias_Entre       : ShortString;
    end;

type
    Tarticulos_familias = record
        id                                              : String;
        descripcion                                     : String;
        id_articulos_familias                           : String;
        id_grupos_cocina                                : String;
        id_impresoras                                   : String;
        Cuenta_Contable_Ventas                          : String;
        Cuenta_Contable_Compras                         : String;
        Visualizar_en_terminales_SN                     : String;
        Ventas_por_peso_SN                              : String;
        Comision                                        : String;
        Minimo_Variacion_Actualizar_en_tanto_por_ciento : String;

        Insert_WHEN                                     : ShortString;
        Insert_Id_User                                  : ShortString;
        Del_WHEN                                        : ShortString;
        Del_Id_User                                     : ShortString;
        Del_WHY                                         : String;
        Change_WHEN                                     : ShortString;
        Change_Id_User                                  : ShortString;

        OT_descripcion_grupo_cocina                     : ShortString;
        OT_descripcion_impresora_comandas               : ShortString;
        OT_descripcion_familia_superior                 : ShortString;
    end;

type
    TArticulos_Tarifas = record
        id                          : String;
        id_articulos                : String;
        id_tarifas                  : String;
        Importe_Neto                : String;
        Importe_Impuestos_Incluidos : String;
        Descuento                   : String;

        Insert_WHEN                 : ShortString;
        Insert_Id_User              : ShortString;
        Del_WHEN                    : ShortString;
        Del_Id_User                 : ShortString;
        Del_WHY                     : String;
        Change_WHEN                 : ShortString;
        Change_Id_User              : ShortString;

        OT_descripcion_tarifa       : String;
    end;

type
    TUsers = record
        id                        : String;

        Descripcion_Nick          : String;
        Id_Empleados              : ShortString;
        Permiso_Total_SN          : ShortString;
        Tipo                      : ShortString;

        Insert_WHEN               : ShortString;
        Insert_Id_User            : ShortString;
        Del_WHEN                  : ShortString;
        Del_Id_User               : ShortString;
        Del_WHY                   : String;
        Change_WHEN               : ShortString;
        Change_Id_User            : ShortString;
    end;

type
    TRegistro_CRUD = record
        Delete_SQL   : String;
        Update_SQL   : String;
        Insert_SQL   : String;
        SELECT_SQL   : String;
        name_tabla : ShortString;
    end;

type
    TClientes_Envios = record
        id                       : String;
        id_clientes              : ShortString;
        id_clientes_contactos    : ShortString;
        Direccion                : ShortString;
        Direccion_Numero         : ShortString;
        Direccion_Piso_Letra     : ShortString;
        Codigo_Postal            : ShortString;
        id_poblaciones           : ShortString;
        id_provincias            : ShortString;
        id_paises                : ShortString;
        Tfno_Fijo_1              : ShortString;
        Tfno_Fijo_2              : ShortString;
        FAX                      : ShortString;
        Movil                    : ShortString;
        eMail                    : ShortString;
        Portes_Pagados_SN        : ShortString;

        Insert_WHEN              : ShortString;
        Insert_Id_User           : ShortString;
        Del_WHEN                 : ShortString;
        Del_Id_User              : ShortString;
        Del_WHY                  : ShortString;
        Change_WHEN              : ShortString;
        Change_Id_User           : ShortString;

        OT_descripcion_poblacion : ShortString;
        OT_descripcion_provincia : ShortString;
        OT_descripcion_pais      : ShortString;
        OT_descripcion_Contacto  : ShortString;
    end;

type
    TClientes_Contactos = record
        id               : String;
        id_clientes      : ShortString;
        nombre           : ShortString;
        nif_cif          : ShortString;
        Fecha_Nacimiento : ShortString;
        Tfno_Fijo_1      : ShortString;
        Tfno_Fijo_2      : ShortString;
        FAX              : ShortString;
        Movil            : ShortString;
        eMail            : ShortString;
        pagina_web       : ShortString;
        Cargo_Puesto     : ShortString;

        Insert_WHEN      : ShortString;
        Insert_Id_User   : ShortString;
        Del_WHEN         : ShortString;
        Del_Id_User      : ShortString;
        Del_WHY          : ShortString;
        Change_WHEN      : ShortString;
        Change_Id_User   : ShortString;
    end;

type
    TProveedores_Contactos = record
        id               : String;
        id_proveedores   : ShortString;
        nombre           : ShortString;
        nif_cif          : ShortString;
        Fecha_Nacimiento : ShortString;
        Tfno_Fijo_1      : ShortString;
        Tfno_Fijo_2      : ShortString;
        FAX              : ShortString;
        Movil            : ShortString;
        eMail            : ShortString;
        pagina_web       : ShortString;
        Cargo_Puesto     : ShortString;

        Insert_WHEN      : ShortString;
        Insert_Id_User   : ShortString;
        Del_WHEN         : ShortString;
        Del_Id_User      : ShortString;
        Del_WHY          : ShortString;
        Change_WHEN      : ShortString;
        Change_Id_User   : ShortString;
    end;

type
    TClientes = record
        id                                : String;
        nombre_propietario                : ShortString;
        nombre_comercial                  : ShortString;
        nif_cif                           : ShortString;
        Fecha_Nacimiento                  : ShortString;
        Tfno_Fijo_1                       : ShortString;
        Tfno_Fijo_2                       : ShortString;
        FAX                               : ShortString;
        Movil                             : ShortString;
        eMail                             : ShortString;
        pagina_web                        : ShortString;
        Direccion                         : ShortString;
        Direccion_Numero                  : ShortString;
        Direccion_Piso_Letra              : ShortString;
        Codigo_Postal                     : ShortString;
        id_poblaciones                    : ShortString;
        id_provincias                     : ShortString;
        id_paises                         : ShortString;
        id_clientes_tipos                 : ShortString;
        Cta_Bco_Entidad                   : ShortString;
        Cta_Bco_Sucursal                  : ShortString;
        Cta_Bco_Digito_Control            : ShortString;
        Cta_Bco_Cuenta                    : ShortString;
        Cta_Bco_IBAN                      : ShortString;
        Cta_Bco_BIC_SWIFT                 : ShortString;
        Cta_Bco_Mandato_Fecha_de_Firma    : ShortString;
        Cta_Bco_Mandato_Ref               : ShortString;
        Cta_Bco_Direccion                 : ShortString;
        Cta_Bco_Direccion_Numero          : ShortString;
        Cta_Bco_Direccion_Piso_Letra      : ShortString;
        Cta_Bco_Codigo_Postal             : ShortString;
        id_Cta_Bco_poblaciones            : ShortString;
        id_Cta_Bco_provincias             : ShortString;
        id_Cta_Bco_pais                   : ShortString;
        id_formas_pago                    : ShortString;
        Forma_pago_Dia_1                  : ShortString;
        Forma_pago_Dia_2                  : ShortString;
        Vencimientos_automaticos_SN       : ShortString;
        Forma_pago_Vacaciones_Dia_Inicio  : ShortString;
        Forma_pago_Vacaciones_Mes_Inicio  : ShortString;
        Forma_pago_Vacaciones_Dia_Fin     : ShortString;
        Forma_pago_Vacaciones_Mes_Fin     : ShortString;
        IVA_con_Recargo_SN                : ShortString;
        IVA_Excluido_SN                   : ShortString;
        id_tarifas                        : ShortString;
        Descuento_Comercial_1             : ShortString;
        Descuento_Comercial_2             : ShortString;
        Descuento_Pronto_Pago             : ShortString;
        Descuento_Final                   : ShortString;
        Retencion                         : ShortString;
        Riesgo_Autorizado                 : ShortString;
        Riesgo_Acumulado                  : ShortString;
        Agrupar_Albaranes_SN              : ShortString;
        Activar_Proximidad_SN             : ShortString;
        Cuenta_Contable                   : ShortString;
        id_Agencias_Transporte            : ShortString;
        Portes_Pagados_SN                 : ShortString;
        id_Representantes                 : ShortString;
        Observaciones_Comentarios         : ShortString;
        Estudia_SN                        : ShortString;
        Trabaja_SN                        : ShortString;
        Estudios_Trabajos                 : ShortString;
        Cantidad_Hermanos                 : ShortString;
	id_rutas                          : ShortString;
	id_actividades                    : ShortString;

        Insert_WHEN                       : ShortString;
        Insert_Id_User                    : ShortString;
        Del_WHEN                          : ShortString;
        Del_Id_User                       : ShortString;
        Del_WHY                           : ShortString;
        Change_WHEN                       : ShortString;
        Change_Id_User                    : ShortString;

        OT_descripcion_actividad          : ShortString;
        OT_descripcion_ruta               : ShortString;
        OT_descripcion_poblacion          : ShortString;
        OT_descripcion_provincia          : ShortString;
        OT_descripcion_pais               : ShortString;
        OT_descripcion_cliente_tipo       : ShortString;
        OT_Cuenta_Contable_cliente_tipo   : ShortString;
        OT_Cta_Bco_descripcion_poblacion  : ShortString;
        OT_Cta_Bco_descripcion_provincia  : ShortString;
        OT_Cta_Bco_descripcion_pais       : ShortString;
        OT_descripcion_forma_pago         : ShortString;
        OT_Vencimientos_Cantidad          : ShortString;
        OT_Vencimientos_1_Dias            : ShortString;
        OT_Vencimientos_Dias_Entre        : ShortString;
        OT_descripcion_tarifa             : ShortString;
        OT_descripcion_agencia_transporte : ShortString;
        OT_Tfno_Fijo_1_agencia_transporte : ShortString;
        OT_Movil_agencia_transporte       : ShortString;
        OT_descripcion_representante      : ShortString;
        OT_Tfno_Fijo_1_representante      : ShortString;
        OT_Movil_representante            : ShortString;
    end;

type
    TProveedores = record
        id                                : String;
        nombre_propietario                : ShortString;
        nombre_comercial                  : ShortString;
        nif_cif                           : ShortString;
        Tfno_Fijo_1                       : ShortString;
        Tfno_Fijo_2                       : ShortString;
        FAX                               : ShortString;
        Movil                             : ShortString;
        eMail                             : ShortString;
        pagina_web                        : ShortString;
        Direccion                         : ShortString;
        Direccion_Numero                  : ShortString;
        Direccion_Piso_Letra              : ShortString;
        Codigo_Postal                     : ShortString;
        id_poblaciones                    : ShortString;
        id_provincias                     : ShortString;
        id_paises                         : ShortString;
        id_proveedores_tipos              : ShortString;
        Cta_Bco_Entidad                   : ShortString;
        Cta_Bco_Sucursal                  : ShortString;
        Cta_Bco_Digito_Control            : ShortString;
        Cta_Bco_Cuenta                    : ShortString;
        Cta_Bco_IBAN                      : ShortString;
        Cta_Bco_BIC_SWIFT                 : ShortString;
        Cta_Bco_Mandato_Fecha_de_Firma    : ShortString;
        Cta_Bco_Mandato_Ref               : ShortString;
        Cta_Bco_Direccion                 : ShortString;
        Cta_Bco_Direccion_Numero          : ShortString;
        Cta_Bco_Direccion_Piso_Letra      : ShortString;
        Cta_Bco_Codigo_Postal             : ShortString;
        id_Cta_Bco_poblaciones            : ShortString;
        id_Cta_Bco_provincias             : ShortString;
        id_Cta_Bco_pais                   : ShortString;
        id_formas_pago                    : ShortString;
        Forma_pago_Dia_1                  : ShortString;
        Forma_pago_Dia_2                  : ShortString;
        Vencimientos_automaticos_SN       : ShortString;
        Forma_pago_Vacaciones_Dia_Inicio  : ShortString;
        Forma_pago_Vacaciones_Mes_Inicio  : ShortString;
        Forma_pago_Vacaciones_Dia_Fin     : ShortString;
        Forma_pago_Vacaciones_Mes_Fin     : ShortString;
        IVA_con_Recargo_SN                : ShortString;
        IVA_Excluido_SN                   : ShortString;
        Descuento_Linea                   : ShortString;
        Descuento_Comercial_1             : ShortString;
        Descuento_Comercial_2             : ShortString;
        Descuento_Pronto_Pago             : ShortString;
        Descuento_Final                   : ShortString;
        Retencion                         : ShortString;
        Cuenta_Contable                   : ShortString;
        id_Agencias_Transporte            : ShortString;
        Observaciones_Comentarios         : ShortString;

        Insert_WHEN                       : ShortString;
        Insert_Id_User                    : ShortString;
        Del_WHEN                          : ShortString;
        Del_Id_User                       : ShortString;
        Del_WHY                           : String;
        Change_WHEN                       : ShortString;
        Change_Id_User                    : ShortString;

        OT_descripcion_poblacion          : ShortString;
        OT_descripcion_provincia          : ShortString;
        OT_descripcion_pais               : ShortString;

        OT_descripcion_proveedor_tipo     : ShortString;
        OT_Cuenta_Contable_proveedor_tipo : ShortString;

        OT_Cta_Bco_descripcion_poblacion  : ShortString;
        OT_Cta_Bco_descripcion_provincia  : ShortString;
        OT_Cta_Bco_descripcion_pais       : ShortString;

        OT_descripcion_forma_pago         : ShortString;
        OT_Vencimientos_Cantidad          : ShortString;
        OT_Vencimientos_1_Dias            : ShortString;
        OT_Vencimientos_Dias_Entre        : ShortString;

        OT_descripcion_agencia_transporte : ShortString;
        OT_Tfno_Fijo_1_agencia_transporte : ShortString;
        OT_Movil_agencia_transporte       : ShortString;
    end;

type
    TConfiguracion = record
        id                                                    : String;
        descripcion                                           : ShortString;
        Guardar_Cambios_de_Registros_SN                       : ShortString;
        Trabajar_Grupos_Cocina_SN                             : ShortString;
        Trabajar_Albaranes_con_Vehiculos_SN                   : ShortString;
        Tipo_Clientes_Obligar_Cuenta_Contable_SN              : ShortString;
        Clientes_Obligar_NIF_SN                               : ShortString;
        Clientes_Obligar_Cuenta_Contable_SN                   : ShortString;
        Representantes_Obligar_NIF_SN                         : ShortString;
        Representantes_Obligar_Cuenta_Contable_SN             : ShortString;
        Tipo_Proveedores_Obligar_Cuenta_Contable_SN           : ShortString;
        Proveedores_Obligar_NIF_SN                            : ShortString;
        Proveedores_Obligar_Cuenta_Contable_SN                : ShortString;
        Articulos_Familias_Ventas_Obligar_Cuenta_Contable_SN  : ShortString;
        Articulos_Familias_Compras_Obligar_Cuenta_Contable_SN : ShortString;
        Articulos_Ventas_Obligar_Cuenta_Contable_SN           : ShortString;
        Articulos_Compras_Obligar_Cuenta_Contable_SN          : ShortString;
        Impuestos_Obligar_Cuenta_Contable_SN                  : ShortString;
        Personal_Familias_Obligar_Cuenta_Contable_SN          : ShortString;
        Personal_Obligar_Cuenta_Contable_SN                   : ShortString;
        Personal_Obligar_NIF_SN                               : ShortString;
        Ctas_pagos_cobros_Obligar_Cuenta_Contable_SN          : ShortString;
        Modulo_Profesorado_Activo_SN                          : ShortString;
        Bancos_Cuenta_Contable_SN                             : ShortString;
        Clientes_Obligar_Tipo_Cliente_SN                      : ShortString;
        Clientes_Obligar_Ruta_SN                              : ShortString;
        Clientes_Obligar_Actividad_SN                         : ShortString;
        Clientes_Obligar_FormaPago_SN                         : ShortString;
        Clientes_Obligar_Tarifa_SN                            : ShortString;
        Albaranes_Obligar_Almacen_SN                          : ShortString;
        Facturas_Permitir_Borrar_SN                           : ShortString;

        Insert_WHEN                                           : ShortString;
        Insert_Id_User                                        : ShortString;
        Del_WHEN                                              : ShortString;
        Del_Id_User                                           : ShortString;
        Del_WHY                                               : String;
        Change_WHEN                                           : ShortString;
        Change_Id_User                                        : ShortString;
    end;

type
    TAlmacenes = record
        id                   : String;

        descripcion          : String;
        Responsable          : String;
        Direccion            : String;
        Direccion_Numero     : String;
        Direccion_Piso_Letra : String;
        Codigo_Postal        : String;
        id_poblaciones       : String;
        id_provincias        : String;
        id_paises            : String;
        Tfno_Fijo_1          : String;
        Tfno_Fijo_2          : String;
        FAX                  : String;
        Movil                : String;
        eMail                : String;
        id_empresas          : String;

        Insert_WHEN          : ShortString;
        Insert_Id_User       : ShortString;
        Del_WHEN             : ShortString;
        Del_Id_User          : ShortString;
        Del_WHY              : String;
        Change_WHEN          : ShortString;
        Change_Id_User       : ShortString;
    end;

type
    TEmpresas = record
        id                         : String;
        nombre_comercial           : ShortString;
        Responsable                : ShortString;
        nif_cif                    : ShortString;
        Tfno_Fijo_1                : ShortString;
        Tfno_Fijo_2                : ShortString;
        FAX                        : ShortString;
        Movil                      : ShortString;
        eMail                      : ShortString;
        pagina_web                 : ShortString;
        Direccion                  : ShortString;
        Direccion_Numero           : ShortString;
        Direccion_Piso_Letra       : ShortString;
        Codigo_Postal              : ShortString;
        id_poblaciones             : ShortString;
        id_provincias              : ShortString;
        id_paises                  : ShortString;
        Observaciones_Comentarios  : String;

        Serie_Presupuesto          : ShortString;
        Numero_Presupuesto         : ShortString;

        Serie_Pedido               : ShortString;
        Numero_Pedido              : ShortString;

        Serie_Albaran              : ShortString;
        Numero_Albaran             : ShortString;

        Serie_Factura              : ShortString;
        Numero_Factura             : ShortString;

        Serie_Abono                : ShortString;
        Numero_Abono               : ShortString;

        Serie_Presupuesto_Compras  : ShortString;
        Numero_Presupuesto_Compras : ShortString;

        Serie_Pedido_Compras       : ShortString;
        Numero_Pedido_Compras      : ShortString;

        Serie_Albaran_Compras      : ShortString;
        Numero_Albaran_Compras     : ShortString;

        Serie_Factura_Compras      : ShortString;
        Numero_Factura_Compras     : ShortString;

        Serie_Abono_Compras        : ShortString;
        Numero_Abono_Compras       : ShortString;

        Insert_WHEN                : ShortString;
        Insert_Id_User             : ShortString;
        Del_WHEN                   : ShortString;
        Del_Id_User                : ShortString;
        Del_WHY                    : String;
        Change_WHEN                : ShortString;
        Change_Id_User             : ShortString;

        OT_descripcion_poblacion   : ShortString;
        OT_descripcion_provincia   : ShortString;
        OT_descripcion_pais        : ShortString;
    end;

type
    Timpuestos = record
        id                       : String;
    	descripcion              : ShortString;
    	Cuenta_Contable          : ShortString;
    	Sumado_A_Ftra_SN         : ShortString;
    	Tanto_Por_Ciento         : ShortString;

        Insert_WHEN              : ShortString;
        Insert_Id_User           : ShortString;
        Del_WHEN                 : ShortString;
        Del_Id_User              : ShortString;
        Del_WHY                  : String;
        Change_WHEN              : ShortString;
        Change_Id_User           : ShortString;
    end;

type
    TArticulos = record
        id                                              : String;
        descripcion                                     : String;
        descripcion_para_TPV                            : String;
        id_articulos_familias                           : ShortString;
        Combinado                                       : ShortString;
        id_proveedores                                  : ShortString;
        id_grupos_cocina                                : ShortString;
        id_impresoras                                   : ShortString;
        id_impuestos_Ventas                             : ShortString;
        id_impuestos_Compras                            : ShortString;
        Visualizar_en_terminales_SN                     : ShortString;
        Articulo_Compuesto_SN                           : ShortString;
        Activar_Proporciones_SN                         : ShortString;
        Agregar_a_Favoritos_SN                          : ShortString;
        Pedir_precio_venta_SN                           : ShortString;
        Venta_por_peso_SN                               : ShortString;
        Tipo_de_articulo                                : ShortString;
        Tiempo_asignado                                 : ShortString;
        PVP                                             : ShortString;
        PVP_Impuestos_Incluidos                         : ShortString;
        Comision                                        : ShortString;
        Minimo_Variacion_Actualizar_en_tanto_por_ciento : ShortString;
        Cuenta_Contable_Ventas                          : ShortString;
        Cuenta_Contable_Compras                         : ShortString;
        Cubicaje_Peso                                   : ShortString;
        Cubicaje_Volumen                                : ShortString;
        Repetir_Cada                                    : ShortString;

        Insert_WHEN                                     : ShortString;
        Insert_Id_User                                  : ShortString;
        Del_WHEN                                        : ShortString;
        Del_Id_User                                     : ShortString;
        Del_WHY                                         : String;
        Change_WHEN                                     : ShortString;
        Change_Id_User                                  : ShortString;

        OT_descripcion_impto_ventas                     : String;
        OT_descripcion_impto_compras                    : String;
        OT_descripcion_proveedor                        : String;

        OT_descripcion_grupo_cocina                     : String;
        OT_descripcion_impresora_comandas               : String;

        OT_descripcion_familia                          : String;
    end;

type
    Talbaranes_ventas_detalles = record
        id                      : String;
        id_albaranes            : ShortString;
        Fecha_Movimiento        : ShortString;
        id_clientes             : ShortString;
        Unidades                : ShortString;
        id_almacenes            : ShortString;
        id_articulos            : ShortString;
        Repetir_Cada            : ShortString;
        descripcion             : String;
        descripcion_para_TPV    : ShortString;
        PVP                     : ShortString;
        id_impuestos_Ventas     : ShortString;
        Descuento_Comercial_1   : ShortString;
        Descuento_Comercial_2   : ShortString;
        Excluido_su_Cobro_SN    : ShortString;

        Insert_WHEN             : ShortString;
        Insert_Id_User          : ShortString;
        Del_WHEN                : ShortString;
        Del_Id_User             : ShortString;
        Del_WHY                 : String;
        Change_WHEN             : ShortString;
        Change_Id_User          : ShortString;

        OT_descripcion_almacen  : ShortString;
        OT_descripcion_articulo : ShortString;
        OT_descripcion_impuesto : ShortString;
    end;

    function  UTI_DATOS_TABLA_Rellenar_SQL( p_SQLQuery : TSQLQuery; p_nombre_tabla, p_opcion : String ) : String;
    function  UTI_DATOS_TABLA_SeCambioAlgoEnRgtro( p_SQLQuery : TSQLQuery ) : Boolean;

    function  UTI_DATOS_TABLA_servicios_regulares_CRUD( param_SQLQuery : TSQLQuery; p_desde_fecha, p_hasta_fecha : String ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_series_servicios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_cobros_pagos_CRUD( param_SQLQuery : TSQLQuery; param_Clientes_o_Proveedores : ShortString ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Presup_Compras_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Presup_Ventas_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Pdo_Compras_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Pdo_Ventas_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Alb_Compras_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Alb_Ventas_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Ftras_Compras_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Listado_Ftras_Ventas_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_compras_detalles_CRUD( param_SQLQuery : TSQLQuery; param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery; param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_ventas_detalles_Stock_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_ventas_borradas_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_compras_borradas_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_compras_detalles_CRUD( param_SQLQuery : TSQLQuery; param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery; param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_ventas_detalles_Stock_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_albaranes_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_compras_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_presupuestos_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_compras_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_ventas_detalles_Stock_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_pedidos_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_su_equipamiento_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_tipo_ruedas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_marcas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_tipo_cambios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_vehiculos_equipamientos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_tarjetas_transporte_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_combustibles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Informes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Peliculas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_users_row_changes_fields_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_users_row_changes_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_medio_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_users_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_users_menus_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_users_passwords_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_users_menus_permissions_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_menus_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_clientes_envios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_clientes_contactos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_clientes_periodos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_clientes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_utilidades_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_paises_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_clientes_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_formas_pago_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_margenes_tarifas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_tarifas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_provincias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_poblaciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_representantes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_proveedores_contactos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_tarifas_margenes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_proveedores_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_proveedores_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Articulos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_referencias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_Sub_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_familias_tarifas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_familias_terminales_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_composiciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_tarifas_CRUD(param_SQLQuery : TSQLQuery; param_precio_coste : String) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_terminales_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_stock_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_proporciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_proporciones_tarifas_CRUD( param_SQLQuery : TSQLQuery; param_precio_coste : String ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_ofertas_articulos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_ofertas_dto_por_volumen_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_articulos_ofertas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_elegir_familia_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_terminales_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Elegir_Cliente_Contacto_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Elegir_Cliente_Direccion_Envio_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Elegir_Proveedor_Contacto_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_impresoras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_impuestos_composiciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_servicios_regulares_periodos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_servicios_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_diarios_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_grupos_cocina_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Elija_impuesto_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Elija_articulos_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_personal_Subfamilias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_personal_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Elegir_personal_familias_CRUD : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_personal_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_personal_contratos_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_personal_contratos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_empresas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_configuracion_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_almacenes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_visitas_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_visitas_resultados_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_rutas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_actividades_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_facturas_cerradas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_visitas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_gastos_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_cuentas_pagos_cobros_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_conceptos_almacen_traspaso_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_bancos_empresas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_almacenes_movimientos_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_almacenes_movimientos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
    function  UTI_DATOS_TABLA_Traer_Users_xDescripcion_Nick( param_Descripcion_Nick : String ) : TUsers;
    function  UTI_DATOS_TABLA_Traer_Almacenes_xID( param_id : ShortString ) : TAlmacenes;
    procedure UTI_DATOS_TABLA_Traer_facturas_ventas_xID( param_id : String; param_SQLTransaction : TSQLTransaction; param_SQLConnector : TSQLConnector; param_SQLQuery : TSQLQuery );
    procedure UTI_DATOS_TABLA_Traer_facturas_ventas_detalles_xid_Ftra( param_id : String; param_SQLTransaction : TSQLTransaction; param_SQLConnector : TSQLConnector; param_SQLQuery : TSQLQuery );
    procedure UTI_DATOS_TABLA_Traer_poblacion_xID( param_id : String; param_SQLTransaction : TSQLTransaction; param_SQLConnector : TSQLConnector; param_SQLQuery : TSQLQuery );
    function  UTI_DATOS_TABLA_Traer_Personal_xID( param_id : ShortString ) : TPersonal;
    function  UTI_DATOS_TABLA_Traer_Representantes_xID( param_id : ShortString ) : TRepresentantes;
    function  UTI_DATOS_TABLA_Traer_Articulos_Familias_xID( param_id : ShortString ) : Tarticulos_familias;
    function  UTI_DATOS_TABLA_Traer_Articulos_xID( param_id : ShortString ) : TArticulos;
    function  UTI_DATOS_TABLA_Traer_articulos_tarifas_xID( param_id_articulos, param_id_tarifas : String ) : TArticulos_Tarifas;
    function  UTI_DATOS_TABLA_Traer_Impuestos_xID( param_id : ShortString ) : Timpuestos;
    function  UTI_DATOS_TABLA_Traer_Empresas_xID( param_id : ShortString ) : TEmpresas;
    function  UTI_DATOS_TABLA_Traer_Configuracion_APP_xID( param_id : ShortString ) : TConfiguracion;
    function  UTI_DATOS_TABLA_Traer_Users_xID( param_id : ShortString ) : TUsers;
    function  UTI_DATOS_TABLA_Traer_Proveedores_xID( param_id : ShortString ) : TProveedores;
    function  UTI_DATOS_TABLA_Traer_Clientes_xID( param_id : ShortString ) : TClientes;
    function  UTI_DATOS_TABLA_Traer_Clientes_Contactos_xID( param_id : ShortString ) : TClientes_Contactos;
    function  UTI_DATOS_TABLA_Traer_Clientes_Envios_xID( param_id : ShortString ) : TClientes_Envios;
    function  UTI_DATOS_TABLA_Traer_Proveedores_Contactos_xID( param_id : ShortString ) : TProveedores_Contactos;

implementation

function UTI_DATOS_TABLA_Rellenar_SQL( p_SQLQuery : TSQLQuery;
                                       p_nombre_tabla,
                                       p_opcion : String ) : String;
var v_Contador     : Integer;
    v_Nombre_Campo : ShortString;
    v_Linea        : String;
 // var_msg        : TStrings;
begin
  // *********************************************************************************************** //
  // ** UPDATE                                                                                    ** //
  // *********************************************************************************************** //
  if Trim(UpperCase(p_opcion)) = 'U' then
  begin
    Result := 'UPDATE ' + Trim(p_nombre_tabla) + ' ' +
              'SET ';

    with p_SQLQuery do
    begin
      v_Linea := '';

      for v_Contador := 0 to (FieldDefs.Count - 1) do
      begin
        v_Nombre_Campo  := FieldDefs.Items[v_Contador].Name;

        if UpperCase(Copy(v_Nombre_Campo, 1, 3)) <> 'OT_' then
        begin
          if Trim(v_Linea) <> '' then
          begin
            v_Linea := v_Linea + ', ';
          end;

          v_Linea := v_Linea + v_Nombre_Campo + ' = :' + v_Nombre_Campo;
        end;

      end;
    end;

    Result := Result + v_Linea + ' WHERE id = :id ';

  end;


  // *********************************************************************************************** //
  // ** INSERT                                                                                    ** //
  // *********************************************************************************************** //
  if Trim(UpperCase(p_opcion)) = 'I' then
  begin
    Result := 'INSERT INTO ' + Trim(p_nombre_tabla) + ' ( ';

    with p_SQLQuery do
    begin
      v_Linea := '';

      for v_Contador := 0 to (FieldDefs.Count - 1) do
      begin
        v_Nombre_Campo  := FieldDefs.Items[v_Contador].Name;

        if UpperCase(Copy(v_Nombre_Campo, 1, 3)) <> 'OT_' then
        begin
          if Trim(v_Linea) <> '' then
          begin
            v_Linea := v_Linea + ', ';
          end;

          v_Linea := v_Linea + v_Nombre_Campo;
        end;

      end;
    end;

    Result := Result + v_Linea + ' ) VALUES ( ';

    with p_SQLQuery do
    begin
      v_Linea := '';

      for v_Contador := 0 to (FieldDefs.Count - 1) do
      begin
        v_Nombre_Campo  := FieldDefs.Items[v_Contador].Name;

        if UpperCase(Copy(v_Nombre_Campo, 1, 3)) <> 'OT_' then
        begin
          if Trim(v_Linea) <> '' then
          begin
            v_Linea := v_Linea + ', ';
          end;

          v_Linea := v_Linea + ':' + v_Nombre_Campo;
        end;

      end;
    end;

    Result := Result + v_Linea + ' ) ';

  end;

  {
    var_msg := TStringList.Create;
    var_msg.Add(Result);
    UTI_GEN_Aviso( true, var_msg, 'a ver ... ', True, False );
    var_msg.Free;
  }

end;

function UTI_DATOS_TABLA_servicios_regulares_CRUD( param_SQLQuery : TSQLQuery;
                                                   p_desde_fecha,
                                                   p_hasta_fecha : String ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'sr';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'servicios_regulares',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'servicios_regulares',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT per.inicio_en_cocheras_SN AS OT_periodo_inicio_en_cocheras_SN,' + ' ' +
                                'per.desde_fecha AS OT_periodo_desde_fecha,' + ' ' +
                                'per.hasta_fecha AS OT_periodo_hasta_fecha,' + ' ' +
                                'per.inicio_servicio_anticipacion AS OT_periodo_inicio_servicio_anticipacion,' + ' ' +
                                'per.clientes_recogida_inicio AS OT_periodo_clientes_recogida_inicio,' + ' ' +
                                'per.clientes_fin_servicio AS OT_periodo_clientes_fin_servicio,' + ' ' +

                                'sr.*,' + ' ' +

                                'e.nombre_comercial as OT_empresa_descripcion,' + ' ' +

                                'ss.descripcion as OT_series_servicios_descripcion,' + ' ' +
                                'ss.subcuenta_ventas as OT_series_servicios_subcuenta_ventas,' + ' ' +
                                'ss.id_empresas as OT_id_empresas_series_servicios,' + ' ' +

                                'c.nombre_propietario as OT_cliente_descripcion,' + ' ' +
                                'c.nif_cif as OT_cliente_NIF,' + ' ' +
                                'c.Cta_Bco_Entidad || ' + UTI_GEN_Comillas('.') + ' || c.Cta_Bco_Sucursal || ' + UTI_GEN_Comillas('.') + ' || c.Cta_Bco_Digito_Control || ' + UTI_GEN_Comillas('.') + ' || c.Cta_Bco_Cuenta as OT_cliente_cuenta_bancaria,' + ' ' +
                                'c.Cta_Bco_IBAN as OT_cliente_IBAN,' + ' ' +
                                'c.Cta_Bco_BIC_SWIFT as OT_cliente_BIC_SWIFT,' + ' ' +
                                'c.Direccion || c.Direccion_Numero || c.Direccion_Piso_Letra as OT_cliente_direccion,' + ' ' +
                                'c.Codigo_Postal as OT_cliente_codigo_postal,' + ' ' +
                                'c.Tfno_Fijo_1 as OT_cliente_Tfno_Fijo_1,' + ' ' +
                                'c.Tfno_Fijo_2 as OT_cliente_Tfno_Fijo_2,' + ' ' +
                                'c.FAX as OT_cliente_FAX,' + ' ' +
                                'c.Movil as OT_cliente_Movil,' + ' ' +
                                'c.Cuenta_Contable as OT_cliente_cuenta_contable,' + ' ' +

                                'cfpago.descripcion as OT_cliente_forma_pago_descripcion,' + ' ' +
                                'cpob.descripcion as OT_cliente_poblacion_descripcion,' + ' ' +
                                'cprov.descripcion as OT_cliente_provincia_descripcion,' + ' ' +

                                'cc.nombre_propietario as OT_contratante_descripcion,' + ' ' +
                                'cc.nif_cif as OT_contratante_NIF,' + ' ' +

                                'st.descripcion as OT_servicios_tipos_descripcion,' + ' ' +

                                'p.nombre as OT_monitor_nombre,' + ' ' +
                                'p.Direccion || p.Direccion_Numero || p.Direccion_Piso_Letra as OT_monitor_direccion,' + ' ' +
                                'p.Codigo_Postal as OT_monitor_Codigo_Postal,' + ' ' +
                                'p.nif_cif as OT_monitor_NIF,' + ' ' +
                                'p.nif_cif_caducidad AS OT_monitor_NIF_caducidad,' + ' ' +
                                'p.Seguridad_Social as OT_monitor_Seguridad_Social,' + ' ' +
                                'p.eMail as OT_monitor_eMail,' + ' ' +
                                'p.Tfno_Fijo_1 as OT_monitor_Tfno_Fijo_1,' + ' ' +
                                'p.Tfno_Fijo_2 as OT_monitor_Tfno_Fijo_2,' + ' ' +
                                'p.FAX as OT_monitor_FAX,' + ' ' +
                                'p.Movil as OT_monitor_Movil,' + ' ' +

                                'ppob.descripcion as OT_monitor_poblacion_descripcion,' + ' ' +
                                'pprov.descripcion as OT_monitor_provincia_descripcion,' + ' ' +
                                'pps.descripcion as OT_monitor_pais_descripcion,' + ' ' +
                                'pprv.nombre_propietario AS OT_monitor_Empleado_De,' + ' ' +

                                'vt.descripcion as OT_vehiculos_tipos_descripcion' + ' ' +

                         'FROM servicios_regulares AS sr' + ' ' +

                         'LEFT JOIN ( SELECT servicios_regulares_periodos.*' + ' ' +
                                      'FROM servicios_regulares_periodos' + ' ' +
                                      'ORDER BY servicios_regulares_periodos.id_servicios_regulares,' + ' ' +
                                                'servicios_regulares_periodos.desde_fecha DESC,' + ' ' +
                                                'servicios_regulares_periodos.hasta_fecha DESC,' + ' ' +
                                                'servicios_regulares_periodos.inicio_servicio_anticipacion DESC,' + ' ' +
                                                'servicios_regulares_periodos.clientes_recogida_inicio DESC,' + ' ' +
                                                'servicios_regulares_periodos.clientes_fin_servicio DESC' + ' ' +
                                      'LIMIT 1 ) as per' + ' ' +
                         'ON sr.id = per.id_servicios_regulares ';

    if Trim(p_desde_fecha) <> '' then
    begin
      Result.SELECT_SQL := Result.SELECT_SQL + ' ' +
                           'RIGHT JOIN servicios_regulares_periodos AS srp' + ' ' +
                           'ON sr.id = srp.id_servicios_regulares' + ' ' +
                              'AND ' +  UTI_GEN_Comillas(p_desde_fecha) + ' BETWEEN srp.desde_fecha AND srp.hasta_fecha' + ' ' +
                              'AND ' +  UTI_GEN_Comillas(p_hasta_fecha) + ' BETWEEN srp.desde_fecha AND srp.hasta_fecha';
    end;

    Result.SELECT_SQL := Result.SELECT_SQL + ' ' +
                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON sr.id_empresas = e.id' + ' ' +

                         'LEFT JOIN series_servicios AS ss' + ' ' +
                         'ON sr.id_series_servicios = ss.id' + ' ' +

                         'LEFT JOIN clientes AS c' + ' ' +
                         'ON sr.id_clientes = c.id' + ' ' +

                         'LEFT JOIN clientes AS cc' + ' ' +
                         'ON sr.id_clientes_contratante = cc.id' + ' ' +

                         'LEFT JOIN servicios_tipos AS st' + ' ' +
                         'ON sr.id_servicios_tipos = st.id' + ' ' +

                         'LEFT JOIN personal AS p' + ' ' +
                         'ON sr.id_personal_acompanante = p.id' + ' ' +

                         'LEFT JOIN poblaciones AS ppob' + ' ' +
                         'ON ppob.id = p.id_poblaciones' + ' ' +

                         'LEFT JOIN provincias AS pprov' + ' ' +
                         'ON pprov.id = p.id_provincias' + ' ' +

                         'LEFT JOIN paises AS pps' + ' ' +
                         'ON pps.id = p.id_paises' + ' ' +

                         'LEFT JOIN proveedores AS pprv' + ' ' +
                         'ON pprv.id = p.id_Empleado_de' + ' ' +

                         'LEFT JOIN formas_pago AS cfpago' + ' ' +
                         'ON cfpago.id = c.id_formas_pago' + ' ' +

                         'LEFT JOIN poblaciones AS cpob' + ' ' +
                         'ON cpob.id = c.id_poblaciones' + ' ' +

                         'LEFT JOIN provincias AS cprov' + ' ' +
                         'ON cprov.id = c.id_provincias' + ' ' +

                         'LEFT JOIN vehiculos_tipos AS vt' + ' ' +
                         'ON sr.id_vehiculos_tipos = vt.id';
end;

function UTI_DATOS_TABLA_series_servicios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ss';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'series_servicios',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'series_servicios',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ss.*, ' + ' ' +
                                'dt.descripcion AS OT_descripcion_diarios_tipos,' + ' ' +
                                'emp.nombre_comercial AS OT_descripcion_empresa ' + ' ' +
                           'FROM series_servicios AS ss ' + ' ' +

                         'LEFT JOIN diarios_tipos AS dt' + ' ' +
                         'ON dt.id = ss.id_diarios_tipos' + ' ' +

                         'LEFT JOIN empresas AS emp' + ' ' +
                         'ON emp.id = ss.id_empresas' + ' ';

end;

function UTI_DATOS_TABLA_facturas_cobros_pagos_CRUD( param_SQLQuery : TSQLQuery;
                                                     param_Clientes_o_Proveedores : ShortString ) : TRegistro_CRUD;
var var_prefijo : ShortString;
begin
    Result.name_tabla := 'fcp';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_cobros_pagos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_cobros_pagos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    if UpperCase(Trim(param_Clientes_o_Proveedores)) = 'C' then
    begin
        var_prefijo := 'fv';
    end else begin
        var_prefijo := 'fc';
    end;

    Result.SELECT_SQL := 'SELECT fcp.*,' + ' ' +

                                'cl.nombre_propietario AS OT_cliente_nombre_ficha,' + ' ' +
                                'pr.nombre_propietario AS OT_proveedor_nombre_ficha,' + ' ' +


                                Trim(var_prefijo) + '.nombre_propietario AS OT_factura_nombre_propietario,' + ' ' +
                                Trim(var_prefijo) + '.nif_cif AS OT_factura_nif_cif,' + ' ' +

                                Trim(var_prefijo) + '.Cta_Bco_Entidad AS OT_factura_Cta_Bco_Entidad,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Sucursal AS OT_factura_Cta_Bco_Sucursal,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Digito_Control AS OT_factura_Cta_Bco_Digito_Control,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Cuenta AS OT_factura_Cta_Bco_Cuenta,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_IBAN AS OT_factura_Cta_Bco_IBAN,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_BIC_SWIFT AS OT_factura_Cta_Bco_BIC_SWIFT,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Mandato_Fecha_de_Firma AS OT_factura_Cta_Bco_Mandato_Fecha_de_Firma,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Mandato_Ref AS OT_factura_Cta_Bco_Mandato_Ref,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Direccion AS OT_factura_Cta_Bco_Direccion,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Direccion_Numero AS OT_factura_Cta_Bco_Direccion_Numero,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Direccion_Piso_Letra AS OT_factura_Cta_Bco_Direccion_Piso_Letra,' + ' ' +
                                Trim(var_prefijo) + '.Cta_Bco_Codigo_Postal AS OT_factura_Cta_Bco_Codigo_Postal,' + ' ' +

                                Trim(var_prefijo) + '.CONCEPTO_SEPA AS OT_factura_CONCEPTO_SEPA' + ' ' +

                           'FROM facturas_cobros_pagos AS fcp' + ' ' +

                         'LEFT JOIN proveedores AS pr' + ' ' +
                         'ON fcp.id_proveedores = pr.id' + ' ' +

                         'LEFT JOIN clientes AS cl' + ' ' +
                         'ON fcp.id_clientes = cl.id';

    if UpperCase(Trim(param_Clientes_o_Proveedores)) = 'C' then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL + ' ' +
                             'LEFT JOIN facturas_ventas AS fv' + ' ' +
                             'ON fcp.id_facturas = fv.id';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL + ' ' +
                             'LEFT JOIN facturas_compras AS fc' + ' ' +
                             'ON fcp.id_facturas = fc.id';
    end;
end;

function UTI_DATOS_TABLA_Listado_Presup_Compras_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'pc';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'pci.*,' + ' ' +
                         'pc.*' + ' ' +

                         'FROM presupuestos_compras_impuestos AS pci' + ' ' +

                         'RIGHT JOIN presupuestos_compras as pc' + ' ' +
                         'ON pc.id = pci.id_presupuestos' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Presup_Ventas_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'p';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'pi.*,' + ' ' +
                         'p.*' + ' ' +

                         'FROM presupuestos_ventas_impuestos AS pi' + ' ' +

                         'RIGHT JOIN presupuestos_ventas as p' + ' ' +
                         'ON p.id = pi.id_presupuestos' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pi.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Pdo_Compras_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdoc';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'pdoci.*,' + ' ' +
                         'pdoc.*' + ' ' +

                         'FROM pedidos_compras_impuestos AS pdoci' + ' ' +

                         'RIGHT JOIN pedidos_compras as pdoc' + ' ' +
                         'ON pdoc.id = pdoci.id_pedidos' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pdoci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Pdo_Ventas_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdo';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'pdoi.*,' + ' ' +
                         'pdo.*' + ' ' +

                         'FROM pedidos_ventas_impuestos AS pdoi' + ' ' +

                         'RIGHT JOIN pedidos_ventas as pdo' + ' ' +
                         'ON pdo.id = pdoi.id_pedidos' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pdoi.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Alb_Compras_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'ac';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'aci.*,' + ' ' +
                         'ac.*' + ' ' +

                         'FROM albaranes_compras_impuestos AS aci' + ' ' +

                         'RIGHT JOIN albaranes_compras as ac' + ' ' +
                         'ON ac.id = aci.id_albaranes' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON aci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Alb_Ventas_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'a';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'ai.*,' + ' ' +
                         'a.*' + ' ' +

                         'FROM albaranes_ventas_impuestos AS ai' + ' ' +

                         'RIGHT JOIN albaranes_ventas as a' + ' ' +
                         'ON a.id = ai.id_albaranes' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON ai.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Ftras_Compras_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'fc';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'fci.*,' + ' ' +
                         'fc.*' + ' ' +

                         'FROM facturas_compras_impuestos AS fci' + ' ' +

                         'RIGHT JOIN facturas_compras as fc' + ' ' +
                         'ON fc.id = fci.id_facturas' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON fci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_Listado_Ftras_Ventas_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'f';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT' + ' ' +

                         'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                         'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +

                         'fi.*,' + ' ' +
                         'f.*' + ' ' +

                         'FROM facturas_ventas_impuestos AS fi' + ' ' +

                         'RIGHT JOIN facturas_ventas as f' + ' ' +
                         'ON f.id = fi.id_facturas' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON fi.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_facturas_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_compras',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_compras',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fc.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'p.nombre_propietario AS OT_descripcion_proveedor,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM facturas_compras AS fc' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON fc.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON fc.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON fc.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON fc.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON fc.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON fc.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON fc.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON fc.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON fc.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON fc.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON fc.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON fc.id_empresas = e.id' + ' ' +

                         'LEFT JOIN proveedores AS p' + ' ' +
                         'ON fc.id_proveedores = p.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON fc.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_facturas_compras_detalles_CRUD( param_SQLQuery : TSQLQuery;
                                                         param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fcd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_compras_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_compras_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fcd.*,' + ' ' +

                                'pr.nombre_propietario AS OT_Proveedor_nombre_propietario,' + ' ' +
                                'pr.nombre_comercial AS OT_Proveedor_nombre_comercial,' + ' ' +

                                'fc.id_almacenes AS OT_id_almacenes_Cabecera,' + ' ' +
                                'fc.Serie_Factura AS OT_Serie_Factura,' + ' ' +
                                'fc.Numero_Factura AS OT_Numero_Factura,' + ' ' +

                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                           'FROM facturas_compras_detalles AS fcd' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON fcd.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON fcd.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON fcd.id_impuestos_Compras = i.id' + ' ' +

                         'LEFT JOIN proveedores AS pr' + ' ' +
                         'ON fcd.id_proveedores = pr.id' + ' ';

    if param_ver_con_Cabecera_Borrada = true then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'LEFT JOIN facturas_compras AS fc' + ' ' +
                             'ON fcd.id_facturas = fc.id ';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'RIGHT JOIN facturas_compras AS fc' + ' ' +
                             'ON fcd.id_facturas = fc.id AND' + ' ' +
                                'fc.Del_WHEN IS NULL ';
    end;
end;

function UTI_DATOS_TABLA_facturas_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fci';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_compras_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_compras_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fci.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM facturas_compras_impuestos AS fci' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON fci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_facturas_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fci';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'fci.id_impuestos,' + ' ' +
                                'SUM(fci.Base) AS Total_Base,' + ' ' +
                                'SUM(fci.Importe) AS Total_Cuota' + ' ' +

                         'FROM facturas_compras_impuestos AS fci' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON fci.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN facturas_compras AS fc' + ' ' +
                         'ON fci.id_facturas = fc.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND fc.Del_WHEN IS NULL' + ' ' +

                         'WHERE fci.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY fci.id_impuestos' + ' ' +
                         'ORDER BY fci.id_facturas, fci.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_facturas_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'f';

    Result.Delete_SQL := '';


    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_ventas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_ventas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT f.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'rp.nombre_propietario AS OT_descripcion_representante,' + ' ' +
                                'rp.Tfno_Fijo_1 AS OT_tfno_1_representante,' + ' ' +
                                'rp.Movil AS OT_Movil_representante,' + ' ' +

                                'tfs.descripcion AS OT_descripcion_tarifa,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'c.nombre_propietario AS OT_descripcion_cliente,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM facturas_ventas AS f' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON f.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON f.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON f.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON f.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN representantes AS rp' + ' ' +
                         'ON f.id_representantes = rp.id' + ' ' +

                         'LEFT JOIN tarifas AS tfs' + ' ' +
                         'ON f.id_tarifas = tfs.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON f.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON f.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON f.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON f.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON f.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON f.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON f.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON f.id_empresas = e.id' + ' ' +

                         'LEFT JOIN clientes AS c' + ' ' +
                         'ON f.id_clientes = c.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON f.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_facturas_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery;
                                                        param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_ventas_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_ventas_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fd.*,' + ' ' +

                                'cl.nombre_propietario AS OT_Cliente_nombre_propietario,' + ' ' +
                                'cl.nombre_comercial AS OT_Cliente_nombre_comercial,' + ' ' +

                                'fv.id_almacenes AS OT_id_almacenes_Cabecera,' + ' ' +
                                'fv.Serie_Factura AS OT_Serie_Factura,' + ' ' +
                                'fv.Numero_Factura AS OT_Numero_Factura,' + ' ' +

                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                           'FROM facturas_ventas_detalles AS fd' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON fd.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON fd.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON fd.id_impuestos_Ventas = i.id' + ' ' +

                         'LEFT JOIN clientes AS cl' + ' ' +
                         'ON fd.id_clientes = cl.id' + ' ';

    if param_ver_con_Cabecera_Borrada = true then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'LEFT JOIN facturas_ventas AS fv' + ' ' +
                             'ON fd.id_facturas = fv.id ';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'RIGHT JOIN facturas_ventas AS fv' + ' ' +
                             'ON fd.id_facturas = fv.id AND' + ' ' +
                                'fv.Del_WHEN IS NULL ';
    end;
end;

function UTI_DATOS_TABLA_facturas_ventas_detalles_Stock_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'fds';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fds.id_articulos,' + ' ' +
    		                'fds.id_almacenes,' + ' ' +
    		                'SUM(fds.Unidades) AS unidades,' + ' ' +

    		                'art.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
    		                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +
    		                'st.Stock' + ' ' +

                           'FROM facturas_ventas_detalles AS fds,' + ' ' +
       	                        'articulos AS art,' + ' ' +
       	                        'almacenes AS alm,' + ' ' +
       	                        'articulos_stock AS st';
end;

function UTI_DATOS_TABLA_facturas_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fi';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_ventas_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_ventas_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fi.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM facturas_ventas_impuestos AS fi' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON fi.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_facturas_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fci';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'fi.id_impuestos,' + ' ' +
                                'SUM(fi.Base) AS Total_Base,' + ' ' +
                                'SUM(fi.Importe) AS Total_Cuota' + ' ' +

                         'FROM facturas_ventas_impuestos AS fi' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON fi.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN facturas_ventas AS f' + ' ' +
                         'ON fi.id_facturas = f.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND f.Del_WHEN IS NULL' + ' ' +

                         'WHERE fi.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY fi.id_impuestos' + ' ' +
                         'ORDER BY fi.id_facturas, fi.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_facturas_ventas_borradas_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'fb';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fb.*,' + ' ' +
                                'c.nombre_propietario AS OT_descripcion_cliente' + ' ' +
                         'FROM facturas_ventas AS fb' + ' ' +

                         'LEFT JOIN clientes AS c' + ' ' +
                         'ON fb.id_clientes = c.id' + ' ';
end;

function UTI_DATOS_TABLA_facturas_compras_borradas_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'fcb';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fcb.*,' + ' ' +
                                'c.nombre_propietario AS OT_descripcion_proveedor' + ' ' +
                         'FROM facturas_compras AS fcb' + ' ' +

                         'LEFT JOIN proveedores AS c' + ' ' +
                         'ON fcb.id_proveedores = c.id' + ' ';
end;

function UTI_DATOS_TABLA_albaranes_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ac';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_compras',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_compras',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ac.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'p.nombre_propietario AS OT_descripcion_proveedor,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM albaranes_compras AS ac' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON ac.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON ac.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON ac.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON ac.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON ac.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON ac.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON ac.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON ac.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON ac.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON ac.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON ac.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON ac.id_empresas = e.id' + ' ' +

                         'LEFT JOIN proveedores AS p' + ' ' +
                         'ON ac.id_proveedores = p.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON ac.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_albaranes_compras_detalles_CRUD( param_SQLQuery : TSQLQuery;
                                                          param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'acd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_compras_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_compras_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT acd.*,' + ' ' +

                                'pr.nombre_propietario AS OT_Proveedor_nombre_propietario,' + ' ' +
                                'pr.nombre_comercial AS OT_Proveedor_nombre_comercial,' + ' ' +

                                'ac.id_almacenes AS OT_id_almacenes_Cabecera,' + ' ' +
                                'ac.Serie_Albaran AS OT_Serie_Albaran,' + ' ' +
                                'ac.Numero_Albaran AS OT_Numero_Albaran,' + ' ' +

                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                         'FROM albaranes_compras_detalles AS acd' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON acd.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON acd.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON acd.id_impuestos_Compras = i.id' + ' ' +

                         'LEFT JOIN proveedores AS pr' + ' ' +
                         'ON acd.id_proveedores = pr.id' + ' ';

    if param_ver_con_Cabecera_Borrada = true then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'LEFT JOIN albaranes_compras AS ac' + ' ' +
                             'ON acd.id_albaranes = ac.id ';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'RIGHT JOIN albaranes_compras AS ac' + ' ' +
                             'ON acd.id_albaranes = ac.id AND' + ' ' +
                                'ac.Del_WHEN IS NULL ';
    end;
end;

function UTI_DATOS_TABLA_albaranes_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'aci';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_compras_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_compras_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT aci.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM albaranes_compras_impuestos AS aci' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON aci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_albaranes_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'aci';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'aci.id_impuestos,' + ' ' +
                                'SUM(aci.Base) AS Total_Base,' + ' ' +
                                'SUM(aci.Importe) AS Total_Cuota' + ' ' +

                         'FROM albaranes_compras_impuestos AS aci' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON aci.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN albaranes_compras AS ac' + ' ' +
                         'ON aci.id_albaranes = ac.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND ac.Del_WHEN IS NULL' + ' ' +

                         'WHERE aci.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY aci.id_impuestos' + ' ' +
                         'ORDER BY aci.id_albaranes, aci.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_albaranes_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'a';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_ventas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_ventas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT a.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'rp.nombre_propietario AS OT_descripcion_representante,' + ' ' +
                                'rp.Tfno_Fijo_1 AS OT_tfno_1_representante,' + ' ' +
                                'rp.Movil AS OT_Movil_representante,' + ' ' +

                                'tfs.descripcion AS OT_descripcion_tarifa,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +
                                'vh.matricula AS OT_vehiculo_matricula,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'c.nombre_propietario AS OT_descripcion_cliente,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM albaranes_ventas AS a' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON a.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON a.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON a.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON a.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN representantes AS rp' + ' ' +
                         'ON a.id_representantes = rp.id' + ' ' +

                         'LEFT JOIN tarifas AS tfs' + ' ' +
                         'ON a.id_tarifas = tfs.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON a.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON a.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON a.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON a.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON a.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON a.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON a.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN vehiculos AS vh' + ' ' +
                         'ON a.id_vehiculos = vh.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON a.id_empresas = e.id' + ' ' +

                         'LEFT JOIN clientes AS c' + ' ' +
                         'ON a.id_clientes = c.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON a.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_albaranes_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery;
                                                         param_ver_con_Cabecera_Borrada : Boolean ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ad';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_ventas_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_ventas_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ad.*,' + ' ' +

                                'cl.nombre_propietario AS OT_Cliente_nombre_propietario,' + ' ' +
                                'cl.nombre_comercial AS OT_Cliente_nombre_comercial,' + ' ' +

                                'albv.id_almacenes AS OT_id_almacenes_Cabecera,' + ' ' +
                                'albv.id_vehiculos AS OT_id_vehiculos_Cabecera,' + ' ' +
                                'albv.Serie_Albaran AS OT_Serie_Albaran,' + ' ' +
                                'albv.Numero_Albaran AS OT_Numero_Albaran,' + ' ' +

                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                         'FROM albaranes_ventas_detalles AS ad' + ' ' +

                         'LEFT JOIN albaranes_ventas AS av' + ' ' +
                         'ON ad.id_albaranes = av.id' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON ad.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON ad.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON ad.id_impuestos_Ventas = i.id' + ' ' +

                         'LEFT JOIN clientes AS cl' + ' ' +
                         'ON ad.id_clientes = cl.id' + ' ';

    if param_ver_con_Cabecera_Borrada = true then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'LEFT JOIN albaranes_ventas AS albv' + ' ' +
                             'ON ad.id_albaranes = albv.id ';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             'RIGHT JOIN albaranes_ventas AS albv' + ' ' +
                             'ON ad.id_albaranes = albv.id AND' + ' ' +
                                'ad.Del_WHEN IS NULL ';
    end;
end;

function UTI_DATOS_TABLA_albaranes_ventas_detalles_Stock_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'ads';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ads.id_articulos,' + ' ' +
    		                'ads.id_almacenes,' + ' ' +
    		                'SUM(ads.Unidades) AS unidades,' + ' ' +
    		                'art.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
    		                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +
    		                'st.Stock' + ' ' +

                           'FROM albaranes_ventas_detalles AS ads,' + ' ' +
       	                        'articulos AS art,' + ' ' +
       	                        'almacenes AS alm,' + ' ' +
       	                        'articulos_stock AS st';
end;

function UTI_DATOS_TABLA_albaranes_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ai';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_ventas_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'albaranes_ventas_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ai.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM albaranes_ventas_impuestos AS ai' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON ai.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_albaranes_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'avi';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'avi.id_impuestos,' + ' ' +
                                'SUM(avi.Base) AS Total_Base,' + ' ' +
                                'SUM(avi.Importe) AS Total_Cuota' + ' ' +

                         'FROM albaranes_ventas_impuestos AS avi' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON avi.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN albaranes_ventas AS av' + ' ' +
                         'ON avi.id_albaranes = av.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND av.Del_WHEN IS NULL' + ' ' +

                         'WHERE avi.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY avi.id_impuestos' + ' ' +
                         'ORDER BY avi.id_albaranes, avi.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_presupuestos_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'p';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_ventas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_ventas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT p.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'rp.nombre_propietario AS OT_descripcion_representante,' + ' ' +
                                'rp.Tfno_Fijo_1 AS OT_tfno_1_representante,' + ' ' +
                                'rp.Movil AS OT_Movil_representante,' + ' ' +

                                'tfs.descripcion AS OT_descripcion_tarifa,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +
                                'vh.matricula AS OT_vehiculo_matricula,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'c.nombre_propietario AS OT_descripcion_cliente,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM presupuestos_ventas AS p' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON p.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON p.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON p.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON p.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN representantes AS rp' + ' ' +
                         'ON p.id_representantes = rp.id' + ' ' +

                         'LEFT JOIN tarifas AS tfs' + ' ' +
                         'ON p.id_tarifas = tfs.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON p.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON p.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON p.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON p.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON p.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON p.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON p.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN vehiculos AS vh' + ' ' +
                         'ON p.id_vehiculos = vh.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON p.id_empresas = e.id' + ' ' +

                         'LEFT JOIN clientes AS c' + ' ' +
                         'ON p.id_clientes = c.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON p.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_presupuestos_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_ventas_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_ventas_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pd.*,' + ' ' +
                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                         'FROM presupuestos_ventas_detalles AS pd' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON pd.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON pd.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON pd.id_impuestos_Ventas = i.id' + ' ';
end;

function UTI_DATOS_TABLA_presupuestos_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pi';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_ventas_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_ventas_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pi.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM presupuestos_ventas_impuestos AS pi' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pi.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_presupuestos_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pvi';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'pvi.id_impuestos,' + ' ' +
                                'SUM(pvi.Base) AS Total_Base,' + ' ' +
                                'SUM(pvi.Importe) AS Total_Cuota' + ' ' +

                         'FROM presupuestos_ventas_impuestos AS pvi' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON pvi.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN presupuestos_ventas AS pv' + ' ' +
                         'ON pvi.id_presupuestos = pv.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND pv.Del_WHEN IS NULL' + ' ' +

                         'WHERE pvi.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY pvi.id_impuestos' + ' ' +
                         'ORDER BY pvi.id_presupuestos, pvi.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_presupuestos_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pc';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_compras',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_compras',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pc.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'p.nombre_propietario AS OT_descripcion_proveedor,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM presupuestos_compras AS pc' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON pc.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON pc.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON pc.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON pc.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON pc.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON pc.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON pc.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON pc.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON pc.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON pc.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON pc.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON pc.id_empresas = e.id' + ' ' +

                         'LEFT JOIN proveedores AS p' + ' ' +
                         'ON pc.id_proveedores = p.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON pc.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_presupuestos_compras_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pcd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_compras_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_compras_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pcd.*,' + ' ' +
                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                         'FROM presupuestos_compras_detalles AS pcd' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON pcd.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON pcd.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON pcd.id_impuestos_Compras = i.id' + ' ';
end;

function UTI_DATOS_TABLA_presupuestos_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pci';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_compras_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'presupuestos_compras_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pci.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM presupuestos_compras_impuestos AS pci' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_presupuestos_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pci';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'pci.id_impuestos,' + ' ' +
                                'SUM(pci.Base) AS Total_Base,' + ' ' +
                                'SUM(pci.Importe) AS Total_Cuota' + ' ' +

                         'FROM presupuestos_compras_impuestos AS pci' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON pci.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN presupuestos_compras AS pc' + ' ' +
                         'ON pci.id_presupuestos = pc.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND pc.Del_WHEN IS NULL' + ' ' +

                         'WHERE pci.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY pci.id_impuestos' + ' ' +
                         'ORDER BY pci.id_presupuestos, pci.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_pedidos_compras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdoc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_compras',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_compras',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdoc.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'p.nombre_propietario AS OT_descripcion_proveedor,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM pedidos_compras AS pdoc' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON pdoc.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON pdoc.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON pdoc.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON pdoc.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON pdoc.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON pdoc.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON pdoc.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON pdoc.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON pdoc.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON pdoc.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON pdoc.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON pdoc.id_empresas = e.id' + ' ' +

                         'LEFT JOIN proveedores AS p' + ' ' +
                         'ON pdoc.id_proveedores = p.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON pdoc.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_pedidos_compras_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdocd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_compras_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_compras_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdocd.*,' + ' ' +
                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                         'FROM pedidos_compras_detalles AS pdocd' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON pdocd.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON pdocd.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON pdocd.id_impuestos_Compras = i.id' + ' ';
end;

function UTI_DATOS_TABLA_pedidos_compras_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdoci';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_compras_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_compras_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdoci.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM pedidos_compras_impuestos AS pdoci' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pdoci.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_pedidos_compras_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdoci';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'pdoci.id_impuestos,' + ' ' +
                                'SUM(pdoci.Base) AS Total_Base,' + ' ' +
                                'SUM(pdoci.Importe) AS Total_Cuota' + ' ' +

                         'FROM pedidos_compras_impuestos AS pdoci' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON pdoci.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN pedidos_compras AS pc' + ' ' +
                         'ON pdoci.id_pedidos = pc.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND pc.Del_WHEN IS NULL' + ' ' +

                         'WHERE pdoci.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY pdoci.id_impuestos' + ' ' +
                         'ORDER BY pdoci.id_pedidos, pdoci.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_pedidos_ventas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdo';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_ventas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_ventas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdo.*,' + ' ' +

                                'trp.nombre_propietario AS OT_descripcion_transportista,' + ' ' +
                                'trp.Tfno_Fijo_1 AS OT_tfno_1_transportista,' + ' ' +
                                'trp.Movil AS OT_Movil_transportista,' + ' ' +

                                'env_pb.descripcion AS OT_Envio_descripcion_poblacion,' + ' ' +
                                'env_pr.descripcion AS OT_Envio_descripcion_provincia,' + ' ' +
                                'env_ps.descripcion AS OT_Envio_descripcion_pais,' + ' ' +

                                'rp.nombre_propietario AS OT_descripcion_representante,' + ' ' +
                                'rp.Tfno_Fijo_1 AS OT_tfno_1_representante,' + ' ' +
                                'rp.Movil AS OT_Movil_representante,' + ' ' +

                                'tfs.descripcion AS OT_descripcion_tarifa,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +
                                'vh.matricula AS OT_vehiculo_matricula,' + ' ' +

                                'e.nombre_comercial AS OT_descripcion_empresa,' + ' ' +
                                'c.nombre_propietario AS OT_descripcion_cliente,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago' + ' ' +

                         'FROM pedidos_ventas AS pdo' + ' ' +

                         'LEFT JOIN proveedores AS trp' + ' ' +
                         'ON pdo.agencias_transporte_id_proveedores = trp.id' + ' ' +

                         'LEFT JOIN poblaciones AS env_pb' + ' ' +
                         'ON pdo.Envio_id_poblaciones = env_pb.id' + ' ' +

                         'LEFT JOIN provincias AS env_pr' + ' ' +
                         'ON pdo.Envio_id_provincias = env_pr.id' + ' ' +

                         'LEFT JOIN paises AS env_ps' + ' ' +
                         'ON pdo.Envio_id_paises = env_ps.id' + ' ' +

                         'LEFT JOIN representantes AS rp' + ' ' +
                         'ON pdo.id_representantes = rp.id' + ' ' +

                         'LEFT JOIN tarifas AS tfs' + ' ' +
                         'ON pdo.id_tarifas = tfs.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON pdo.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON pdo.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON pdo.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON pdo.Cta_Bco_id_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON pdo.Cta_Bco_id_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON pdo.Cta_Bco_id_paises = ct_ps.id' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON pdo.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN vehiculos AS vh' + ' ' +
                         'ON pdo.id_vehiculos = vh.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON pdo.id_empresas = e.id' + ' ' +

                         'LEFT JOIN clientes AS c' + ' ' +
                         'ON pdo.id_clientes = c.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON pdo.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_pedidos_ventas_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdod';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_ventas_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_ventas_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdod.*,' + ' ' +
                                'al.descripcion AS OT_descripcion_almacen,' + ' ' +

                                'a.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
                                'a.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +

                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN' + ' ' +

                         'FROM pedidos_ventas_detalles AS pdod' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON pdod.id_almacenes = al.id' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON pdod.id_articulos = a.id' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON pdod.id_impuestos_Ventas = i.id' + ' ';
end;

function UTI_DATOS_TABLA_pedidos_ventas_detalles_Stock_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdods';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdods.id_articulos,' + ' ' +
    		                'pdods.id_almacenes,' + ' ' +
    		                'SUM(pdods.Unidades) AS unidades,' + ' ' +
    		                'art.descripcion_para_TPV AS OT_descripcion_articulo,' + ' ' +
    		                'alm.descripcion AS OT_descripcion_almacen,' + ' ' +
    		                'st.Stock' + ' ' +

                           'FROM pedidos_ventas_detalles AS pdods,' + ' ' +
       	                        'articulos AS art,' + ' ' +
       	                        'almacenes AS alm,' + ' ' +
       	                        'articulos_stock AS st';
end;

function UTI_DATOS_TABLA_pedidos_ventas_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdoi';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_ventas_impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'pedidos_ventas_impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pdoi.*,' + ' ' +

                                'impto.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'impto.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +

                           'FROM pedidos_ventas_impuestos AS pdoi' + ' ' +

                         'LEFT JOIN impuestos AS impto' + ' ' +
                         'ON pdoi.id_impuestos = impto.id';
end;

function UTI_DATOS_TABLA_pedidos_ventas_Imptos_Totales_CRUD(param_Filtrar_en_RIGHT_JOIN : TStrings) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pdovi';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT imp.descripcion AS OT_Descripcion_impto,' + ' ' +
                                'pdovi.id_impuestos,' + ' ' +
                                'SUM(pdovi.Base) AS Total_Base,' + ' ' +
                                'SUM(pdovi.Importe) AS Total_Cuota' + ' ' +

                         'FROM pedidos_ventas_impuestos AS pdovi' + ' ' +

                         'LEFT JOIN impuestos AS imp' + ' ' +
                         'ON pdovi.id_impuestos = imp.id' + ' ' +

                         'RIGHT JOIN pedidos_ventas AS pv' + ' ' +
                         'ON pdovi.id_pedidos = pv.id' + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         Trim(param_Filtrar_en_RIGHT_JOIN.Text) + ' ';

    Result.SELECT_SQL := Trim(Result.SELECT_SQL) + ' ' +
                         'AND pv.Del_WHEN IS NULL' + ' ' +

                         'WHERE pdovi.Del_WHEN IS NULL' + ' ' +
                         'AND NOT imp.descripcion IS NULL' + ' ' +

                         'GROUP BY pdovi.id_impuestos' + ' ' +
                         'ORDER BY pdovi.id_pedidos, pdovi.id_impuestos;' + ' ';
end;

function UTI_DATOS_TABLA_vehiculos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'v';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT v.*,' + ' ' +

                                'alm.descripcion AS OT_descripcion_almacenes,' + ' ' +
                                'vt.descripcion AS OT_descripcion_vehiculos_tipos,' + ' ' +
                                'vm.descripcion AS OT_descripcion_vehiculos_marcas,' + ' ' +
                                'com.descripcion AS OT_descripcion_combustibles,' + ' ' +
                                'vtc.descripcion AS OT_descripcion_vehiculos_tipo_cambios,' + ' ' +
                                'vtr.descripcion AS OT_descripcion_vehiculos_tipo_ruedas,' + ' ' +

                                'p.nombre AS OT_nombre_conductor_habitual,' + ' ' +
                                'p.nif_cif AS OT_nif_cif_conductor_habitual,' + ' ' +

                                'ttte.numero_tarjeta AS OT_tarjeta_transporte_numero_tarjeta,' + ' ' +
                                'ttte.ambito AS OT_tarjeta_transporte_ambito,' + ' ' +

                                'prca.nombre_propietario AS OT_descripcion_comprado_a,' + ' ' +

                                // ***************************************************************** //
                                // ** propietario empresa                                         ** //
                                // ***************************************************************** //
                                'prem.nombre_comercial AS OT_PROPIETARIO_EMPRESA_nombre_comercial,' + ' ' +
                                'prem.nif_cif AS OT_PROPIETARIO_EMPRESA_nif_cif,' + ' ' +
                                'prem.Tfno_Fijo_1 AS OT_PROPIETARIO_EMPRESA_Tfno_Fijo_1,' + ' ' +
                                'prem.Tfno_Fijo_2 AS OT_PROPIETARIO_EMPRESA_Tfno_Fijo_2,' + ' ' +
                                'prem.FAX AS OT_PROPIETARIO_EMPRESA_Tfno_FAX,' + ' ' +
                                'prem.Movil AS OT_PROPIETARIO_EMPRESA_Movil,' + ' ' +
                                'prem.Direccion AS OT_PROPIETARIO_EMPRESA_Direccion,' + ' ' +
                                'prem.Direccion_Numero AS OT_PROPIETARIO_EMPRESA_Direccion_Numero,' + ' ' +
                                'prem.Direccion_Piso_Letra AS OT_PROPIETARIO_EMPRESA_Direccion_Piso_Letra,' + ' ' +
                                'prem.Codigo_Postal AS OT_PROPIETARIO_EMPRESA_Codigo_Postal,' + ' ' +

                                'prem.id_poblaciones AS OT_PROPIETARIO_EMPRESA_id_poblaciones,' + ' ' +
                                'prem.id_provincias AS OT_PROPIETARIO_EMPRESA_id_provincias,' + ' ' +
                                'prem.id_paises AS OT_PROPIETARIO_EMPRESA_id_paises,' + ' ' +

                                'prempb.descripcion AS OT_PROPIETARIO_EMPRESA_poblacion,' + ' ' +
                                'prempr.descripcion AS OT_PROPIETARIO_EMPRESA_provincia,' + ' ' +
                                'premps.descripcion AS OT_PROPIETARIO_EMPRESA_pais,' + ' ' +

                                'prem.Responsable AS OT_PROPIETARIO_EMPRESA_CONTACTO_nombre,' + ' ' +

                                // ***************************************************************** //
                                // ** propietario cliente                                         ** //
                                // ***************************************************************** //
                                'prcl.nombre_propietario AS OT_PROPIETARIO_CLIENTE_nombre_propietario,' + ' ' +
                                'prcl.nombre_comercial AS OT_PROPIETARIO_CLIENTE_nombre_comercial,' + ' ' +
                                'prcl.nif_cif AS OT_PROPIETARIO_CLIENTE_nif_cif,' + ' ' +
                                'prcl.Tfno_Fijo_1 AS OT_PROPIETARIO_CLIENTE_Tfno_Fijo_1,' + ' ' +
                                'prcl.Tfno_Fijo_2 AS OT_PROPIETARIO_CLIENTE_Tfno_Fijo_2,' + ' ' +
                                'prcl.FAX AS OT_PROPIETARIO_CLIENTE_Tfno_FAX,' + ' ' +
                                'prcl.Movil AS OT_PROPIETARIO_CLIENTE_Movil,' + ' ' +
                                'prcl.Direccion AS OT_PROPIETARIO_CLIENTE_Direccion,' + ' ' +
                                'prcl.Direccion_Numero AS OT_PROPIETARIO_CLIENTE_Direccion_Numero,' + ' ' +
                                'prcl.Direccion_Piso_Letra AS OT_PROPIETARIO_CLIENTE_Direccion_Piso_Letra,' + ' ' +
                                'prcl.Codigo_Postal AS OT_PROPIETARIO_CLIENTE_Codigo_Postal,' + ' ' +

                                'prcl.id_poblaciones AS OT_PROPIETARIO_CLIENTE_id_poblaciones,' + ' ' +
                                'prcl.id_provincias AS OT_PROPIETARIO_CLIENTE_id_provincias,' + ' ' +
                                'prcl.id_paises AS OT_PROPIETARIO_CLIENTE_id_paises,' + ' ' +

                                'prclpb.descripcion AS OT_PROPIETARIO_CLIENTE_poblacion,' + ' ' +
                                'prclpr.descripcion AS OT_PROPIETARIO_CLIENTE_provincia,' + ' ' +
                                'prclps.descripcion AS OT_PROPIETARIO_CLIENTE_pais,' + ' ' +

                                'prclcon.nombre AS OT_PROPIETARIO_CLIENTE_CONTACTO_nombre,' + ' ' +
                                'prclcon.Cargo_Puesto AS OT_PROPIETARIO_CLIENTE_CONTACTO_Cargo_Puesto,' + ' ' +
                                'prclcon.Tfno_Fijo_1 AS OT_PROPIETARIO_CLIENTE_CONTACTO_Tfno_Fijo_1,' + ' ' +
                                'prclcon.Tfno_Fijo_2 AS OT_PROPIETARIO_CLIENTE_CONTACTO_Tfno_Fijo_2,' + ' ' +
                                'prclcon.FAX AS OT_PROPIETARIO_CLIENTE_CONTACTO_FAX,' + ' ' +
                                'prclcon.Movil AS OT_PROPIETARIO_CLIENTE_CONTACTO_Movil,' + ' ' +

                                // ***************************************************************** //
                                // ** propietario COLABORADOR / PROVEEDOR                         ** //
                                // ***************************************************************** //
                                'prpv.nombre_propietario AS OT_PROPIETARIO_COLABORADOR_nombre_propietario,' + ' ' +
                                'prpv.nombre_comercial AS OT_PROPIETARIO_COLABORADOR_nombre_comercial,' + ' ' +
                                'prpv.nif_cif AS OT_PROPIETARIO_COLABORADOR_nif_cif,' + ' ' +
                                'prpv.Tfno_Fijo_1 AS OT_PROPIETARIO_COLABORADOR_Tfno_Fijo_1,' + ' ' +
                                'prpv.Tfno_Fijo_2 AS OT_PROPIETARIO_COLABORADOR_Tfno_Fijo_2,' + ' ' +
                                'prpv.FAX AS OT_PROPIETARIO_COLABORADOR_Tfno_FAX,' + ' ' +
                                'prpv.Movil AS OT_PROPIETARIO_COLABORADOR_Movil,' + ' ' +
                                'prpv.Direccion AS OT_PROPIETARIO_COLABORADOR_Direccion,' + ' ' +
                                'prpv.Direccion_Numero AS OT_PROPIETARIO_COLABORADOR_Direccion_Numero,' + ' ' +
                                'prpv.Direccion_Piso_Letra AS OT_PROPIETARIO_COLABORADOR_Direccion_Piso_Letra,' + ' ' +
                                'prpv.Codigo_Postal AS OT_PROPIETARIO_COLABORADOR_Codigo_Postal,' + ' ' +

                                'prpv.id_poblaciones AS OT_PROPIETARIO_COLABORADOR_id_poblaciones,' + ' ' +
                                'prpv.id_provincias AS OT_PROPIETARIO_COLABORADOR_id_provincias,' + ' ' +
                                'prpv.id_paises AS OT_PROPIETARIO_COLABORADOR_id_paises,' + ' ' +

                                'prpvpb.descripcion AS OT_PROPIETARIO_COLABORADOR_poblacion,' + ' ' +
                                'prpvpr.descripcion AS OT_PROPIETARIO_COLABORADOR_provincia,' + ' ' +
                                'prpvps.descripcion AS OT_PROPIETARIO_COLABORADOR_pais,' + ' ' +

                                'prpvcon.nombre AS OT_PROPIETARIO_COLABORADOR_CONTACTO_nombre,' + ' ' +
                                'prpvcon.Cargo_Puesto AS OT_PROPIETARIO_COLABORADOR_CONTACTO_Cargo_Puesto,' + ' ' +
                                'prpvcon.Tfno_Fijo_1 AS OT_PROPIETARIO_COLABORADOR_CONTACTO_Tfno_Fijo_1,' + ' ' +
                                'prpvcon.Tfno_Fijo_2 AS OT_PROPIETARIO_COLABORADOR_CONTACTO_Tfno_Fijo_2,' + ' ' +
                                'prpvcon.FAX AS OT_PROPIETARIO_COLABORADOR_CONTACTO_FAX,' + ' ' +
                                'prpvcon.Movil AS OT_PROPIETARIO_COLABORADOR_CONTACTO_Movil,' + ' ' +

                                // ***************************************************************** //
                                // ** CIA.ASEGURADORA / PROVEEDOR                                 ** //
                                // ***************************************************************** //
                                'asg.nombre_propietario AS OT_PROPIETARIO_ASEGURADORA_nombre_propietario,' + ' ' +
                                'asg.nombre_comercial AS OT_PROPIETARIO_ASEGURADORA_nombre_comercial,' + ' ' +
                                'asg.nif_cif AS OT_PROPIETARIO_ASEGURADORA_nif_cif,' + ' ' +
                                'asg.Tfno_Fijo_1 AS OT_PROPIETARIO_ASEGURADORA_Tfno_Fijo_1,' + ' ' +
                                'asg.Tfno_Fijo_2 AS OT_PROPIETARIO_ASEGURADORA_Tfno_Fijo_2,' + ' ' +
                                'asg.FAX AS OT_PROPIETARIO_ASEGURADORA_Tfno_FAX,' + ' ' +
                                'asg.Movil AS OT_PROPIETARIO_ASEGURADORA_Movil,' + ' ' +
                                'asg.Direccion AS OT_PROPIETARIO_ASEGURADORA_Direccion,' + ' ' +
                                'asg.Direccion_Numero AS OT_PROPIETARIO_ASEGURADORA_Direccion_Numero,' + ' ' +
                                'asg.Direccion_Piso_Letra AS OT_PROPIETARIO_ASEGURADORA_Direccion_Piso_Letra,' + ' ' +
                                'asg.Codigo_Postal AS OT_PROPIETARIO_ASEGURADORA_Codigo_Postal,' + ' ' +

                                'asg.id_poblaciones AS OT_PROPIETARIO_ASEGURADORA_id_poblaciones,' + ' ' +
                                'asg.id_provincias AS OT_PROPIETARIO_ASEGURADORA_id_provincias,' + ' ' +
                                'asg.id_paises AS OT_PROPIETARIO_ASEGURADORA_id_paises,' + ' ' +

                                'asgpb.descripcion AS OT_PROPIETARIO_ASEGURADORA_poblacion,' + ' ' +
                                'asgpr.descripcion AS OT_PROPIETARIO_ASEGURADORA_provincia,' + ' ' +
                                'asgps.descripcion AS OT_PROPIETARIO_ASEGURADORA_pais,' + ' ' +

                                'asgcon.nombre AS OT_PROPIETARIO_ASEGURADORA_CONTACTO_nombre,' + ' ' +
                                'asgcon.Cargo_Puesto AS OT_PROPIETARIO_ASEGURADORA_CONTACTO_Cargo_Puesto,' + ' ' +
                                'asgcon.Tfno_Fijo_1 AS OT_PROPIETARIO_ASEGURADORA_CONTACTO_Tfno_Fijo_1,' + ' ' +
                                'asgcon.Tfno_Fijo_2 AS OT_PROPIETARIO_ASEGURADORA_CONTACTO_Tfno_Fijo_2,' + ' ' +
                                'asgcon.FAX AS OT_PROPIETARIO_ASEGURADORA_CONTACTO_FAX,' + ' ' +
                                'asgcon.Movil AS OT_PROPIETARIO_ASEGURADORA_CONTACTO_Movil' + ' ' +

                         'FROM vehiculos AS v' + ' ' +

                         'LEFT JOIN almacenes AS alm' + ' ' +
                         'ON v.id_almacenes = alm.id' + ' ' +

                         'LEFT JOIN vehiculos_tipos AS vt' + ' ' +
                         'ON v.id_vehiculos_tipos = vt.id' + ' ' +

                         'LEFT JOIN vehiculos_marcas AS vm' + ' ' +
                         'ON v.id_vehiculos_marcas = vm.id' + ' ' +

                         'LEFT JOIN combustibles AS com' + ' ' +
                         'ON v.id_combustibles = com.id' + ' ' +

                         'LEFT JOIN vehiculos_tipo_cambios AS vtc' + ' ' +
                         'ON v.id_vehiculos_tipo_cambios = vtc.id' + ' ' +

                         'LEFT JOIN vehiculos_tipo_ruedas AS vtr' + ' ' +
                         'ON v.id_vehiculos_tipo_ruedas = vtr.id' + ' ' +

                         'LEFT JOIN personal AS p' + ' ' +
                         'ON v.id_personal_conductor_habitual = p.id' + ' ' +

                         'LEFT JOIN tarjetas_transporte AS ttte' + ' ' +
                         'ON v.id_tarjetas_transporte = ttte.id' + ' ' +

                         'LEFT JOIN proveedores AS prca' + ' ' +
                         'ON v.id_proveedores_comprado_a = prca.id' + ' ' +

                         // ************************************************************************ //
                         // ** PROPIETARIOS POR EMPRESA DEL GRUPO                                 ** //
                         // ************************************************************************ //
                         'LEFT JOIN empresas AS prem' + ' ' +
                         'ON v.id_empresas_propietario = prem.id' + ' ' +

                         'LEFT JOIN poblaciones AS prempb' + ' ' +
                         'ON prem.id_poblaciones = prempb.id' + ' ' +

                         'LEFT JOIN provincias AS prempr' + ' ' +
                         'ON prem.id_provincias = prempr.id' + ' ' +

                         'LEFT JOIN paises AS premps' + ' ' +
                         'ON prem.id_paises = premps.id' + ' ' +

                         // ************************************************************************ //
                         // ** PROPIETARIOS POR CLIENTE                                           ** //
                         // ************************************************************************ //
                         'LEFT JOIN clientes AS prcl' + ' ' +
                         'ON v.id_clientes_propietario = prcl.id' + ' ' +

                         'LEFT JOIN poblaciones AS prclpb' + ' ' +
                         'ON prcl.id_poblaciones = prclpb.id' + ' ' +

                         'LEFT JOIN provincias AS prclpr' + ' ' +
                         'ON prcl.id_provincias = prclpr.id' + ' ' +

                         'LEFT JOIN paises AS prclps' + ' ' +
                         'ON prcl.id_paises = prclps.id' + ' ' +

                         'LEFT JOIN clientes_contactos AS prclcon' + ' ' +
                         'ON v.id_clientes_propietario_contacto = prclcon.id' + ' ' +
                         'AND prclcon.id_clientes = v.id_clientes_propietario' + ' ' +

                         // ************************************************************************ //
                         // ** PROPIETARIOS POR COLABORADOR / PROVEEDOR                           ** //
                         // ************************************************************************ //
                         'LEFT JOIN proveedores AS prpv' + ' ' +
                         'ON v.id_proveedores_propietario = prpv.id' + ' ' +

                         'LEFT JOIN poblaciones AS prpvpb' + ' ' +
                         'ON prpv.id_poblaciones = prpvpb.id' + ' ' +

                         'LEFT JOIN provincias AS prpvpr' + ' ' +
                         'ON prpv.id_provincias = prpvpr.id' + ' ' +

                         'LEFT JOIN paises AS prpvps' + ' ' +
                         'ON prpv.id_paises = prpvps.id' + ' ' +

                         'LEFT JOIN proveedores_contactos AS prpvcon' + ' ' +
                         'ON v.id_proveedores_propietario_contacto = prpvcon.id' + ' ' +
                         'AND prpvcon.id_proveedores = v.id_proveedores_propietario' + ' ' +

                         // ************************************************************************ //
                         // ** CIA.ASEGURADORA / PROVEEDOR                                        ** //
                         // ************************************************************************ //
                         'LEFT JOIN proveedores AS asg' + ' ' +
                         'ON v.id_proveedores_aseguradora = asg.id' + ' ' +

                         'LEFT JOIN poblaciones AS asgpb' + ' ' +
                         'ON asg.id_poblaciones = asgpb.id' + ' ' +

                         'LEFT JOIN provincias AS asgpr' + ' ' +
                         'ON asg.id_provincias = asgpr.id' + ' ' +

                         'LEFT JOIN paises AS asgps' + ' ' +
                         'ON asg.id_paises = asgps.id' + ' ' +

                         'LEFT JOIN proveedores_contactos AS asgcon' + ' ' +
                         'ON v.id_proveedores_aseguradora_contacto = asgcon.id' + ' ' +
                         'AND asgcon.id_proveedores = v.id_proveedores_aseguradora' + ' ';
end;

function UTI_DATOS_TABLA_vehiculos_su_equipamiento_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vse';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_su_equipamiento',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_su_equipamiento',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vse.*,' + ' ' +
                                've.descripcion AS OT_descripcion_equipamiento' + ' ' +

                         'FROM vehiculos_su_equipamiento AS vse' + ' ' +

                         'LEFT JOIN vehiculos_equipamientos AS ve' + ' ' +
                         'ON vse.id_vehiculos_equipamientos = ve.id';
end;

function UTI_DATOS_TABLA_vehiculos_tipo_ruedas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vtr';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_tipo_ruedas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_tipo_ruedas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vtr.*' + ' ' +
                         'FROM vehiculos_tipo_ruedas AS vtr' + ' ';
end;

function UTI_DATOS_TABLA_vehiculos_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vt';

    Result.Delete_SQL := '';

        Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                           'vehiculos_tipos',
                                                           'u' );

        Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                           'vehiculos_tipos',
                                                           'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vt.*' + ' ' +
                         'FROM vehiculos_tipos AS vt' + ' ';
end;

function UTI_DATOS_TABLA_vehiculos_marcas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vm';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_marcas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_marcas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vm.*' + ' ' +
                         'FROM vehiculos_marcas AS vm' + ' ';
end;

function UTI_DATOS_TABLA_vehiculos_tipo_cambios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vtc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_tipo_cambios',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_tipo_cambios',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vtc.*' + ' ' +
                         'FROM vehiculos_tipo_cambios AS vtc' + ' ';
end;

function UTI_DATOS_TABLA_vehiculos_equipamientos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 've';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_equipamientos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'vehiculos_equipamientos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ve.*' + ' ' +
                         'FROM vehiculos_equipamientos AS ve' + ' ';
end;

function UTI_DATOS_TABLA_tarjetas_transporte_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ttte';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'tarjetas_transporte',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'tarjetas_transporte',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ttte.*,' + ' ' +
                                'e.nombre_comercial AS OT_Descripcion_Empresa' + ' ' +
                         'FROM tarjetas_transporte AS ttte' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON ttte.id_empresas = e.id' + ' ';
end;

function UTI_DATOS_TABLA_combustibles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'com';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'combustibles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'combustibles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT com.*' + ' ' +
                         'FROM combustibles AS com' + ' ';
end;

function UTI_DATOS_TABLA_Informes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'i';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'informes',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'informes',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT i.*,' + ' ' +
                                'm.Descripcion AS OT_Descripcion_Menu' + ' ' +
                         'FROM informes AS i' + ' ' +

                         'LEFT JOIN menus AS m' + ' ' +
                         'ON i.id_menus = m.id' + ' ';
end;

function UTI_DATOS_TABLA_Peliculas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'p';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'peliculas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'peliculas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT p.*,' + ' ' +
                                'm.descripcion AS OT_descripcion_medio' + ' ' +
                         'FROM peliculas AS p' + ' ' +

                         'LEFT JOIN medio AS m' + ' ' +
                         'ON p.id_medio = m.id' + ' ';
end;

function UTI_DATOS_TABLA_users_row_changes_fields_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'rf';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT rf.*,' + ' ' +
                                'u.Descripcion_Nick AS OT_Descripcion_Nick' + ' ' +
                         'FROM users_row_changes_fields AS rf' + ' ' +

                         'LEFT JOIN users AS u' + ' ' +
                         'ON rf.Id_Users = u.id' + ' ';
end;

function UTI_DATOS_TABLA_users_row_changes_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'r';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT r.*,' + ' ' +
                                'u.Descripcion_Nick AS OT_Descripcion_Nick' + ' ' +
                         'FROM users_row_changes AS r' + ' ' +

                         'LEFT JOIN users AS u' + ' ' +
                         'ON r.Id_Users = u.id' + ' ';
end;

function UTI_DATOS_TABLA_medio_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'm';

    Result.Delete_SQL := '';


    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'medio',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'medio',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT m.*' + ' ' +
                         'FROM medio AS m' + ' ';
end;

function UTI_DATOS_TABLA_users_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'u';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT u.*' + ' ' +
                         'FROM users AS u' + ' ';
end;

function UTI_DATOS_TABLA_users_menus_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'um';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users_menus',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users_menus',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT um.*,' + ' ' +
                                'u.Descripcion_Nick AS OT_Descripcion_Nick,' + ' ' +
                                'm.Descripcion AS OT_Descripcion_Menu' + ' ' +
                         'FROM users_menus AS um' + ' ' +

                         'LEFT JOIN users AS u' + ' ' +
                         'ON um.Id_Users = u.id' + ' ' +

                         'LEFT JOIN menus AS m' + ' ' +
                         'ON um.Id_Menus = m.id' + ' ';
end;

function UTI_DATOS_TABLA_users_passwords_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'up';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users_passwords',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users_passwords',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT up.*,' + ' ' +
                                'u.Descripcion_Nick AS OT_Descripcion_Nick' + ' ' +
                         'FROM users_passwords AS up' + ' ' +

                         'LEFT JOIN users AS u' + ' ' +
                         'ON up.Id_Users = u.id' + ' ';
end;

function UTI_DATOS_TABLA_users_menus_permissions_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'upe';
    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users_menus_permissions',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'users_menus_permissions',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT upe.*,' + ' ' +
                                'u.Descripcion_Nick AS OT_Descripcion_Nick,' + ' ' +
                                'm.Descripcion AS OT_Descripcion_Menu' + ' ' +
                         'FROM users_menus_permissions AS upe' + ' ' +

                         'LEFT JOIN users AS u' + ' ' +
                         'ON upe.Id_Users = u.id' + ' ' +

                         'LEFT JOIN menus AS m' + ' ' +
                         'ON upe.Id_Menus = m.id' + ' ';
end;

function UTI_DATOS_TABLA_menus_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'me';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'menus',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'menus',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT me.*' + ' ' +
                         'FROM menus AS me' + ' ';
end;

function UTI_DATOS_TABLA_clientes_envios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ce';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_envios',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_envios',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ce.*,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +
                                'cc.nombre AS OT_descripcion_Contacto' + ' ' +

                         'FROM clientes_envios AS ce' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON ce.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON ce.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON ce.id_paises = ps.id' + ' ' +

                         'LEFT JOIN clientes_contactos AS cc' + ' ' +
                         'ON ce.id_clientes_contactos = cc.id' + ' ';
end;

function UTI_DATOS_TABLA_clientes_contactos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'cc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_contactos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_contactos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cc.*' + ' ' +
                         'FROM clientes_contactos AS cc' + ' ';
end;

function UTI_DATOS_TABLA_clientes_periodos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'cp';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_periodos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_periodos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cp.*' + ' ' +
                         'FROM clientes_periodos AS cp' + ' ';
end;

function UTI_DATOS_TABLA_clientes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'cl';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cl.*,' + ' ' +

                                'act.descripcion AS OT_descripcion_actividad,' + ' ' +
                                'rt.descripcion AS OT_descripcion_ruta,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct.descripcion AS OT_descripcion_cliente_tipo,' + ' ' +
                                'ct.Cuenta_Contable AS OT_Cuenta_Contable_cliente_tipo,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago,' + ' ' +
                                'fp.Vencimientos_Cantidad AS OT_Vencimientos_Cantidad,' + ' ' +
                                'fp.Vencimientos_1_Dias AS OT_Vencimientos_1_Dias,' + ' ' +
                                'fp.Vencimientos_Dias_Entre AS OT_Vencimientos_Dias_Entre,' + ' ' +

                                'tf.descripcion AS OT_descripcion_tarifa,' + ' ' +

                                'prv.nombre_propietario AS OT_descripcion_agencia_transporte,' + ' ' +
                                'prv.Tfno_Fijo_1 AS OT_Tfno_Fijo_1_agencia_transporte,' + ' ' +
                                'prv.Movil AS OT_Movil_agencia_transporte,' + ' ' +

                                'rp.nombre_propietario AS OT_descripcion_representante,' + ' ' +
                                'rp.Tfno_Fijo_1 AS OT_Tfno_Fijo_1_representante,' + ' ' +
                                'rp.Movil AS OT_Movil_representante' + ' ' +

                         'FROM clientes AS cl' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON cl.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON cl.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON cl.id_paises = ps.id' + ' ' +

                         'LEFT JOIN clientes_tipos AS ct' + ' ' +
                         'ON cl.id_clientes_tipos = ct.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON cl.id_Cta_Bco_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON cl.id_Cta_Bco_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON cl.id_Cta_Bco_pais = ct_ps.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON cl.id_formas_pago = fp.id' + ' ' +

                         'LEFT JOIN tarifas AS tf' + ' ' +
                         'ON cl.id_tarifas = tf.id' + ' ' +

                         'LEFT JOIN proveedores AS prv' + ' ' +
                         'ON cl.id_Agencias_Transporte = prv.id' + ' ' +

                         'LEFT JOIN actividades AS act' + ' ' +
                         'ON cl.id_actividades = act.id' + ' ' +

                         'LEFT JOIN rutas AS rt' + ' ' +
                         'ON cl.id_rutas = rt.id' + ' ' +

                         'LEFT JOIN representantes AS rp' + ' ' +
                         'ON cl.id_Representantes = rp.id' + ' ';
end;

function UTI_DATOS_TABLA_utilidades_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := '';

    Result.Delete_SQL := '';

    Result.Update_SQL := '';

    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SHOW TABLE STATUS FROM `socger`';
end;

function UTI_DATOS_TABLA_paises_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'p';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'paises',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'paises',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT p.*' + ' ' +
                         'FROM paises AS p' + ' ';
end;

function UTI_DATOS_TABLA_clientes_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ct';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_tipos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'clientes_tipos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ct.*' + ' ' +
                         'FROM clientes_tipos AS ct' + ' ';
end;

function UTI_DATOS_TABLA_formas_pago_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'fp';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'formas_pago',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'formas_pago',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT fp.*' + ' ' + ' ' +
                         'FROM formas_pago AS fp' + ' ';
end;

function UTI_DATOS_TABLA_margenes_tarifas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'mt';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'margenes_tarifas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'margenes_tarifas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT mt.*' + ' ' + ' ' +
                         'FROM margenes_tarifas AS mt' + ' ';
end;

function UTI_DATOS_TABLA_tarifas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 't';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'tarifas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'tarifas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT t.*' + ' ' + ' ' +
                         'FROM tarifas AS t' + ' ';
end;

function UTI_DATOS_TABLA_provincias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pr';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'provincias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'provincias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pr.*,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais' + ' ' +
                         'FROM provincias AS pr' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON pr.id_paises = ps.id' + ' ';
end;

function UTI_DATOS_TABLA_poblaciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pb';

    Result.Delete_SQL := '';

        Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                           'poblaciones',
                                                           'u' );

        Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                           'poblaciones',
                                                           'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pb.*,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais' + ' ' +
                         'FROM poblaciones AS pb' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON pb.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON pb.id_paises = ps.id' + ' ';
end;

function UTI_DATOS_TABLA_representantes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'rp';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'representantes',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'representantes',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT rp.*,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago,' + ' ' +
                                'fp.Vencimientos_Cantidad AS OT_Vencimientos_Cantidad,' + ' ' +
                                'fp.Vencimientos_1_Dias AS OT_Vencimientos_1_Dias,' + ' ' +
                                'fp.Vencimientos_Dias_Entre AS OT_Vencimientos_Dias_Entre' + ' ' +

                         'FROM representantes AS rp' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON rp.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON rp.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON rp.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON rp.id_Cta_Bco_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON rp.id_Cta_Bco_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON rp.id_Cta_Bco_pais = ct_ps.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON rp.id_formas_pago = fp.id' + ' ';
end;

function UTI_DATOS_TABLA_proveedores_contactos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'prc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'proveedores_contactos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'proveedores_contactos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT prc.*' + ' ' +
                         'FROM proveedores_contactos AS prc' + ' ';
end;

function UTI_DATOS_TABLA_tarifas_margenes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'tm';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'tarifas_margenes',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'tarifas_margenes',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT tm.*, ' +

                               ' t.descripcion AS OT_Tarifa_Descripcion, ' +

                               ' mt.mayor_igual_que AS OT_mayor_igual_que, ' +
                               ' mt.menor_igual_que AS OT_menor_igual_que ' +

                           'FROM tarifas_margenes AS tm ' +

                           'LEFT JOIN tarifas AS t ' +
                             'ON tm.id_tarifas = t.id ' +

                           'LEFT JOIN margenes_tarifas AS mt ' +
                             'ON tm.id_margenes_tarifas = mt.id';
end;

function UTI_DATOS_TABLA_proveedores_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pr';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'proveedores',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'proveedores',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pr.*,' + ' ' +

                                'act.descripcion AS OT_descripcion_actividad,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'prv.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'pt.descripcion AS OT_descripcion_proveedor_tipo,' + ' ' +
                                'pt.Cuenta_Contable AS OT_Cuenta_Contable_proveedor_tipo,' + ' ' +


                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_prv.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais,' + ' ' +

                                'fp.descripcion AS OT_descripcion_forma_pago,' + ' ' +
                                'fp.Vencimientos_Cantidad AS OT_Vencimientos_Cantidad,' + ' ' +
                                'fp.Vencimientos_1_Dias AS OT_Vencimientos_1_Dias,' + ' ' +
                                'fp.Vencimientos_Dias_Entre AS OT_Vencimientos_Dias_Entre,' + ' ' +

                                'agprv.nombre_propietario AS OT_descripcion_agencia_transporte,' + ' ' +
                                'agprv.Tfno_Fijo_1 AS OT_Tfno_Fijo_1_agencia_transporte,' + ' ' +
                                'agprv.Movil AS OT_Movil_agencia_transporte' + ' ' +

                         'FROM proveedores AS pr' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON pr.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS prv' + ' ' +
                         'ON pr.id_provincias = prv.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON pr.id_paises = ps.id' + ' ' +

                         'LEFT JOIN proveedores_tipos AS pt' + ' ' +
                         'ON pr.id_proveedores_tipos = pt.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON pr.id_Cta_Bco_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_prv' + ' ' +
                         'ON pr.id_Cta_Bco_provincias = ct_prv.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON pr.id_Cta_Bco_pais = ct_ps.id' + ' ' +

                         'LEFT JOIN formas_pago AS fp' + ' ' +
                         'ON pr.id_formas_pago = fp.id' + ' ' +

                         'LEFT JOIN actividades AS act' + ' ' +
                         'ON pr.id_actividades = act.id' + ' ' +

                         'LEFT JOIN proveedores AS agprv' + ' ' +
                         'ON pr.id_Agencias_Transporte = agprv.id' + ' ';
end;

function UTI_DATOS_TABLA_proveedores_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pt';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'proveedores_tipos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'proveedores_tipos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pt.*' + ' ' + ' ' +
                         'FROM proveedores_tipos AS pt' + ' ';
end;

function UTI_DATOS_TABLA_Articulos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'a';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT a.*,' + ' ' +

                                'iv.descripcion AS OT_descripcion_impto_ventas,' + ' ' +
                                'ic.descripcion AS OT_descripcion_impto_compras,' + ' ' +

                                'p.nombre_propietario AS OT_descripcion_proveedor,' + ' ' +

                                'g.descripcion AS OT_descripcion_grupo_cocina,' + ' ' +
                                'im.descripcion AS OT_descripcion_impresora_comandas,' + ' ' +

                                'f.Cuenta_Contable_Ventas AS OT_Cuenta_Contable_articulo_Ventas,' + ' ' +
                                'f.Cuenta_Contable_Compras AS OT_Cuenta_Contable_articulo_Compras,' + ' ' +
                                'f.descripcion AS OT_descripcion_familia' + ' ' +

                         'FROM articulos AS a' + ' ' +

                         'LEFT JOIN impuestos AS iv' + ' ' +
                         'ON a.id_impuestos_Ventas = iv.id' + ' ' +

                         'LEFT JOIN impuestos AS ic' + ' ' +
                         'ON a.id_impuestos_Compras = ic.id' + ' ' +

                         'LEFT JOIN proveedores AS p' + ' ' +
                         'ON a.id_proveedores = p.id' + ' ' +

                         'LEFT JOIN grupos_cocina AS g' + ' ' +
                         'ON a.id_grupos_cocina = g.id' + ' ' +

                         'LEFT JOIN impresoras AS im' + ' ' +
                         'ON a.id_impresoras = im.id' + ' ' +

                         'LEFT JOIN articulos_familias AS f' + ' ' +
                         'ON a.id_articulos_familias = f.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_referencias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'arf';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_referencias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_referencias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT arf.*,' + ' ' +

                                'a.descripcion AS OT_Descripcion,' + ' ' +
                                'a.descripcion_para_TPV AS OT_Descripcion_para_TPV' + ' ' +

                         'FROM articulos_referencias AS arf' + ' ' +

                         'LEFT JOIN articulos AS a' + ' ' +
                         'ON a.id = arf.id_articulos' + ' ';
end;

function UTI_DATOS_TABLA_articulos_Sub_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'sub';

    Result.Delete_SQL := '';


    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT sub.*,' + ' ' +
                                'afs.descripcion AS OT_descripcion_familia_superior' + ' ' +
                         'FROM articulos_familias AS sub' + ' ' +

                         'LEFT JOIN articulos_familias AS afs' + ' ' +
                         'ON sub.id_articulos_familias = afs.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_familias_tarifas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ta';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias_tarifas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias_tarifas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ta.*,' + ' ' +
                                't.descripcion AS OT_descripcion_tarifa' + ' ' +
                         'FROM articulos_familias_tarifas AS ta' + ' ' +

                         'LEFT JOIN tarifas AS t' + ' ' +
                         'ON ta.id_tarifas = t.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_familias_terminales_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'te';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias_terminales',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias_terminales',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT te.*,' + ' ' +
                                't.descripcion AS OT_descripcion_terminal' + ' ' +
                         'FROM articulos_familias_terminales AS te' + ' ' +

                         'LEFT JOIN terminales AS t' + ' ' +
                         'ON te.id_terminales = t.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'af';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_familias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT af.*,' + ' ' +
                                'g.descripcion AS OT_descripcion_grupo_cocina,' + ' ' +
                                'im.descripcion AS OT_descripcion_impresora_comandas,' + ' ' +
                                'afs.descripcion AS OT_descripcion_familia_superior' + ' ' +

                         'FROM articulos_familias AS af' + ' ' +

                         'LEFT JOIN grupos_cocina AS g' + ' ' +
                         'ON af.id_grupos_cocina = g.id' + ' ' +

                         'LEFT JOIN grupos_cocina AS im' + ' ' +
                         'ON af.id_impresoras = im.id' + ' ' +

                         'LEFT JOIN articulos_familias AS afs' + ' ' +
                         'ON af.id_articulos_familias = afs.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_composiciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'co';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_composiciones',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_composiciones',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT co.*,' + ' ' +

                                '( SELECT a1.Fecha_Movimiento FROM albaranes_compras_detalles AS a1' + ' ' +
                                   'RIGHT JOIN albaranes_compras AS b2' + ' ' +
                                      'ON a1.id_albaranes = b2.id AND' + ' ' +
                                         'b2.Del_WHEN IS NULL' + ' ' +
                                   'WHERE a1.id_articulos = co.id_articulos_composiciones' + ' ' +
                                     'AND a1.Numero_Factura IS NULL' + ' ' +
                                     'AND a1.Del_WHEN IS NULL' + ' ' +
                                   'ORDER BY a1.id_articulos DESC, a1.Fecha_Movimiento DESC, a1.id DESC' + ' ' +
                                   'LIMIT 1 ) AS OT_Alb_Fecha_Movimiento,' + ' ' +

                                '( SELECT a1.PVP FROM albaranes_compras_detalles AS a1' + ' ' +
                                   'RIGHT JOIN albaranes_compras AS b2' + ' ' +
                                      'ON a1.id_albaranes = b2.id AND' + ' ' +
                                         'b2.Del_WHEN IS NULL' + ' ' +
                                   'WHERE a1.id_articulos = co.id_articulos_composiciones' + ' ' +
                                     'AND a1.Numero_Factura IS NULL' + ' ' +
                                     'AND a1.Del_WHEN IS NULL' + ' ' +
                                   'ORDER BY a1.id_articulos DESC, a1.Fecha_Movimiento DESC, a1.id DESC' + ' ' +
                                   'LIMIT 1 ) AS OT_Alb_PVP,' + ' ' +

                                '( SELECT a1.Fecha_Movimiento' + ' ' +
                                    'FROM facturas_compras_detalles AS a1' + ' ' +
                                   'RIGHT JOIN facturas_compras AS b2' + ' ' +
                                      'ON a1.id_facturas = b2.id AND' + ' ' +
                                         'b2.Del_WHEN IS NULL' + ' ' +
                                   'WHERE a1.id_articulos = co.id_articulos_composiciones' + ' ' +
                                     'AND a1.Del_WHEN IS NULL' + ' ' +
                                   'ORDER BY a1.id_articulos DESC, a1.Fecha_Movimiento DESC, a1.id DESC' + ' ' +
                                   'LIMIT 1 ) AS OT_Ftra_Fecha_Movimiento,' + ' ' +

                                '( SELECT a1.PVP' + ' ' +
                                    'FROM facturas_compras_detalles AS a1' + ' ' +
                                   'RIGHT JOIN facturas_compras AS b2' + ' ' +
                                      'ON a1.id_facturas = b2.id AND' + ' ' +
                                         'b2.Del_WHEN IS NULL' + ' ' +
                                   'WHERE a1.id_articulos = co.id_articulos_composiciones' + ' ' +
                                     'AND a1.Del_WHEN IS NULL' + ' ' +
                                   'ORDER BY a1.id_articulos DESC, a1.Fecha_Movimiento DESC, a1.id DESC' + ' ' +
                                   'LIMIT 1 ) AS OT_Ftra_PVP,' + ' ' +

                                'a.descripcion AS OT_descripcion_articulo_composicion' + ' ' +

                           'FROM articulos_composiciones AS co' + ' ' +

                           'LEFT JOIN articulos AS a' + ' ' +
                             'ON co.id_articulos_composiciones = a.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_tarifas_CRUD( param_SQLQuery : TSQLQuery;
                                                 param_precio_coste : String ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ta';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_tarifas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_tarifas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ta.*,' + ' ' +
                                't.descripcion AS OT_descripcion_tarifa,' + ' ';

    if Trim(param_precio_coste) = '' then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             '( SELECT 0 ) AS OT_mayor_igual_que,' + ' ' +
                             '( SELECT 0 ) AS OT_menor_igual_que,' + ' ' +
                             '( SELECT 0 ) AS OT_Beneficio,' + ' ' +
                             '( SELECT "S" ) AS OT_Beneficio_en_Tanto_por_Ciento_SN' + ' ';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             '( SELECT mt.mayor_igual_que' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = ta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_mayor_igual_que,' + ' ' +

                             '( SELECT mt.menor_igual_que' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = ta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_menor_igual_que,' + ' ' +

                             '( SELECT tm.Beneficio' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = ta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_Beneficio,' + ' ' +

                             '( SELECT tm.Beneficio_en_Tanto_por_Ciento_SN' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = ta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_Beneficio_en_Tanto_por_Ciento_SN' + ' ';
    end;

    Result.SELECT_SQL := Result.SELECT_SQL +
                         'FROM articulos_tarifas AS ta' + ' ' +

                         'LEFT JOIN tarifas AS t' + ' ' +
                         'ON ta.id_tarifas = t.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_terminales_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'te';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_terminales',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_terminales',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT te.*,' + ' ' +
                                't.descripcion AS OT_descripcion_terminal' + ' ' +
                         'FROM articulos_terminales AS te' + ' ' +

                         'LEFT JOIN terminales AS t' + ' ' +
                         'ON te.id_terminales = t.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_stock_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'st';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_stock',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_stock',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT st.*,' + ' ' +
                                'al.descripcion AS OT_descripcion_almacen' + ' ' +

                         'FROM articulos_stock AS st' + ' ' +

                         'LEFT JOIN almacenes AS al' + ' ' +
                         'ON st.id_almacenes = al.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_proporciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'po';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_proporciones',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_proporciones',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT po.*' + ' ' +
                         'FROM articulos_proporciones AS po' + ' ';
end;

function UTI_DATOS_TABLA_articulos_proporciones_tarifas_CRUD( param_SQLQuery : TSQLQuery;
                                                              param_precio_coste : String ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'apta';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_proporciones_tarifas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_proporciones_tarifas',
                                                       'i' );


    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT apta.*,' + ' ' +
                                't.descripcion AS OT_descripcion_tarifa,' + ' ';

    if Trim(param_precio_coste) = '' then
    begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             '( SELECT 0 ) AS OT_mayor_igual_que,' + ' ' +
                             '( SELECT 0 ) AS OT_menor_igual_que,' + ' ' +
                             '( SELECT 0 ) AS OT_Beneficio,' + ' ' +
                             '( SELECT "S" ) AS OT_Beneficio_en_Tanto_por_Ciento_SN' + ' ';
    end else begin
        Result.SELECT_SQL := Result.SELECT_SQL +
                             '( SELECT mt.mayor_igual_que' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = apta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_mayor_igual_que,' + ' ' +

                             '( SELECT mt.menor_igual_que' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = apta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_menor_igual_que,' + ' ' +

                             '( SELECT tm.Beneficio' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = apta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_Beneficio,' + ' ' +

                             '( SELECT tm.Beneficio_en_Tanto_por_Ciento_SN' + ' ' +
                                 'FROM tarifas_margenes AS tm' + ' ' +
                                'RIGHT JOIN margenes_tarifas AS mt' + ' ' +
                                   'ON tm.id_margenes_tarifas = mt.id' + ' ' +
                                  'AND ( ' + Trim(param_precio_coste) + ' >= mt.mayor_igual_que AND' + ' ' +
                                             Trim(param_precio_coste) + ' <= mt.menor_igual_que )' + ' ' +
                                'WHERE tm.id_tarifas = apta.id_tarifas' + ' ' +
                                'ORDER BY tm.id_tarifas ASC, tm.id_margenes_tarifas ASC ) AS OT_Beneficio_en_Tanto_por_Ciento_SN' + ' ';
    end;

    Result.SELECT_SQL := Result.SELECT_SQL +
                         'FROM articulos_proporciones_tarifas AS apta' + ' ' +

                         'LEFT JOIN tarifas AS t' + ' ' +
                         'ON apta.id_tarifas = t.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_ofertas_articulos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'AOA';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_ofertas_articulos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_ofertas_articulos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT AOA.*,' + ' ' +
                                'art.descripcion AS OT_descripcion_articulo' + ' ' +
                         'FROM articulos_ofertas_articulos AS AOA' + ' ' +

                         'LEFT JOIN articulos AS art' + ' ' +
                         'ON AOA.id_articulos = art.id' + ' ';
end;

function UTI_DATOS_TABLA_articulos_ofertas_dto_por_volumen_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'AODPV';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_ofertas_dto_por_volumen',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_ofertas_dto_por_volumen',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT AODPV.*' + ' ' +
                         'FROM articulos_ofertas_dto_por_volumen AS AODPV' + ' ';
end;

function UTI_DATOS_TABLA_articulos_ofertas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'AO';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_ofertas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'articulos_ofertas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT AO.*,' + ' ' +
                                'tr.descripcion AS OT_Descripcion_Tarifa' + ' ' +
                         'FROM articulos_ofertas AS AO' + ' ' +

                         'LEFT JOIN tarifas AS tr' + ' ' +
                         'ON AO.id_tarifas = tr.id' + ' ';
end;

function UTI_DATOS_TABLA_elegir_familia_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'af';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT af.*,' + ' ' +
                                'afs.descripcion AS OT_descripcion_familia_superior' + ' ' +
                         'FROM articulos_familias AS af' + ' ' +

                         'LEFT JOIN articulos_familias AS afs' + ' ' +
                         'ON af.id_articulos_familias = afs.id' + ' ';
end;

function UTI_DATOS_TABLA_terminales_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 't';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'terminales',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'terminales',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT t.*' + ' ' + ' ' +
                         'FROM terminales AS t' + ' ';
end;

function UTI_DATOS_TABLA_Elegir_Cliente_Contacto_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'cc';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cc.*' + ' ' +
                         'FROM clientes_contactos AS cc' + ' ';
end;

function UTI_DATOS_TABLA_Elegir_Cliente_Direccion_Envio_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'ce';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ce.*,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +
                                'cc.nombre AS OT_descripcion_Contacto' + ' ' +

                         'FROM clientes_envios AS ce' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON ce.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON ce.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON ce.id_paises = ps.id' + ' ' +

                         'LEFT JOIN clientes_contactos AS cc' + ' ' +
                         'ON ce.id_clientes_contactos = cc.id' + ' ';
end;

function UTI_DATOS_TABLA_Elegir_Proveedor_Contacto_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'prc';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT prc.*' + ' ' +
                         'FROM proveedores_contactos AS prc' + ' ';
end;

function UTI_DATOS_TABLA_impresoras_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'i';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'impresoras',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'impresoras',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT i.*' + ' ' +
                         'FROM impresoras AS i' + ' ';
end;

function UTI_DATOS_TABLA_impuestos_composiciones_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ic';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'impuestos_composiciones',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'impuestos_composiciones',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ic.*,' + ' ' +
                                'i.descripcion AS OT_descripcion_impuesto,' + ' ' +
                                'i.Cuenta_Contable AS OT_Cuenta_Contable,' + ' ' +
                                'i.Sumado_A_Ftra_SN AS OT_Sumado_A_Ftra_SN,' + ' ' +
                                'i.Tanto_Por_Ciento AS OT_Tanto_Por_Ciento' + ' ' +
                         'FROM impuestos_composiciones AS ic' + ' ' +

                         'LEFT JOIN impuestos AS i' + ' ' +
                         'ON ic.id_impuestos = i.id' + ' ';
end;

function UTI_DATOS_TABLA_servicios_regulares_periodos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'srp';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'servicios_regulares_periodos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'servicios_regulares_periodos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT srp.*' + ' ' +
                         'FROM servicios_regulares_periodos AS srp' + ' ';
end;

function UTI_DATOS_TABLA_servicios_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'srt';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'servicios_tipos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'servicios_tipos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT srt.* ' + ' ' +
                           'FROM servicios_tipos AS srt ' + ' ';
end;

function UTI_DATOS_TABLA_impuestos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'i';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'impuestos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'impuestos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT i.*' + ' ' +
                         'FROM impuestos AS i' + ' ';
end;

function UTI_DATOS_TABLA_diarios_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'dt';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'diarios_tipos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'diarios_tipos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT dt.*' + ' ' +
                         'FROM diarios_tipos AS dt' + ' ';
end;

function UTI_DATOS_TABLA_grupos_cocina_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'gc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'grupos_cocina',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'grupos_cocina',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT gc.*' + ' ' + ' ' +
                         'FROM grupos_cocina AS gc' + ' ';
end;

function UTI_DATOS_TABLA_Elija_impuesto_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'i';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT i.*' + ' ' +
                         'FROM impuestos AS i' + ' ';
end;

function UTI_DATOS_TABLA_Elija_articulos_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'a';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT a.*,' + ' ' +

                                'iv.descripcion OT_descripcion_impto_ventas,' + ' ' +
                                'ic.descripcion OT_descripcion_impto_compras,' + ' ' +

                                'p.nombre_propietario AS OT_descripcion_proveedor,' + ' ' +

                                'g.descripcion AS OT_descripcion_grupo_cocina,' + ' ' +
                                'im.descripcion AS OT_descripcion_impresora_comandas,' + ' ' +

                                'f.descripcion AS OT_descripcion_familia' + ' ' +

                         'FROM articulos AS a' + ' ' +

                         'LEFT JOIN impuestos AS iv' + ' ' +
                         'ON a.id_impuestos_Ventas = iv.id' + ' ' +

                         'LEFT JOIN impuestos AS ic' + ' ' +
                         'ON a.id_impuestos_Compras = ic.id' + ' ' +

                         'LEFT JOIN proveedores AS p' + ' ' +
                         'ON a.id_proveedores = p.id' + ' ' +

                         'LEFT JOIN grupos_cocina AS g' + ' ' +
                         'ON a.id_grupos_cocina = g.id' + ' ' +

                         'LEFT JOIN impresoras AS im' + ' ' +
                         'ON a.id_impresoras = im.id' + ' ' +

                         'LEFT JOIN articulos_familias AS f' + ' ' +
                         'ON a.id_articulos_familias = f.id' + ' ';
end;

function UTI_DATOS_TABLA_personal_Subfamilias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'sub';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_familias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_familias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT sub.*,' + ' ' +
                                'aps.descripcion AS OT_descripcion_familia_superior' + ' ' +
                         'FROM personal_familias AS sub' + ' ' +

                         'LEFT JOIN personal_familias AS aps' + ' ' +
                         'ON sub.id_personal_familias = aps.id' + ' ';
end;

function UTI_DATOS_TABLA_personal_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ap';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_familias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_familias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ap.*,' + ' ' +
                                'aps.descripcion AS OT_descripcion_familia_superior' + ' ' +
                         'FROM personal_familias AS ap' + ' ' +

                         'LEFT JOIN personal_familias AS aps' + ' ' +
                         'ON ap.id_personal_familias = aps.id' + ' ';
end;

function UTI_DATOS_TABLA_Elegir_personal_familias_CRUD : TRegistro_CRUD;
begin
    Result.name_tabla := 'pf';
    Result.Delete_SQL := '';
    Result.Update_SQL := '';
    Result.Insert_SQL := '';

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pf.*,' + ' ' +
                                'pfs.descripcion AS OT_descripcion_familia_superior' + ' ' +
                         'FROM personal_familias AS pf' + ' ' +

                         'LEFT JOIN personal_familias AS pfs' + ' ' +
                         'ON pf.id_personal_familias = pfs.id' + ' ';
end;

function UTI_DATOS_TABLA_personal_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'p';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT p.*,' + ' ' +

                                'pf.descripcion AS OT_Descripcion_Personal_Familias,' + ' ' +
                                'pf.Cuenta_Contable AS OT_Cuenta_Contable_Personal_tipo,' + ' ' +

                                'prv.nombre_propietario AS OT_Descripcion_Empleado_De,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'ct_pb.descripcion AS OT_Cta_Bco_descripcion_poblacion,' + ' ' +
                                'ct_pr.descripcion AS OT_Cta_Bco_descripcion_provincia,' + ' ' +
                                'ct_ps.descripcion AS OT_Cta_Bco_descripcion_pais' + ' ' +

                         'FROM personal AS p' + ' ' +

                         'LEFT JOIN personal_familias AS pf' + ' ' +
                         'ON p.id_personal_familias = pf.id' + ' ' +

                         'LEFT JOIN proveedores AS prv' + ' ' +
                         'ON p.id_Empleado_de = prv.id' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON p.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON p.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON p.id_paises = ps.id' + ' ' +

                         'LEFT JOIN poblaciones AS ct_pb' + ' ' +
                         'ON p.id_Cta_Bco_poblaciones = ct_pb.id' + ' ' +

                         'LEFT JOIN provincias AS ct_pr' + ' ' +
                         'ON p.id_Cta_Bco_provincias = ct_pr.id' + ' ' +

                         'LEFT JOIN paises AS ct_ps' + ' ' +
                         'ON p.id_Cta_Bco_pais = ct_ps.id' + ' ';
end;

function UTI_DATOS_TABLA_personal_contratos_familias_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pcf';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_contratos_familias',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_contratos_familias',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pcf.*' + ' ' + ' ' +
                         'FROM personal_contratos_familias AS pcf' + ' ';
end;

function UTI_DATOS_TABLA_personal_contratos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'pc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_contratos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'personal_contratos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT pc.*,' + ' ' +

                                'p.nombre AS OT_Nombre_Empleado,' + ' ' +
                                'pcf.descripcion AS OT_Descripcion_Contrato,' + ' ' +
                                'e.nombre_comercial AS OT_Descripcion_Empresa' + ' ' +

                         'FROM personal_contratos AS pc' + ' ' +

                         'LEFT JOIN personal AS p' + ' ' +
                         'ON pc.id_personal = p.id' + ' ' +

                         'LEFT JOIN personal_contratos_familias AS pcf' + ' ' +
                         'ON pc.id_personal_contratos_familias = pcf.id' + ' ' +

                         'LEFT JOIN empresas AS e' + ' ' +
                         'ON pc.id_empresas = e.id' + ' ';
end;

function UTI_DATOS_TABLA_empresas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'e';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'empresas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'empresas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT e.*,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais' + ' ' +

                         'FROM empresas AS e' + ' ' +

                         'LEFT JOIN poblaciones AS pb' + ' ' +
                         'ON e.id_poblaciones = pb.id' + ' ' +

                         'LEFT JOIN provincias AS pr' + ' ' +
                         'ON e.id_provincias = pr.id' + ' ' +

                         'LEFT JOIN paises AS ps' + ' ' +
                         'ON e.id_paises = ps.id' + ' ';
end;

function UTI_DATOS_TABLA_configuracion_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'conf';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'configuracion',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'configuracion',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT conf.*' + ' ' +
                         'FROM configuracion AS conf' + ' ';
end;

function UTI_DATOS_TABLA_almacenes_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'alm';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'almacenes',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'almacenes',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT alm.*, ' + ' ' +

                                'e.nombre_comercial AS OT_Descripcion_Empresa, ' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion, ' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia, ' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais ' + ' ' +

                         'FROM almacenes AS alm ' + ' ' +

                         'LEFT JOIN empresas AS e ' + ' ' +
                         'ON alm.id_empresas = e.id ' + ' ' +

                         'LEFT JOIN poblaciones AS pb ' + ' ' +
                         'ON alm.id_poblaciones = pb.id ' + ' ' +

                         'LEFT JOIN provincias AS pr ' + ' ' +
                         'ON alm.id_provincias = pr.id ' + ' ' +

                         'LEFT JOIN paises AS ps ' + ' ' +
                         'ON alm.id_paises = ps.id ' + ' ';
end;

function UTI_DATOS_TABLA_visitas_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vist';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'visitas_tipos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'visitas_tipos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vist.* ' + ' ' +
                           'FROM visitas_tipos AS vist ' + ' ';
end;

function UTI_DATOS_TABLA_visitas_resultados_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'visr';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'visitas_resultados',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'visitas_resultados',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT visr.* ' + ' ' +
                           'FROM visitas_resultados AS visr ' + ' ';
end;

function UTI_DATOS_TABLA_rutas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'rt';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'rutas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'rutas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT rt.* ' + ' ' +
                           'FROM rutas AS rt ' + ' ';
end;

function UTI_DATOS_TABLA_actividades_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'act';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'actividades',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'actividades',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT act.* ' + ' ' +
                           'FROM actividades AS act ' + ' ';
end;

function UTI_DATOS_TABLA_facturas_cerradas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'cie';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_cerradas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'facturas_cerradas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cie.*,' + ' ' +
                                'emp.nombre_comercial AS OT_Descripcion_empresa' + ' ' +
                         'FROM facturas_cerradas AS cie' + ' ' +
                         'LEFT JOIN empresas AS emp' + ' ' +
                         'ON cie.id_empresas = emp.id' + ' ';
end;

function UTI_DATOS_TABLA_visitas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'vis';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'visitas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'visitas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT vis.*,' + ' ' +

                                'c.nombre_propietario AS OT_descripcion_cliente,' + ' ' +
                                'c.id_clientes_tipos AS OT_id_clientes_tipos,' + ' ' +
                                'c.id_actividades AS OT_id_actividades,' + ' ' +
                                'c.id_rutas AS OT_id_rutas,' + ' ' +
                                'c.nif_cif AS OT_nif_cif,' + ' ' +
                                'c.id_poblaciones AS OT_id_poblaciones,' + ' ' +
                                'c.id_provincias AS OT_id_provincias,' + ' ' +
                                'c.id_paises AS OT_id_paises,' + ' ' +
                                'c.Tfno_Fijo_1 AS OT_Tfno_Fijo_1,' + ' ' +
                                'c.Tfno_Fijo_2 AS OT_Tfno_Fijo_2,' + ' ' +
                                'c.FAX AS OT_FAX,' + ' ' +
                                'c.Movil AS OT_Movil,' + ' ' +

                                'cc.nombre AS OT_descripcion_Contacto,' + ' ' +
                                'ct.descripcion AS OT_descripcion_cliente_tipo,' + ' ' +
                                'act.descripcion AS OT_descripcion_actividad,' + ' ' +
                                'rt.descripcion AS OT_descripcion_ruta,' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion,' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia,' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais,' + ' ' +

                                'rep.nombre_propietario AS OT_descripcion_representante,' + ' ' +
                                'vist.descripcion AS OT_descripcion_visita_tipo,' + ' ' +
                                'visr.descripcion AS OT_descripcion_visita_resultado' + ' ' +

                           'FROM visitas AS vis ' + ' ' +

                             'LEFT JOIN clientes AS c' + ' ' +
                             'ON vis.id_clientes = c.id' + ' ' +

                             'LEFT JOIN poblaciones AS pb' + ' ' +
                             'ON c.id_poblaciones = pb.id' + ' ' +

                             'LEFT JOIN provincias AS pr' + ' ' +
                             'ON c.id_provincias = pr.id' + ' ' +

                             'LEFT JOIN paises AS ps' + ' ' +
                             'ON c.id_paises = ps.id' + ' ' +

                             'LEFT JOIN clientes_tipos AS ct' + ' ' +
                             'ON c.id_clientes_tipos = ct.id' + ' ' +

                             'LEFT JOIN actividades AS act' + ' ' +
                             'ON c.id_actividades = act.id' + ' ' +

                             'LEFT JOIN rutas AS rt' + ' ' +
                             'ON c.id_rutas = rt.id' + ' ' +

                             'LEFT JOIN visitas_tipos AS vist' + ' ' +
                             'ON vis.id_visitas_tipos = vist.id' + ' ' +

                             'LEFT JOIN visitas_resultados AS visr' + ' ' +
                             'ON vis.id_visitas_resultados = visr.id' + ' ' +

                             'LEFT JOIN clientes_contactos AS cc' + ' ' +
                             'ON vis.id_clientes_contactos = cc.id' + ' ' +

                             'LEFT JOIN representantes AS rep' + ' ' +
                             'ON vis.id_representantes = rep.id' + ' ';
end;

function UTI_DATOS_TABLA_gastos_tipos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'gt';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'gastos_tipos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'gastos_tipos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT gt.*' + ' ' +
                         'FROM gastos_tipos AS gt' + ' ';
end;

function UTI_DATOS_TABLA_cuentas_pagos_cobros_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'cpc';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'cuentas_pagos_cobros',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'cuentas_pagos_cobros',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cpc.* ' + ' ' +
                         'FROM cuentas_pagos_cobros AS cpc ' + ' ';
end;

function UTI_DATOS_TABLA_conceptos_almacen_traspaso_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'cat';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'conceptos_almacen_traspaso',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'conceptos_almacen_traspaso',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT cat.*' + ' ' +
                         'FROM conceptos_almacen_traspaso AS cat' + ' ';
end;

function UTI_DATOS_TABLA_bancos_empresas_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'be';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'bancos_empresas',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'bancos_empresas',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT be.*, ' + ' ' +

                                'e.nombre_comercial AS OT_Descripcion_Empresa, ' + ' ' +

                                'pb.descripcion AS OT_descripcion_poblacion, ' + ' ' +
                                'pr.descripcion AS OT_descripcion_provincia, ' + ' ' +
                                'ps.descripcion AS OT_descripcion_pais ' + ' ' +

                         'FROM bancos_empresas AS be ' + ' ' +

                         'LEFT JOIN empresas AS e ' + ' ' +
                         'ON be.id_empresas = e.id ' + ' ' +

                         'LEFT JOIN poblaciones AS pb ' + ' ' +
                         'ON be.id_poblaciones = pb.id ' + ' ' +

                         'LEFT JOIN provincias AS pr ' + ' ' +
                         'ON be.id_provincias = pr.id ' + ' ' +

                         'LEFT JOIN paises AS ps ' + ' ' +
                         'ON be.id_paises = ps.id ' + ' ';
end;

function UTI_DATOS_TABLA_almacenes_movimientos_detalles_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'amd';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'almacenes_movimientos_detalles',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'almacenes_movimientos_detalles',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT amd.*,' + ' ' +
                                'art.Tipo_de_articulo AS OT_Tipo_de_articulo,' + ' ' +
                                'art.descripcion AS OT_descripcion_articulo' + ' ' +
                         'FROM almacenes_movimientos_detalles AS amd' + ' ' +

                         'LEFT JOIN articulos AS art' + ' ' +
                         'ON amd.id_articulos = art.id' + ' ';
end;

function UTI_DATOS_TABLA_almacenes_movimientos_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'am';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'almacenes_movimientos',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'almacenes_movimientos',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT am.*,' + ' ' +

                                'ad.descripcion AS OT_descripcion_almacen_destino,' + ' ' +
                                'ao.descripcion AS OT_descripcion_almacen_origen,' + ' ' +

                                'cat.descripcion AS OT_descripcion_conceptos_almacen_traspaso' + ' ' +

                         'FROM almacenes_movimientos AS am' + ' ' +

                         'LEFT JOIN almacenes AS ad' + ' ' +
                         'ON am.id_almacenes_destino = ad.id' + ' ' +

                         'LEFT JOIN almacenes AS ao' + ' ' +
                         'ON am.id_almacenes_origen = ao.id' + ' ' +

                         'LEFT JOIN conceptos_almacen_traspaso AS cat' + ' ' +
                         'ON am.id_conceptos_almacen_traspaso = cat.id' + ' ';
end;

function UTI_DATOS_TABLA_Traer_Users_xDescripcion_Nick( param_Descripcion_Nick : String ) : TUsers;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Users_xDescripcion_Nick';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Users_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE u.Descripcion_Nick = ' + UTI_GEN_Comillas(Trim(param_Descripcion_Nick)) );
        var_SQLQuery.SQL.Add( 'ORDER BY u.Descripcion_Nick ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id               := FieldByName('id').AsString;

                 Result.Descripcion_Nick := FieldByName('Descripcion_Nick').AsString;
                 Result.Id_Empleados     := FieldByName('Id_Empleados').AsString;
                 Result.Permiso_Total_SN := FieldByName('Permiso_Total_SN').AsString;
                 Result.Tipo             := FieldByName('Tipo').AsString;

                 Result.Insert_WHEN      := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User   := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN         := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User      := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY          := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN      := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User   := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del usuario ' +
                               Trim(param_Descripcion_Nick) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Almacenes_xID( param_id : ShortString ) : TAlmacenes;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Almacenes_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Almacenes_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE alm.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY alm.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                   := FieldByName('id').AsString;

                 Result.descripcion          := FieldByName('descripcion').AsString;
                 Result.Responsable          := FieldByName('Responsable').AsString;
                 Result.Direccion            := FieldByName('Direccion').AsString;
                 Result.Direccion_Numero     := FieldByName('Direccion_Numero').AsString;
                 Result.Direccion_Piso_Letra := FieldByName('Direccion_Piso_Letra').AsString;
                 Result.Codigo_Postal        := FieldByName('Codigo_Postal').AsString;
                 Result.id_poblaciones       := FieldByName('id_poblaciones').AsString;
                 Result.id_provincias        := FieldByName('id_provincias').AsString;
                 Result.id_paises            := FieldByName('id_paises').AsString;
                 Result.Tfno_Fijo_1          := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2          := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX                  := FieldByName('FAX').AsString;
                 Result.Movil                := FieldByName('Movil').AsString;
                 Result.eMail                := FieldByName('eMail').AsString;
                 Result.id_empresas          := FieldByName('id_empresas').AsString;

                 Result.Insert_WHEN          := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User       := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN             := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User          := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY              := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN          := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User       := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del almacén/tienda con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

procedure UTI_DATOS_TABLA_Traer_facturas_ventas_xID( param_id : String;
                                                     param_SQLTransaction : TSQLTransaction;
                                                     param_SQLConnector : TSQLConnector;
                                                     param_SQLQuery : TSQLQuery );
var var_Registro_CRUD  : TRegistro_CRUD;
begin
    // ********************************************************************************************* //
    // ** Abrimos la Transaccion y la conexión con el motor BD                                    ** //
    // ********************************************************************************************* //
    if UTI_CN_Abrir( param_SQLTransaction,
                     param_SQLConnector ) = false then UTI_GEN_Salir;

    // ********************************************************************************************* //
    // ** Al SQLQuery le pasamos el SQLConnector                                                  ** //
    // ********************************************************************************************* //
    param_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_facturas_ventas_xID';
    param_SQLQuery.Database := param_SQLConnector;

    // ********************************************************************************************* //
    // ** Creamos la SQL                                                                          ** //
    // ********************************************************************************************* //
    var_Registro_CRUD := UTI_DATOS_TABLA_facturas_ventas_CRUD(param_SQLQuery);

    param_SQLQuery.SQL.Clear;
    param_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

    // ********************************************************************************************* //
    // ** Continuamos con la confección de la SQL                                                 ** //
    // ********************************************************************************************* //
    param_SQLQuery.SQL.Add( 'WHERE f.id = ' + Trim(param_id) );
    param_SQLQuery.SQL.Add( 'ORDER BY f.id ASC' );

    // ********************************************************************************************* //
    // ** Abrimos la Query                                                                        ** //
    // ********************************************************************************************* //
    if UTI_TB_Abrir( '', '', '',
                     param_SQLConnector,
                     param_SQLTransaction,
                     param_SQLQuery,
                     -1, // asi me trae todos los registros de golpe
                     param_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;
end;

procedure UTI_DATOS_TABLA_Traer_facturas_ventas_detalles_xid_Ftra( param_id : String;
                                                                   param_SQLTransaction : TSQLTransaction;
                                                                   param_SQLConnector : TSQLConnector;
                                                                   param_SQLQuery : TSQLQuery );
var var_Registro_CRUD  : TRegistro_CRUD;
begin
    // ********************************************************************************************* //
    // ** Abrimos la Transaccion y la conexión con el motor BD                                    ** //
    // ********************************************************************************************* //
    if UTI_CN_Abrir( param_SQLTransaction,
                     param_SQLConnector ) = false then UTI_GEN_Salir;

    // ********************************************************************************************* //
    // ** Al SQLQuery le pasamos el SQLConnector                                                  ** //
    // ********************************************************************************************* //
    param_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_facturas_ventas_detalles_xid_Ftra';
    param_SQLQuery.Database := param_SQLConnector;

    // ********************************************************************************************* //
    // ** Creamos la SQL                                                                          ** //
    // ********************************************************************************************* //
    var_Registro_CRUD := UTI_DATOS_TABLA_facturas_ventas_detalles_CRUD(param_SQLQuery, true);

    param_SQLQuery.SQL.Clear;
    param_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

    // ********************************************************************************************* //
    // ** Continuamos con la confección de la SQL                                                 ** //
    // ********************************************************************************************* //
    param_SQLQuery.SQL.Add( 'WHERE fd.id_facturas = ' + Trim(param_id) );
    param_SQLQuery.SQL.Add(   'AND fd.Del_WHEN IS NULL' );

    param_SQLQuery.SQL.Add( 'ORDER BY fd.id_facturas ASC, id ASC' );

    // ********************************************************************************************* //
    // ** Abrimos la Query                                                                        ** //
    // ********************************************************************************************* //
    if UTI_TB_Abrir( '', '', '',
                     param_SQLConnector,
                     param_SQLTransaction,
                     param_SQLQuery,
                     -1, // asi me trae todos los registros de golpe
                     param_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;
end;

procedure UTI_DATOS_TABLA_Traer_poblacion_xID( param_id : String;
                                               param_SQLTransaction : TSQLTransaction;
                                               param_SQLConnector : TSQLConnector;
                                               param_SQLQuery : TSQLQuery );
var var_Registro_CRUD  : TRegistro_CRUD;
begin
    // ********************************************************************************************* //
    // ** Abrimos la Transaccion y la conexión con el motor BD                                    ** //
    // ********************************************************************************************* //
    if UTI_CN_Abrir( param_SQLTransaction,
                     param_SQLConnector ) = false then UTI_GEN_Salir;

    // ********************************************************************************************* //
    // ** Al SQLQuery le pasamos el SQLConnector                                                  ** //
    // ********************************************************************************************* //
    param_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_poblacion_xID';
    param_SQLQuery.Database := param_SQLConnector;

    // ********************************************************************************************* //
    // ** Creamos la SQL                                                                          ** //
    // ********************************************************************************************* //
    var_Registro_CRUD := UTI_DATOS_TABLA_poblaciones_CRUD(param_SQLQuery);

    param_SQLQuery.SQL.Clear;
    param_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

    // ********************************************************************************************* //
    // ** Continuamos con la confección de la SQL                                                 ** //
    // ********************************************************************************************* //
    param_SQLQuery.SQL.Add( 'WHERE pb.id = ' + Trim(param_id) );
    param_SQLQuery.SQL.Add( 'ORDER BY pb.id ASC' );

    // ********************************************************************************************* //
    // ** Abrimos la Query                                                                        ** //
    // ********************************************************************************************* //
    if UTI_TB_Abrir( '', '', '',
                     param_SQLConnector,
                     param_SQLTransaction,
                     param_SQLQuery,
                     -1, // asi me trae todos los registros de golpe
                     param_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;
end;

function UTI_DATOS_TABLA_Traer_Personal_xID( param_id : ShortString ) : TPersonal;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
  try
    // ***************************************************************************************** //
    // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
    // ***************************************************************************************** //
    var_SQLTransaction := TSQLTransaction.Create(nil);
    var_SQLConnector   := TSQLConnector.Create(nil);

    if UTI_CN_Abrir( var_SQLTransaction,
                     var_SQLConnector ) = false then UTI_GEN_Salir;

    // ***************************************************************************************** //
    // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
    // ***************************************************************************************** //
    var_SQLQuery          := TSQLQuery.Create(nil);
    var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Personal_xID';
    var_SQLQuery.Database := var_SQLConnector;

    // ***************************************************************************************** //
    // ** Creamos la SQL                                                                      ** //
    // ***************************************************************************************** //
    var_Registro_CRUD := UTI_DATOS_TABLA_personal_CRUD(var_SQLQuery);
    var_SQLQuery.SQL.Clear;
    var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

    // ***************************************************************************************** //
    // ** Continuamos con la confección de la SQL                                             ** //
    // ***************************************************************************************** //
    var_SQLQuery.SQL.Add( 'WHERE p.id = ' + Trim(param_id) );
    var_SQLQuery.SQL.Add( 'ORDER BY p.id ASC' );

    // ***************************************************************************************** //
    // ** Abrimos la Query                                                                    ** //
    // ***************************************************************************************** //
    if UTI_TB_Abrir( '', '', '',
                     var_SQLConnector,
                     var_SQLTransaction,
                     var_SQLQuery,
                     -1, // asi me trae todos los registros de golpe
                     var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

    // ***************************************************************************************** //
    // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
    // ***************************************************************************************** //
    // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
    // ***************************************************************************************** //
    if var_SQLQuery.RecordCount = 0 then
      Result.id := '0' // No encontremos este registro
    else begin
      with var_SQLQuery do
      begin
        Result.id                               := FieldByName('id').AsString;
        Result.id_Empleado_de                   := FieldByName('id_Empleado_de').AsString;
        Result.nombre                           := FieldByName('nombre').AsString;
        Result.id_personal_familias             := FieldByName('id_personal_familias').AsString;
        Result.nif_cif                          := FieldByName('nif_cif').AsString;
        Result.nif_cif_caducidad                := FieldByName('nif_cif_caducidad').AsString;
        Result.Fecha_Nacimiento                 := FieldByName('Fecha_Nacimiento').AsString;
        Result.Tfno_Fijo_1                      := FieldByName('Tfno_Fijo_1').AsString;
        Result.Tfno_Fijo_2                      := FieldByName('Tfno_Fijo_2').AsString;
        Result.FAX                              := FieldByName('FAX').AsString;
        Result.Movil                            := FieldByName('Movil').AsString;
        Result.eMail                            := FieldByName('eMail').AsString;
        Result.Direccion                        := FieldByName('Direccion').AsString;
        Result.Direccion_Numero                 := FieldByName('Direccion_Numero').AsString;
        Result.Direccion_Piso_Letra             := FieldByName('Direccion_Piso_Letra').AsString;
        Result.Codigo_Postal                    := FieldByName('Codigo_Postal').AsString;
        Result.id_poblaciones                   := FieldByName('id_poblaciones').AsString;
        Result.id_provincias                    := FieldByName('id_provincias').AsString;
        Result.id_paises                        := FieldByName('id_paises').AsString;
        Result.Cta_Bco_Entidad                  := FieldByName('Cta_Bco_Entidad').AsString;
        Result.Cta_Bco_Sucursal                 := FieldByName('Cta_Bco_Sucursal').AsString;
        Result.Cta_Bco_Digito_Control           := FieldByName('Cta_Bco_Digito_Control').AsString;
        Result.Cta_Bco_Cuenta                   := FieldByName('Cta_Bco_Cuenta').AsString;
        Result.Cta_Bco_IBAN                     := FieldByName('Cta_Bco_IBAN').AsString;
        Result.Cta_Bco_BIC_SWIFT                := FieldByName('Cta_Bco_BIC_SWIFT').AsString;
        Result.Cta_Bco_Mandato_Fecha_de_Firma   := FieldByName('Cta_Bco_Mandato_Fecha_de_Firma').AsString;
        Result.Cta_Bco_Mandato_Ref              := FieldByName('Cta_Bco_Mandato_Ref').AsString;
        Result.Cta_Bco_Direccion                := FieldByName('Cta_Bco_Direccion').AsString;
        Result.Cta_Bco_Direccion_Numero         := FieldByName('Cta_Bco_Direccion_Numero').AsString;
        Result.Cta_Bco_Direccion_Piso_Letra     := FieldByName('Cta_Bco_Direccion_Piso_Letra').AsString;
        Result.Cta_Bco_Codigo_Postal            := FieldByName('Cta_Bco_Codigo_Postal').AsString;
        Result.id_Cta_Bco_poblaciones           := FieldByName('id_Cta_Bco_poblaciones').AsString;
        Result.id_Cta_Bco_provincias            := FieldByName('id_Cta_Bco_provincias').AsString;
        Result.id_Cta_Bco_pais                  := FieldByName('id_Cta_Bco_pais').AsString;
        Result.Activar_Proximidad_SN            := FieldByName('Activar_Proximidad_SN').AsString;
        Result.Cuenta_Contable                  := FieldByName('Cuenta_Contable').AsString;
        Result.Observaciones_Comentarios        := FieldByName('Observaciones_Comentarios').AsString;
        Result.Comision                         := FieldByName('Comision').AsString;
        Result.Controlar_su_Presencia           := FieldByName('Controlar_su_Presencia').AsString;
        Result.Seguridad_Social                 := FieldByName('Seguridad_Social').AsString;

        Result.Insert_WHEN                      := FieldByName('Insert_WHEN').AsString;
        Result.Insert_Id_User                   := FieldByName('Insert_Id_User').AsString;
        Result.Del_WHEN                         := FieldByName('Del_WHEN').AsString;
        Result.Del_Id_User                      := FieldByName('Del_Id_User').AsString;
        Result.Del_WHY                          := FieldByName('Del_WHY').AsString;
        Result.Change_WHEN                      := FieldByName('Change_WHEN').AsString;
        Result.Change_Id_User                   := FieldByName('Change_Id_User').AsString;

        Result.OT_Descripcion_Personal_Familias := FieldByName('OT_Descripcion_Personal_Familias').AsString;
        Result.OT_Cuenta_Contable_Personal_tipo := FieldByName('OT_Cuenta_Contable_Personal_tipo').AsString;
        Result.OT_Descripcion_Empleado_De       := FieldByName('OT_Descripcion_Empleado_De').AsString;
        Result.OT_descripcion_poblacion         := FieldByName('OT_descripcion_poblacion').AsString;
        Result.OT_descripcion_provincia         := FieldByName('OT_descripcion_provincia').AsString;
        Result.OT_descripcion_pais              := FieldByName('OT_descripcion_pais').AsString;
        Result.OT_Cta_Bco_descripcion_poblacion := FieldByName('OT_Cta_Bco_descripcion_poblacion').AsString;
        Result.OT_Cta_Bco_descripcion_provincia := FieldByName('OT_Cta_Bco_descripcion_provincia').AsString;
        Result.OT_Cta_Bco_descripcion_pais      := FieldByName('OT_Cta_Bco_descripcion_pais').AsString;
      end;
    end;

    // ***************************************************************************************** //
    // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
    // ***************************************************************************************** //
    if UTI_TB_Cerrar( var_SQLConnector,
                      var_SQLTransaction,
                      var_SQLQuery ) = false then UTI_GEN_Salir;

    // ***************************************************************************************** //
    // ** Destruimos la tabla y conexiones                                                    ** //
    // ***************************************************************************************** //
    var_SQLQuery.Free;
    var_SQLTransaction.Free;
    var_SQLConnector.Free;
  except
    on error : Exception do
    begin
      UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del empleado con' +
                         ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                         var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                         error );
      try
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
        var_SQLQuery.Free;
      except
      end;
    end;
  end;
end;

function UTI_DATOS_TABLA_Traer_Representantes_xID( param_id : ShortString ) : TRepresentantes;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Representantes_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_representantes_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE rp.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY rp.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                               := FieldByName('id').AsString;
                 Result.nombre_propietario               := FieldByName('nombre_propietario').AsString;
                 Result.nombre_comercial                 := FieldByName('nombre_comercial').AsString;
                 Result.nif_cif                          := FieldByName('nif_cif').AsString;
                 Result.Fecha_Nacimiento                 := FieldByName('Fecha_Nacimiento').AsString;
                 Result.Tfno_Fijo_1                      := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2                      := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX                              := FieldByName('FAX').AsString;
                 Result.Movil                            := FieldByName('Movil').AsString;
                 Result.eMail                            := FieldByName('eMail').AsString;
                 Result.pagina_web                       := FieldByName('pagina_web').AsString;
                 Result.Direccion                        := FieldByName('Direccion').AsString;
                 Result.Direccion_Numero                 := FieldByName('Direccion_Numero').AsString;
                 Result.Direccion_Piso_Letra             := FieldByName('Direccion_Piso_Letra').AsString;
                 Result.Codigo_Postal                    := FieldByName('Codigo_Postal').AsString;
                 Result.id_poblaciones                   := FieldByName('id_poblaciones').AsString;
                 Result.id_provincias                    := FieldByName('id_provincias').AsString;
                 Result.id_paises                        := FieldByName('id_paises').AsString;
                 Result.Cta_Bco_Entidad                  := FieldByName('Cta_Bco_Entidad').AsString;
                 Result.Cta_Bco_Sucursal                 := FieldByName('Cta_Bco_Sucursal').AsString;
                 Result.Cta_Bco_Digito_Control           := FieldByName('Cta_Bco_Digito_Control').AsString;
                 Result.Cta_Bco_Cuenta                   := FieldByName('Cta_Bco_Cuenta').AsString;
                 Result.Cta_Bco_IBAN                     := FieldByName('Cta_Bco_IBAN').AsString;
                 Result.Cta_Bco_BIC_SWIFT                := FieldByName('Cta_Bco_BIC_SWIFT').AsString;
                 Result.Cta_Bco_Mandato_Fecha_de_Firma   := FieldByName('Cta_Bco_Mandato_Fecha_de_Firma').AsString;
                 Result.Cta_Bco_Mandato_Ref              := FieldByName('Cta_Bco_Mandato_Ref').AsString;
                 Result.Cta_Bco_Direccion                := FieldByName('Cta_Bco_Direccion').AsString;
                 Result.Cta_Bco_Direccion_Numero         := FieldByName('Cta_Bco_Direccion_Numero').AsString;
                 Result.Cta_Bco_Direccion_Piso_Letra     := FieldByName('Cta_Bco_Direccion_Piso_Letra').AsString;
                 Result.Cta_Bco_Codigo_Postal            := FieldByName('Cta_Bco_Codigo_Postal').AsString;
                 Result.id_Cta_Bco_poblaciones           := FieldByName('id_Cta_Bco_poblaciones').AsString;
                 Result.id_Cta_Bco_provincias            := FieldByName('id_Cta_Bco_provincias').AsString;
                 Result.id_Cta_Bco_pais                  := FieldByName('id_Cta_Bco_pais').AsString;
                 Result.id_formas_pago                   := FieldByName('id_formas_pago').AsString;
                 Result.Forma_pago_Dia_1                 := FieldByName('Forma_pago_Dia_1').AsString;
                 Result.Forma_pago_Dia_2                 := FieldByName('Forma_pago_Dia_2').AsString;
                 Result.Vencimientos_automaticos_SN      := FieldByName('Vencimientos_automaticos_SN').AsString;
                 Result.Forma_pago_Vacaciones_Dia_Inicio := FieldByName('Forma_pago_Vacaciones_Dia_Inicio').AsString;
                 Result.Forma_pago_Vacaciones_Mes_Inicio := FieldByName('Forma_pago_Vacaciones_Mes_Inicio').AsString;
                 Result.Forma_pago_Vacaciones_Dia_Fin    := FieldByName('Forma_pago_Vacaciones_Dia_Fin').AsString;
                 Result.Forma_pago_Vacaciones_Mes_Fin    := FieldByName('Forma_pago_Vacaciones_Mes_Fin').AsString;
                 Result.IVA_con_Recargo_SN               := FieldByName('IVA_con_Recargo_SN').AsString;
                 Result.IVA_Excluido_SN                  := FieldByName('IVA_Excluido_SN').AsString;
                 Result.Comision                         := FieldByName('Comision').AsString;
                 Result.Retencion                        := FieldByName('Retencion').AsString;
                 Result.Saldo_Acumulado                  := FieldByName('Saldo_Acumulado').AsString;
                 Result.Activar_Proximidad_SN            := FieldByName('Activar_Proximidad_SN').AsString;
                 Result.Cuenta_Contable                  := FieldByName('Cuenta_Contable').AsString;
                 Result.Observaciones_Comentarios        := FieldByName('Observaciones_Comentarios').AsString;

                 Result.Insert_WHEN                      := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                   := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                         := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                      := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                          := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                      := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                   := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_poblacion         := FieldByName('OT_descripcion_poblacion').AsString;
                 Result.OT_descripcion_provincia         := FieldByName('OT_descripcion_provincia').AsString;
                 Result.OT_descripcion_pais              := FieldByName('OT_descripcion_pais').AsString;
                 Result.OT_Cta_Bco_descripcion_poblacion := FieldByName('OT_Cta_Bco_descripcion_poblacion').AsString;
                 Result.OT_Cta_Bco_descripcion_provincia := FieldByName('OT_Cta_Bco_descripcion_provincia').AsString;
                 Result.OT_Cta_Bco_descripcion_pais      := FieldByName('OT_Cta_Bco_descripcion_pais').AsString;
                 Result.OT_descripcion_forma_pago        := FieldByName('OT_descripcion_forma_pago').AsString;
                 Result.OT_Vencimientos_Cantidad         := FieldByName('OT_Vencimientos_Cantidad').AsString;
                 Result.OT_Vencimientos_1_Dias           := FieldByName('OT_Vencimientos_1_Dias').AsString;
                 Result.OT_Vencimientos_Dias_Entre       := FieldByName('OT_Vencimientos_Dias_Entre').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del representante con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Articulos_Familias_xID( param_id : ShortString ) : Tarticulos_familias;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Articulos_Familias_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_articulos_familias_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE af.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY af.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                                              := FieldByName('id').AsString;
                 Result.descripcion                                     := FieldByName('descripcion').AsString;
                 Result.id_articulos_familias                           := FieldByName('id_articulos_familias').AsString;
                 Result.id_grupos_cocina                                := FieldByName('id_grupos_cocina').AsString;
                 Result.id_impresoras                                   := FieldByName('id_impresoras').AsString;
                 Result.Cuenta_Contable_Ventas                          := FieldByName('Cuenta_Contable_Ventas').AsString;
                 Result.Cuenta_Contable_Compras                         := FieldByName('Cuenta_Contable_Compras').AsString;
                 Result.Visualizar_en_terminales_SN                     := FieldByName('Visualizar_en_terminales_SN').AsString;
                 Result.Ventas_por_peso_SN                              := FieldByName('Ventas_por_peso_SN').AsString;
                 Result.Comision                                        := FieldByName('Comision').AsString;
                 Result.Minimo_Variacion_Actualizar_en_tanto_por_ciento := FieldByName('Minimo_Variacion_Actualizar_en_tanto_por_ciento').AsString;

                 Result.Insert_WHEN                                     := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                                  := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                                        := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                                     := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                                         := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                                     := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                                  := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_grupo_cocina                     := FieldByName('OT_descripcion_grupo_cocina').AsString;
                 Result.OT_descripcion_impresora_comandas               := FieldByName('OT_descripcion_impresora_comandas').AsString;
                 Result.OT_descripcion_familia_superior                 := FieldByName('OT_descripcion_familia_superior').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos de la familia de artículo con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Articulos_xID( param_id : ShortString ) : TArticulos;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Articulos_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Articulos_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE a.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY a.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                                              := FieldByName('id').AsString;
                 Result.descripcion                                     := FieldByName('descripcion').AsString;
                 Result.descripcion_para_TPV                            := FieldByName('descripcion_para_TPV').AsString;
                 Result.id_articulos_familias                           := FieldByName('id_articulos_familias').AsString;
                 Result.Combinado                                       := FieldByName('Combinado').AsString;
                 Result.id_proveedores                                  := FieldByName('id_proveedores').AsString;
                 Result.id_grupos_cocina                                := FieldByName('id_grupos_cocina').AsString;
                 Result.id_impresoras                                   := FieldByName('id_impresoras').AsString;
                 Result.id_impuestos_Ventas                             := FieldByName('id_impuestos_Ventas').AsString;
                 Result.id_impuestos_Compras                            := FieldByName('id_impuestos_Compras').AsString;
                 Result.Visualizar_en_terminales_SN                     := FieldByName('Visualizar_en_terminales_SN').AsString;
                 Result.Articulo_Compuesto_SN                           := FieldByName('Articulo_Compuesto_SN').AsString;
                 Result.Activar_Proporciones_SN                         := FieldByName('Activar_Proporciones_SN').AsString;
                 Result.Agregar_a_Favoritos_SN                          := FieldByName('Agregar_a_Favoritos_SN').AsString;
                 Result.Pedir_precio_venta_SN                           := FieldByName('Pedir_precio_venta_SN').AsString;
                 Result.Venta_por_peso_SN                               := FieldByName('Venta_por_peso_SN').AsString;
                 Result.Tipo_de_articulo                                := FieldByName('Tipo_de_articulo').AsString;
                 Result.Tiempo_asignado                                 := FieldByName('Tiempo_asignado').AsString;
                 Result.PVP                                             := FieldByName('PVP').AsString;
                 Result.PVP_Impuestos_Incluidos                         := FieldByName('PVP_Impuestos_Incluidos').AsString;
                 Result.Comision                                        := FieldByName('Comision').AsString;
                 Result.Minimo_Variacion_Actualizar_en_tanto_por_ciento := FieldByName('Minimo_Variacion_Actualizar_en_tanto_por_ciento').AsString;
                 Result.Cuenta_Contable_Ventas                          := FieldByName('Cuenta_Contable_Ventas').AsString;
                 Result.Cuenta_Contable_Compras                         := FieldByName('Cuenta_Contable_Compras').AsString;
                 Result.Cubicaje_Peso                                   := FieldByName('Cubicaje_Peso').AsString;
                 Result.Cubicaje_Volumen                                := FieldByName('Cubicaje_Volumen').AsString;
                 Result.Repetir_Cada                                    := FieldByName('Repetir_Cada').AsString;
                 Result.Insert_WHEN                                     := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                                  := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                                        := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                                     := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                                         := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                                     := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                                  := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_impto_ventas                     := FieldByName('OT_descripcion_impto_ventas').AsString;
                 Result.OT_descripcion_impto_compras                    := FieldByName('OT_descripcion_impto_compras').AsString;
                 Result.OT_descripcion_proveedor                        := FieldByName('OT_descripcion_proveedor').AsString;

                 Result.OT_descripcion_grupo_cocina                     := FieldByName('OT_descripcion_grupo_cocina').AsString;
                 Result.OT_descripcion_impresora_comandas               := FieldByName('OT_descripcion_impresora_comandas').AsString;

                 Result.OT_descripcion_familia                          := FieldByName('OT_descripcion_familia').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del artículo con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_articulos_tarifas_xID( param_id_articulos,
                                                      param_id_tarifas : String ) : TArticulos_Tarifas;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_articulos_tarifas_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_articulos_tarifas_CRUD(var_SQLQuery, '');
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE ta.id_articulos = ' + Trim(param_id_articulos) );
        var_SQLQuery.SQL.Add(   'AND ta.id_tarifas = ' + Trim(param_id_tarifas) );

        var_SQLQuery.SQL.Add( 'ORDER BY ta.id_articulos ASC, ta.id_tarifas ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                          := FieldByName('id').AsString;
                 Result.id_articulos                := FieldByName('id_articulos').AsString;
                 Result.id_tarifas                  := FieldByName('id_tarifas').AsString;
                 Result.Importe_Neto                := FieldByName('Importe_Neto').AsString;
                 Result.Importe_Impuestos_Incluidos := FieldByName('Importe_Impuestos_Incluidos').AsString;
                 Result.Descuento                   := FieldByName('Descuento').AsString;

                 Result.Insert_WHEN                 := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User              := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                    := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                 := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                     := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                 := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User              := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_tarifa       := FieldByName('OT_descripcion_tarifa').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos de la tarifa con' +
                               ' la id ' + Trim(param_id_tarifas) + ', para el artículo ' +
                               Trim(param_id_articulos) +
                               '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Impuestos_xID( param_id : ShortString ) : Timpuestos;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Impuesto_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Impuestos_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.Add(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE i.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY i.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id               := FieldByName('id').AsString;
                 Result.descripcion      := FieldByName('descripcion').AsString;
                 Result.Cuenta_Contable  := FieldByName('Cuenta_Contable').AsString;
                 Result.Sumado_A_Ftra_SN := FieldByName('Sumado_A_Ftra_SN').AsString;
                 Result.Tanto_Por_Ciento := FieldByName('Tanto_Por_Ciento').AsString;

                 Result.Insert_WHEN      := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User   := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN         := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User      := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY          := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN      := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User   := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del impuesto con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' + var_SQLQuery.Name +
                               ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Empresas_xID( param_id : ShortString ) : TEmpresas;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Empresas_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Empresas_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE e.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY e.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                                  := FieldByName('id').AsString;
                 Result.nombre_comercial                    := FieldByName('nombre_comercial').AsString;
                 Result.Responsable                         := FieldByName('Responsable').AsString;
                 Result.nif_cif                             := FieldByName('nif_cif').AsString;
                 Result.Tfno_Fijo_1                         := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2                         := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX                                 := FieldByName('FAX').AsString;
                 Result.Movil                               := FieldByName('Movil').AsString;
                 Result.eMail                               := FieldByName('eMail').AsString;
                 Result.pagina_web                          := FieldByName('pagina_web').AsString;
                 Result.Direccion                           := FieldByName('Direccion').AsString;
                 Result.Direccion_Numero                    := FieldByName('Direccion_Numero').AsString;
                 Result.Direccion_Piso_Letra                := FieldByName('Direccion_Piso_Letra').AsString;
                 Result.Codigo_Postal                       := FieldByName('Codigo_Postal').AsString;
                 Result.id_poblaciones                      := FieldByName('id_poblaciones').AsString;
                 Result.id_provincias                       := FieldByName('id_provincias').AsString;
                 Result.id_paises                           := FieldByName('id_paises').AsString;
                 Result.Observaciones_Comentarios           := FieldByName('Observaciones_Comentarios').AsString;

                 Result.Serie_Presupuesto                   := FieldByName('Serie_Presupuesto').AsString;
                 Result.Numero_Presupuesto                  := FieldByName('Numero_Presupuesto').AsString;

                 Result.Serie_Pedido                        := FieldByName('Serie_Pedido').AsString;
                 Result.Numero_Pedido                       := FieldByName('Numero_Pedido').AsString;

                 Result.Serie_Albaran                       := FieldByName('Serie_Albaran').AsString;
                 Result.Numero_Albaran                      := FieldByName('Numero_Albaran').AsString;

                 Result.Serie_Factura                       := FieldByName('Serie_Factura').AsString;
                 Result.Numero_Factura                      := FieldByName('Numero_Factura').AsString;

                 Result.Serie_Abono                         := FieldByName('Serie_Abono').AsString;
                 Result.Numero_Abono                        := FieldByName('Numero_Abono').AsString;

                 Result.Serie_Presupuesto_Compras           := FieldByName('Serie_Presupuesto_Compras').AsString;
                 Result.Numero_Presupuesto_Compras          := FieldByName('Numero_Presupuesto_Compras').AsString;

                 Result.Serie_Pedido_Compras                := FieldByName('Serie_Pedido_Compras').AsString;
                 Result.Numero_Pedido_Compras               := FieldByName('Numero_Pedido_Compras').AsString;

                 Result.Serie_Albaran_Compras               := FieldByName('Serie_Albaran_Compras').AsString;
                 Result.Numero_Albaran_Compras              := FieldByName('Numero_Albaran_Compras').AsString;

                 Result.Serie_Factura_Compras               := FieldByName('Serie_Factura_Compras').AsString;
                 Result.Numero_Factura_Compras              := FieldByName('Numero_Factura_Compras').AsString;

                 Result.Serie_Abono_Compras                 := FieldByName('Serie_Abono_Compras').AsString;
                 Result.Numero_Abono_Compras                := FieldByName('Numero_Abono_Compras').AsString;

                 Result.Insert_WHEN                         := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                      := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                            := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                         := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                             := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                         := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                      := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_poblacion            := FieldByName('OT_descripcion_poblacion').AsString;
                 Result.OT_descripcion_provincia            := FieldByName('OT_descripcion_provincia').AsString;
                 Result.OT_descripcion_pais                 := FieldByName('OT_descripcion_pais').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos de la empresa con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Configuracion_APP_xID( param_id : ShortString ) : TConfiguracion;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Configuracion_APP_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Configuracion_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE conf.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY conf.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                                                    := FieldByName('id').AsString;
                 Result.descripcion                                           := FieldByName('descripcion').AsString;
                 Result.Guardar_Cambios_de_Registros_SN                       := FieldByName('Guardar_Cambios_de_Registros_SN').AsString;
                 Result.Trabajar_Grupos_Cocina_SN                             := FieldByName('Trabajar_Grupos_Cocina_SN').AsString;
                 Result.Trabajar_Albaranes_con_Vehiculos_SN                   := FieldByName('Trabajar_Albaranes_con_Vehiculos_SN').AsString;
                 Result.Tipo_Clientes_Obligar_Cuenta_Contable_SN              := FieldByName('Tipo_Clientes_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Clientes_Obligar_NIF_SN                               := FieldByName('Clientes_Obligar_NIF_SN').AsString;
                 Result.Clientes_Obligar_Cuenta_Contable_SN                   := FieldByName('Clientes_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Representantes_Obligar_NIF_SN                         := FieldByName('Representantes_Obligar_NIF_SN').AsString;
                 Result.Representantes_Obligar_Cuenta_Contable_SN             := FieldByName('Representantes_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Tipo_Proveedores_Obligar_Cuenta_Contable_SN           := FieldByName('Tipo_Proveedores_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Proveedores_Obligar_NIF_SN                            := FieldByName('Proveedores_Obligar_NIF_SN').AsString;
                 Result.Proveedores_Obligar_Cuenta_Contable_SN                := FieldByName('Proveedores_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Articulos_Familias_Ventas_Obligar_Cuenta_Contable_SN  := FieldByName('Articulos_Familias_Ventas_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Articulos_Familias_Compras_Obligar_Cuenta_Contable_SN := FieldByName('Articulos_Familias_Compras_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Articulos_Ventas_Obligar_Cuenta_Contable_SN           := FieldByName('Articulos_Ventas_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Articulos_Compras_Obligar_Cuenta_Contable_SN          := FieldByName('Articulos_Compras_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Impuestos_Obligar_Cuenta_Contable_SN                  := FieldByName('Impuestos_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Personal_Familias_Obligar_Cuenta_Contable_SN          := FieldByName('Personal_Familias_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Personal_Obligar_Cuenta_Contable_SN                   := FieldByName('Personal_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Personal_Obligar_NIF_SN                               := FieldByName('Personal_Obligar_NIF_SN').AsString;
                 Result.Ctas_pagos_cobros_Obligar_Cuenta_Contable_SN          := FieldByName('Ctas_pagos_cobros_Obligar_Cuenta_Contable_SN').AsString;
                 Result.Modulo_Profesorado_Activo_SN                          := FieldByName('Modulo_Profesorado_Activo_SN').AsString;
                 Result.Bancos_Cuenta_Contable_SN                             := FieldByName('Bancos_Cuenta_Contable_SN').AsString;
                 Result.Clientes_Obligar_Tipo_Cliente_SN                      := FieldByName('Clientes_Obligar_Tipo_Cliente_SN').AsString;
                 Result.Clientes_Obligar_Ruta_SN                              := FieldByName('Clientes_Obligar_Ruta_SN').AsString;
                 Result.Clientes_Obligar_Actividad_SN                         := FieldByName('Clientes_Obligar_Actividad_SN').AsString;
                 Result.Clientes_Obligar_FormaPago_SN                         := FieldByName('Clientes_Obligar_FormaPago_SN').AsString;
                 Result.Clientes_Obligar_Tarifa_SN                            := FieldByName('Clientes_Obligar_Tarifa_SN').AsString;
                 Result.Albaranes_Obligar_Almacen_SN                          := FieldByName('Albaranes_Obligar_Almacen_SN').AsString;
                 Result.Facturas_Permitir_Borrar_SN                           := FieldByName('Facturas_Permitir_Borrar_SN').AsString;

                 Result.Insert_WHEN                                           := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                                        := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                                              := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                                           := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                                               := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                                           := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                                        := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos de configuración de esta aplicación. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Users_xID( param_id : ShortString ) : TUsers;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Users_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_Users_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE u.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY u.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id               := FieldByName('id').AsString;

                 Result.Descripcion_Nick := FieldByName('Descripcion_Nick').AsString;
                 Result.Id_Empleados     := FieldByName('Id_Empleados').AsString;
                 Result.Permiso_Total_SN := FieldByName('Permiso_Total_SN').AsString;
                 Result.Tipo             := FieldByName('Tipo').AsString;

                 Result.Insert_WHEN      := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User   := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN         := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User      := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY          := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN      := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User   := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del usuario con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Proveedores_xID( param_id : ShortString ) : TProveedores;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Proveedores_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_proveedores_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE pr.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY pr.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                                := FieldByName('id').AsString;
                 Result.nombre_propietario                := FieldByName('nombre_propietario').AsString;
                 Result.nombre_comercial                  := FieldByName('nombre_comercial').AsString;
                 Result.nif_cif                           := FieldByName('nif_cif').AsString;
                 Result.Tfno_Fijo_1                       := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2                       := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX                               := FieldByName('FAX').AsString;
                 Result.Movil                             := FieldByName('Movil').AsString;
                 Result.eMail                             := FieldByName('eMail').AsString;
                 Result.pagina_web                        := FieldByName('pagina_web').AsString;
                 Result.Direccion                         := FieldByName('Direccion').AsString;
                 Result.Direccion_Numero                  := FieldByName('Direccion_Numero').AsString;
                 Result.Direccion_Piso_Letra              := FieldByName('Direccion_Piso_Letra').AsString;
                 Result.Codigo_Postal                     := FieldByName('Codigo_Postal').AsString;
                 Result.id_poblaciones                    := FieldByName('id_poblaciones').AsString;
                 Result.id_provincias                     := FieldByName('id_provincias').AsString;
                 Result.id_paises                         := FieldByName('id_paises').AsString;
                 Result.id_proveedores_tipos              := FieldByName('id_proveedores_tipos').AsString;
                 Result.Cta_Bco_Entidad                   := FieldByName('Cta_Bco_Entidad').AsString;
                 Result.Cta_Bco_Sucursal                  := FieldByName('Cta_Bco_Sucursal').AsString;
                 Result.Cta_Bco_Digito_Control            := FieldByName('Cta_Bco_Digito_Control').AsString;
                 Result.Cta_Bco_Cuenta                    := FieldByName('Cta_Bco_Cuenta').AsString;
                 Result.Cta_Bco_IBAN                      := FieldByName('Cta_Bco_IBAN').AsString;
                 Result.Cta_Bco_BIC_SWIFT                 := FieldByName('Cta_Bco_BIC_SWIFT').AsString;
                 Result.Cta_Bco_Mandato_Fecha_de_Firma    := FieldByName('Cta_Bco_Mandato_Fecha_de_Firma').AsString;
                 Result.Cta_Bco_Mandato_Ref               := FieldByName('Cta_Bco_Mandato_Ref').AsString;
                 Result.Cta_Bco_Direccion                 := FieldByName('Cta_Bco_Direccion').AsString;
                 Result.Cta_Bco_Direccion_Numero          := FieldByName('Cta_Bco_Direccion_Numero').AsString;
                 Result.Cta_Bco_Direccion_Piso_Letra      := FieldByName('Cta_Bco_Direccion_Piso_Letra').AsString;
                 Result.Cta_Bco_Codigo_Postal             := FieldByName('Cta_Bco_Codigo_Postal').AsString;
                 Result.id_Cta_Bco_poblaciones            := FieldByName('id_Cta_Bco_poblaciones').AsString;
                 Result.id_Cta_Bco_provincias             := FieldByName('id_Cta_Bco_provincias').AsString;
                 Result.id_Cta_Bco_pais                   := FieldByName('id_Cta_Bco_pais').AsString;
                 Result.id_formas_pago                    := FieldByName('id_formas_pago').AsString;
                 Result.Forma_pago_Dia_1                  := FieldByName('Forma_pago_Dia_1').AsString;
                 Result.Forma_pago_Dia_2                  := FieldByName('Forma_pago_Dia_2').AsString;
                 Result.Vencimientos_automaticos_SN       := FieldByName('Vencimientos_automaticos_SN').AsString;
                 Result.Forma_pago_Vacaciones_Dia_Inicio  := FieldByName('Forma_pago_Vacaciones_Dia_Inicio').AsString;
                 Result.Forma_pago_Vacaciones_Mes_Inicio  := FieldByName('Forma_pago_Vacaciones_Mes_Inicio').AsString;
                 Result.Forma_pago_Vacaciones_Dia_Fin     := FieldByName('Forma_pago_Vacaciones_Dia_Fin').AsString;
                 Result.Forma_pago_Vacaciones_Mes_Fin     := FieldByName('Forma_pago_Vacaciones_Mes_Fin').AsString;
                 Result.IVA_con_Recargo_SN                := FieldByName('IVA_con_Recargo_SN').AsString;
                 Result.IVA_Excluido_SN                   := FieldByName('IVA_Excluido_SN').AsString;
                 Result.Descuento_Linea                   := FieldByName('Descuento_Linea').AsString;
                 Result.Descuento_Comercial_1             := FieldByName('Descuento_Comercial_1').AsString;
                 Result.Descuento_Comercial_2             := FieldByName('Descuento_Comercial_2').AsString;
                 Result.Descuento_Pronto_Pago             := FieldByName('Descuento_Pronto_Pago').AsString;
                 Result.Descuento_Final                   := FieldByName('Descuento_Final').AsString;
                 Result.Retencion                         := FieldByName('Retencion').AsString;
                 Result.Cuenta_Contable                   := FieldByName('Cuenta_Contable').AsString;
                 Result.id_Agencias_Transporte            := FieldByName('id_Agencias_Transporte').AsString;
                 Result.Observaciones_Comentarios         := FieldByName('Observaciones_Comentarios').AsString;

                 Result.Insert_WHEN                       := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                    := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                          := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                       := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                           := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                       := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                    := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_poblacion          := FieldByName('OT_descripcion_poblacion').AsString;
                 Result.OT_descripcion_provincia          := FieldByName('OT_descripcion_provincia').AsString;
                 Result.OT_descripcion_pais               := FieldByName('OT_descripcion_pais').AsString;

                 Result.OT_descripcion_proveedor_tipo     := FieldByName('OT_descripcion_proveedor_tipo').AsString;
                 Result.OT_Cuenta_Contable_proveedor_tipo := FieldByName('OT_Cuenta_Contable_proveedor_tipo').AsString;

                 Result.OT_Cta_Bco_descripcion_poblacion  := FieldByName('OT_Cta_Bco_descripcion_poblacion').AsString;
                 Result.OT_Cta_Bco_descripcion_provincia  := FieldByName('OT_Cta_Bco_descripcion_provincia').AsString;
                 Result.OT_Cta_Bco_descripcion_pais       := FieldByName('OT_Cta_Bco_descripcion_pais').AsString;

                 Result.OT_descripcion_forma_pago         := FieldByName('OT_descripcion_forma_pago').AsString;
                 Result.OT_Vencimientos_Cantidad          := FieldByName('OT_Vencimientos_Cantidad').AsString;
                 Result.OT_Vencimientos_1_Dias            := FieldByName('OT_Vencimientos_1_Dias').AsString;
                 Result.OT_Vencimientos_Dias_Entre        := FieldByName('OT_Vencimientos_Dias_Entre').AsString;

                 Result.OT_descripcion_agencia_transporte := FieldByName('OT_descripcion_agencia_transporte').AsString;
                 Result.OT_Tfno_Fijo_1_agencia_transporte := FieldByName('OT_Tfno_Fijo_1_agencia_transporte').AsString;
                 Result.OT_Movil_agencia_transporte       := FieldByName('OT_Movil_agencia_transporte').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del proveedor con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Clientes_xID( param_id : ShortString ) : TClientes;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Clientes_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_clientes_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE cl.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY cl.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                                := FieldByName('id').AsString;
                 Result.nombre_propietario                := FieldByName('nombre_propietario').AsString;
                 Result.nombre_comercial                  := FieldByName('nombre_comercial').AsString;
                 Result.nif_cif                           := FieldByName('nif_cif').AsString;
          	 Result.Fecha_Nacimiento                  := FieldByName('Fecha_Nacimiento').AsString;
                 Result.Tfno_Fijo_1                       := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2                       := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX                               := FieldByName('FAX').AsString;
                 Result.Movil                             := FieldByName('Movil').AsString;
                 Result.eMail                             := FieldByName('eMail').AsString;
                 Result.pagina_web                        := FieldByName('pagina_web').AsString;
                 Result.Direccion                         := FieldByName('Direccion').AsString;
                 Result.Direccion_Numero                  := FieldByName('Direccion_Numero').AsString;
                 Result.Direccion_Piso_Letra              := FieldByName('Direccion_Piso_Letra').AsString;
                 Result.Codigo_Postal                     := FieldByName('Codigo_Postal').AsString;
                 Result.id_poblaciones                    := FieldByName('id_poblaciones').AsString;
                 Result.id_provincias                     := FieldByName('id_provincias').AsString;
                 Result.id_paises                         := FieldByName('id_paises').AsString;
                 Result.id_clientes_tipos                 := FieldByName('id_clientes_tipos').AsString;
                 Result.Cta_Bco_Entidad                   := FieldByName('Cta_Bco_Entidad').AsString;
                 Result.Cta_Bco_Sucursal                  := FieldByName('Cta_Bco_Sucursal').AsString;
                 Result.Cta_Bco_Digito_Control            := FieldByName('Cta_Bco_Digito_Control').AsString;
                 Result.Cta_Bco_Cuenta                    := FieldByName('Cta_Bco_Cuenta').AsString;
                 Result.Cta_Bco_IBAN                      := FieldByName('Cta_Bco_IBAN').AsString;
                 Result.Cta_Bco_BIC_SWIFT                 := FieldByName('Cta_Bco_BIC_SWIFT').AsString;
                 Result.Cta_Bco_Mandato_Fecha_de_Firma    := FieldByName('Cta_Bco_Mandato_Fecha_de_Firma').AsString;
                 Result.Cta_Bco_Mandato_Ref               := FieldByName('Cta_Bco_Mandato_Ref').AsString;
                 Result.Cta_Bco_Direccion                 := FieldByName('Cta_Bco_Direccion').AsString;
                 Result.Cta_Bco_Direccion_Numero          := FieldByName('Cta_Bco_Direccion_Numero').AsString;
                 Result.Cta_Bco_Direccion_Piso_Letra      := FieldByName('Cta_Bco_Direccion_Piso_Letra').AsString;
                 Result.Cta_Bco_Codigo_Postal             := FieldByName('Cta_Bco_Codigo_Postal').AsString;
                 Result.id_Cta_Bco_poblaciones            := FieldByName('id_Cta_Bco_poblaciones').AsString;
                 Result.id_Cta_Bco_provincias             := FieldByName('id_Cta_Bco_provincias').AsString;
                 Result.id_Cta_Bco_pais                   := FieldByName('id_Cta_Bco_pais').AsString;
                 Result.id_formas_pago                    := FieldByName('id_formas_pago').AsString;
                 Result.Forma_pago_Dia_1                  := FieldByName('Forma_pago_Dia_1').AsString;
                 Result.Forma_pago_Dia_2                  := FieldByName('Forma_pago_Dia_2').AsString;
                 Result.Vencimientos_automaticos_SN       := FieldByName('Vencimientos_automaticos_SN').AsString;
                 Result.Forma_pago_Vacaciones_Dia_Inicio  := FieldByName('Forma_pago_Vacaciones_Dia_Inicio').AsString;
                 Result.Forma_pago_Vacaciones_Mes_Inicio  := FieldByName('Forma_pago_Vacaciones_Mes_Inicio').AsString;
                 Result.Forma_pago_Vacaciones_Dia_Fin     := FieldByName('Forma_pago_Vacaciones_Dia_Fin').AsString;
                 Result.Forma_pago_Vacaciones_Mes_Fin     := FieldByName('Forma_pago_Vacaciones_Mes_Fin').AsString;
                 Result.IVA_con_Recargo_SN                := FieldByName('IVA_con_Recargo_SN').AsString;
                 Result.IVA_Excluido_SN                   := FieldByName('IVA_Excluido_SN').AsString;
                 Result.id_tarifas                        := FieldByName('id_tarifas').AsString;
                 Result.Descuento_Comercial_1             := FieldByName('Descuento_Comercial_1').AsString;
                 Result.Descuento_Comercial_2             := FieldByName('Descuento_Comercial_2').AsString;
                 Result.Descuento_Pronto_Pago             := FieldByName('Descuento_Pronto_Pago').AsString;
                 Result.Descuento_Final                   := FieldByName('Descuento_Final').AsString;
                 Result.Retencion                         := FieldByName('Retencion').AsString;
                 Result.Riesgo_Autorizado                 := FieldByName('Riesgo_Autorizado').AsString;
                 Result.Riesgo_Acumulado                  := FieldByName('Riesgo_Acumulado').AsString;
                 Result.Agrupar_Albaranes_SN              := FieldByName('Agrupar_Albaranes_SN').AsString;
                 Result.Activar_Proximidad_SN             := FieldByName('Activar_Proximidad_SN').AsString;
                 Result.Cuenta_Contable                   := FieldByName('Cuenta_Contable').AsString;
                 Result.id_Agencias_Transporte            := FieldByName('id_Agencias_Transporte').AsString;
                 Result.Portes_Pagados_SN                 := FieldByName('Portes_Pagados_SN').AsString;
                 Result.id_Representantes                 := FieldByName('id_Representantes').AsString;
                 Result.Observaciones_Comentarios         := FieldByName('Observaciones_Comentarios').AsString;
                 Result.Estudia_SN                        := FieldByName('Estudia_SN').AsString;
                 Result.Trabaja_SN                        := FieldByName('Trabaja_SN').AsString;
                 Result.Estudios_Trabajos                 := FieldByName('Estudios_Trabajos').AsString;
                 Result.Cantidad_Hermanos                 := FieldByName('Cantidad_Hermanos').AsString;
                 Result.id_rutas                          := FieldByName('id_rutas').AsString;
                 Result.id_actividades                    := FieldByName('id_actividades').AsString;

                 Result.Insert_WHEN                       := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User                    := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                          := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User                       := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                           := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN                       := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User                    := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_actividad          := FieldByName('OT_descripcion_actividad').AsString;
                 Result.OT_descripcion_ruta               := FieldByName('OT_descripcion_ruta').AsString;
                 Result.OT_descripcion_poblacion          := FieldByName('OT_descripcion_poblacion').AsString;
                 Result.OT_descripcion_provincia          := FieldByName('OT_descripcion_provincia').AsString;
                 Result.OT_descripcion_pais               := FieldByName('OT_descripcion_pais').AsString;
                 Result.OT_descripcion_cliente_tipo       := FieldByName('OT_descripcion_cliente_tipo').AsString;
                 Result.OT_Cuenta_Contable_cliente_tipo   := FieldByName('OT_Cuenta_Contable_cliente_tipo').AsString;
                 Result.OT_Cta_Bco_descripcion_poblacion  := FieldByName('OT_Cta_Bco_descripcion_poblacion').AsString;
                 Result.OT_Cta_Bco_descripcion_provincia  := FieldByName('OT_Cta_Bco_descripcion_provincia').AsString;
                 Result.OT_Cta_Bco_descripcion_pais       := FieldByName('OT_Cta_Bco_descripcion_pais').AsString;
                 Result.OT_descripcion_forma_pago         := FieldByName('OT_descripcion_forma_pago').AsString;
                 Result.OT_Vencimientos_Cantidad          := FieldByName('OT_Vencimientos_Cantidad').AsString;
                 Result.OT_Vencimientos_1_Dias            := FieldByName('OT_Vencimientos_1_Dias').AsString;
                 Result.OT_Vencimientos_Dias_Entre        := FieldByName('OT_Vencimientos_Dias_Entre').AsString;

                 Result.OT_descripcion_tarifa             := FieldByName('OT_descripcion_tarifa').AsString;
                 Result.OT_descripcion_agencia_transporte := FieldByName('OT_descripcion_agencia_transporte').AsString;
                 Result.OT_Tfno_Fijo_1_agencia_transporte := FieldByName('OT_Tfno_Fijo_1_agencia_transporte').AsString;
                 Result.OT_Movil_agencia_transporte       := FieldByName('OT_Movil_agencia_transporte').AsString;
                 Result.OT_descripcion_representante      := FieldByName('OT_descripcion_representante').AsString;
                 Result.OT_Tfno_Fijo_1_representante      := FieldByName('OT_Tfno_Fijo_1_representante').AsString;
                 Result.OT_Movil_representante            := FieldByName('OT_Movil_representante').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del cliente con' +
                               ' la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Clientes_Contactos_xID( param_id : ShortString ) : TClientes_Contactos;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Clientes_Contactos_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_clientes_contactos_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE cc.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY cc.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id               := FieldByName('id').AsString;
                 Result.id_clientes      := FieldByName('id_clientes').AsString;
                 Result.nombre           := FieldByName('nombre').AsString;
                 Result.nif_cif          := FieldByName('nif_cif').AsString;
                 Result.Fecha_Nacimiento := FieldByName('Fecha_Nacimiento').AsString;
                 Result.Tfno_Fijo_1      := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2      := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX              := FieldByName('FAX').AsString;
                 Result.Movil            := FieldByName('Movil').AsString;
                 Result.eMail            := FieldByName('eMail').AsString;
                 Result.pagina_web       := FieldByName('pagina_web').AsString;
                 Result.Cargo_Puesto     := FieldByName('Cargo_Puesto').AsString;

                 Result.Insert_WHEN      := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User   := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN         := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User      := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY          := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN      := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User   := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del contacto' +
                               ' de clientes con la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Clientes_Envios_xID( param_id : ShortString ) : TClientes_Envios;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Clientes_Envios_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_clientes_envios_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE ce.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY ce.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id                       := FieldByName('id').AsString;
                 Result.id_clientes              := FieldByName('id_clientes').AsString;
                 Result.id_clientes_contactos    := FieldByName('id_clientes_contactos').AsString;
                 Result.Direccion                := FieldByName('Direccion').AsString;
                 Result.Direccion_Numero         := FieldByName('Direccion_Numero').AsString;
                 Result.Direccion_Piso_Letra     := FieldByName('Direccion_Piso_Letra').AsString;
                 Result.Codigo_Postal            := FieldByName('Codigo_Postal').AsString;
                 Result.id_poblaciones           := FieldByName('id_poblaciones').AsString;
                 Result.id_provincias            := FieldByName('id_provincias').AsString;
                 Result.id_paises                := FieldByName('id_paises').AsString;
                 Result.Tfno_Fijo_1              := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2              := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX                      := FieldByName('FAX').AsString;
                 Result.Movil                    := FieldByName('Movil').AsString;
                 Result.eMail                    := FieldByName('eMail').AsString;
                 Result.Portes_Pagados_SN        := FieldByName('Portes_Pagados_SN').AsString;

                 Result.Insert_WHEN              := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User           := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN                 := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User              := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY                  := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN              := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User           := FieldByName('Change_Id_User').AsString;

                 Result.OT_descripcion_poblacion := FieldByName('OT_descripcion_poblacion').AsString;
                 Result.OT_descripcion_provincia := FieldByName('OT_descripcion_provincia').AsString;
                 Result.OT_descripcion_pais      := FieldByName('OT_descripcion_pais').AsString;
                 Result.OT_descripcion_Contacto  := FieldByName('OT_descripcion_Contacto').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos de envío' +
                               ' del cliente con la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_Traer_Proveedores_Contactos_xID( param_id : ShortString ) : TProveedores_Contactos;
var var_SQLTransaction : TSQLTransaction;
    var_SQLConnector   : TSQLConnector;
    var_SQLQuery       : TSQLQuery;
    var_Registro_CRUD  : TRegistro_CRUD;
begin
    try
        // ***************************************************************************************** //
        // ** Creamos la Transaccion y la conexión con el motor BD, y la abrimos                  ** //
        // ***************************************************************************************** //
        var_SQLTransaction := TSQLTransaction.Create(nil);
        var_SQLConnector   := TSQLConnector.Create(nil);

        if UTI_CN_Abrir( var_SQLTransaction,
                         var_SQLConnector ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Creamos el SQLQuery y le pasamos el SQLConnector                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery          := TSQLQuery.Create(nil);
        var_SQLQuery.Name     := 'SQLQuery_UTI_DATOS_TABLA_Traer_Proveedores_Contactos_xID';
        var_SQLQuery.Database := var_SQLConnector;

        // ***************************************************************************************** //
        // ** Creamos la SQL                                                                      ** //
        // ***************************************************************************************** //
        var_Registro_CRUD := UTI_DATOS_TABLA_proveedores_contactos_CRUD(var_SQLQuery);
        var_SQLQuery.SQL.Clear;
        var_SQLQuery.SQL.AddStrings(var_Registro_CRUD.SELECT_SQL);

        // ***************************************************************************************** //
        // ** Continuamos con la confección de la SQL                                             ** //
        // ***************************************************************************************** //
        var_SQLQuery.SQL.Add( 'WHERE prc.id = ' + Trim(param_id) );
        var_SQLQuery.SQL.Add( 'ORDER BY prc.id ASC' );

        // ***************************************************************************************** //
        // ** Abrimos la Query                                                                    ** //
        // ***************************************************************************************** //
        if UTI_TB_Abrir( '', '', '',
                         var_SQLConnector,
                         var_SQLTransaction,
                         var_SQLQuery,
                         -1, // asi me trae todos los registros de golpe
                         var_SQLQuery.SQL.Text ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Hacemos las comprobaciones que nos hagan falta de la SQL que hemos hecho            ** //
        // ***************************************************************************************** //
        // ** Result = 0 aclarara que no existe el registro buscado por su id                     ** //
        // ***************************************************************************************** //
        if var_SQLQuery.RecordCount = 0 then
             Result.id := '0' // No encontremos este registro
        else begin
             with var_SQLQuery do
             begin
                 Result.id               := FieldByName('id').AsString;
                 Result.id_proveedores   := FieldByName('id_proveedores').AsString;
                 Result.nombre           := FieldByName('nombre').AsString;
                 Result.nif_cif          := FieldByName('nif_cif').AsString;
                 Result.Fecha_Nacimiento := FieldByName('Fecha_Nacimiento').AsString;
                 Result.Tfno_Fijo_1      := FieldByName('Tfno_Fijo_1').AsString;
                 Result.Tfno_Fijo_2      := FieldByName('Tfno_Fijo_2').AsString;
                 Result.FAX              := FieldByName('FAX').AsString;
                 Result.Movil            := FieldByName('Movil').AsString;
                 Result.eMail            := FieldByName('eMail').AsString;
                 Result.pagina_web       := FieldByName('pagina_web').AsString;
                 Result.Cargo_Puesto     := FieldByName('Cargo_Puesto').AsString;

                 Result.Insert_WHEN      := FieldByName('Insert_WHEN').AsString;
                 Result.Insert_Id_User   := FieldByName('Insert_Id_User').AsString;
                 Result.Del_WHEN         := FieldByName('Del_WHEN').AsString;
                 Result.Del_Id_User      := FieldByName('Del_Id_User').AsString;
                 Result.Del_WHY          := FieldByName('Del_WHY').AsString;
                 Result.Change_WHEN      := FieldByName('Change_WHEN').AsString;
                 Result.Change_Id_User   := FieldByName('Change_Id_User').AsString;
             end;
        end;

        // ***************************************************************************************** //
        // ** Cerramos la tabla y asi se cierra automaticamente La transacción y conexión con BD  ** //
        // ***************************************************************************************** //
        if UTI_TB_Cerrar( var_SQLConnector,
                          var_SQLTransaction,
                          var_SQLQuery ) = false then UTI_GEN_Salir;

        // ***************************************************************************************** //
        // ** Destruimos la tabla y conexiones                                                    ** //
        // ***************************************************************************************** //
        var_SQLQuery.Free;
        var_SQLTransaction.Free;
        var_SQLConnector.Free;
    except
        on error : Exception do
        begin
            UTI_GEN_Error_Log( 'Ocurrió un error al intentar traer todos los datos del contacto' +
                               ' de proveedores con la id ' + Trim(param_id) + '. La tabla ha sido ' +
                               var_SQLQuery.Name + ' desde el módulo ' + Screen.ActiveForm.Name,
                               error );
            try
                var_SQLTransaction.Free;
                var_SQLConnector.Free;
                var_SQLQuery.Free;
            except
            end;
        end;
    end;
end;

function UTI_DATOS_TABLA_SeCambioAlgoEnRgtro( p_SQLQuery : TSQLQuery ) : Boolean;
var v_Contador     : Integer;
    v_Nombre_Campo : ShortString;
begin
  // *********************************************************************************************** //
  // ** UPDATE                                                                                    ** //
  // *********************************************************************************************** //
  Result := false;

  with p_SQLQuery do
  begin
    for v_Contador := 0 to (FieldDefs.Count - 1) do
    begin
      v_Nombre_Campo  := FieldDefs.Items[v_Contador].Name;

      if Trim(Params.ParamByName('COPY_' + v_Nombre_Campo).AsString) <> Trim(FieldByName(v_Nombre_Campo).AsString) then
      begin
        Result := true;
      end;
    end;
  end;
end;

end.

{
function UTI_DATOS_TABLA_series_servicios_CRUD( param_SQLQuery : TSQLQuery ) : TRegistro_CRUD;
begin
    Result.name_tabla := 'ss';

    Result.Delete_SQL := '';

    Result.Update_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'series_servicios',
                                                       'u' );

    Result.Insert_SQL := UTI_DATOS_TABLA_Rellenar_SQL( param_SQLQuery,
                                                       'series_servicios',
                                                       'i' );

    // ********************************************************************************************* //
    // ** No olvidemos que los campos que empiezan por OT_ son campos que pertenecen a otras      ** //
    // ** tablas(JOIN de la SELECT) y que por lo tanto no voy a permitir hacer nada con ellos en  ** //
    // ** form_filtrar_registros y de momento tampoco en form_ordenado_por                        ** //
    // ********************************************************************************************* //
    Result.SELECT_SQL := 'SELECT ss.*, ' + ' ' +
                                'dt.descripcion AS OT_descripcion_diarios_tipos,' + ' ' +
                                'emp.nombre_comercial AS OT_descripcion_empresa ' + ' ' +
                           'FROM series_servicios AS ss ' + ' ' +

                         'LEFT JOIN diarios_tipos AS dt' + ' ' +
                         'ON dt.id = ss.id_diarios_tipos' + ' ' +

                         'LEFT JOIN empresas AS emp' + ' ' +
                         'ON emp.id = ss.id_empresas' + ' ';

end;

}








